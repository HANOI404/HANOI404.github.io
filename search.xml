<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ZYNQ QSPI驱动分析</title>
      <link href="/1064320173/"/>
      <url>/1064320173/</url>
      <content type="html"><![CDATA[<!-- build time:Fri Aug 03 2018 18:02:06 GMT+0800 (中国标准时间) --><h2 id="ZYNQ-QSPI框架接口"><a href="#ZYNQ-QSPI框架接口" class="headerlink" title="ZYNQ QSPI框架接口"></a>ZYNQ QSPI框架接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">MTD Sub System  |</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">                | spi_nor_read  spi_nor_write  spi_nor_lock  spi_nor_unlock</span><br><span class="line">SPI Nor         |------------------------------------------------------------</span><br><span class="line">                | m25p80_write m25p80_read m25p80_write_reg m25p80_read_reg</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">SPI Bus         | spi_write spi_sync spi_write_then_read</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">SPI Master      | zynq_qspi_setup zynq_qspi_start_transfer</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">Hardware        |</span><br><span class="line">----------------|------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="ZYNQ-QSPI驱动注册过程"><a href="#ZYNQ-QSPI驱动注册过程" class="headerlink" title="ZYNQ QSPI驱动注册过程"></a>ZYNQ QSPI驱动注册过程</h2><h3 id="SPI-MASTER-驱动注册"><a href="#SPI-MASTER-驱动注册" class="headerlink" title="SPI MASTER 驱动注册"></a>SPI MASTER 驱动注册</h3><p>在驱动入口函数zynq_qspi_probe中, 完成对QSPI Controller的一系列初始化<br></p><figure class="highlight c"><figcaption><span>driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* QSPI controller initializations */</span></span><br><span class="line">zynq_qspi_init_hw(xqspi);</span><br><span class="line">...</span><br><span class="line">master-&gt;setup = zynq_qspi_setup;</span><br><span class="line">master-&gt;set_cs = zynq_qspi_chipselect;</span><br><span class="line">master-&gt;transfer_one = zynq_qspi_start_transfer;</span><br><span class="line">master-&gt;prepare_transfer_hardware = zynq_prepare_transfer_hardware;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后调用spi_register_master()创建设备节点/dev/spiX.X<br></p><figure class="highlight c"><figcaption><span>driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = spi_register_master(master);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;pdev-&gt;dev, <span class="string">"spi_register_master failed\n"</span>);</span><br><span class="line"><span class="keyword">goto</span> clk_dis_all;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="SPI-BUS-驱动注册"><a href="#SPI-BUS-驱动注册" class="headerlink" title="SPI BUS 驱动注册"></a>SPI BUS 驱动注册</h3><p>在spi_register_master函数的最后, 调用了of_register_spi_device来遍历子节点<br></p><figure class="highlight c"><figcaption><span>driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_register_master</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register devices from the device tree and ACPI */</span></span><br><span class="line">of_register_spi_devices(master);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在该函数中读取设备树上的配置信息, 初始化SPI BUS<br></p><figure class="highlight c"><figcaption><span>driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Alloc an spi_device */</span></span><br><span class="line">spi = spi_alloc_device(master);</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Select device driver */</span></span><br><span class="line">rc = of_modalias_node(nc, spi-&gt;modalias, </span><br><span class="line"><span class="keyword">sizeof</span>(spi-&gt;modalias));</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Device address */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"reg"</span>, &amp;value);</span><br><span class="line">spi-&gt;chip_select = value;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Mode (clock phase/polarity/etc.) */</span></span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpha"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPHA;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpol"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPOL;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cs-high"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CS_HIGH;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-3wire"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_3WIRE;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-lsb-first"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_LSB_FIRST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device DUAL/QUAD mode */</span></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-tx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-tx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-rx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-rx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device speed */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"spi-max-frequency"</span>, &amp;value);</span><br><span class="line">spi-&gt;max_speed_hz = value;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="SPI-NOR-驱动注册"><a href="#SPI-NOR-驱动注册" class="headerlink" title="SPI NOR 驱动注册"></a>SPI NOR 驱动注册</h3><p>在of_register_spi_device函数的最后, 调用spi_add_device来加载m25p80设备驱动<br></p><figure class="highlight c"><figcaption><span>driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register the new device */</span></span><br><span class="line">rc = spi_add_device(spi);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在m25p_probe函数中, 配置spi nor的read/write(读写nor flash), read_reg(配置qspi寄存器), write_reg(配置nor flash寄存器)<br></p><figure class="highlight c"><figcaption><span>drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">m25p_probe</span><span class="params">(struct spi_device *spi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">nor-&gt;read = m25p80_read;</span><br><span class="line">nor-&gt;write = m25p80_write;</span><br><span class="line">nor-&gt;write_reg = m25p80_write_reg;</span><br><span class="line">nor-&gt;read_reg = m25p80_read_reg;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用spi_nor_scan函数, 获取id, 得到nor flash信息, 然后配置type, writesize, size等参数, 设置_erase, _read, _write回调函数<br></p><figure class="highlight c"><figcaption><span>drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_nor_scan</span><span class="params">(struct spi_nor *nor, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">enum</span> read_mode mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">jinfo = spi_nor_read_id(nor);</span><br><span class="line">...</span><br><span class="line">mtd-&gt;priv = nor;</span><br><span class="line">mtd-&gt;type = MTD_NORFLASH;</span><br><span class="line">mtd-&gt;writesize = <span class="number">1</span>;</span><br><span class="line">mtd-&gt;flags = MTD_CAP_NORFLASH;</span><br><span class="line">mtd-&gt;size = info-&gt;sector_size * info-&gt;n_sectors;</span><br><span class="line">mtd-&gt;_erase = spi_nor_erase;</span><br><span class="line">mtd-&gt;_read = spi_nor_read_ext;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用mtd_device_register函数, 解析设备树中的分区表, 添加分区信息<br></p><figure class="highlight c"><figcaption><span>drivers/mtd/mtdcore.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mtd_device_parse_register</span><span class="params">(struct mtd_info *mtd, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> *types,</span></span></span><br><span class="line"><span class="function"><span class="params">      struct mtd_part_parser_data *parser_data,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> struct mtd_partition *parts,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> nr_parts)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = parse_mtd_partitions(mtd, types, &amp;parsed, parser_data);</span><br><span class="line">...</span><br><span class="line">ret = mtd_add_device_partitions(mtd, &amp;parsed);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/sinbingzoo/article/details/80206480" target="_blank" rel="noopener">Linux SPI/QSPI nor flash相关驱动代码</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> qspi </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
