<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>RabbitMQ配置使用SSL加密通信</title>
      <link href="/1725682029/"/>
      <url>/1725682029/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:55:00 GMT+0800 (GMT+08:00) --><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li>ubuntu 16.04</li><li>rabbitmq-server 3.5.7</li><li>openssl 1.0.2g</li></ul><h2 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>从网络获取生成证书工具:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Berico-Technologies/CMF-AMQP-Configuration.git &amp;&amp; <span class="built_in">cd</span> CMF-AMQP-Configuration/ssl</span><br></pre></td></tr></table></figure><p>生成证书文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh setup_ca.sh &#123;your-ca-file-name&#125;</span><br><span class="line">sh make_server_cert.sh &#123;your-hostname&#125; &#123;passwd&#125;</span><br><span class="line">sh create_client_cert.sh &#123;your-client-name&#125; &#123;passwd&#125;</span><br></pre></td></tr></table></figure><p>完成后会在当前目录生成 <code>ca</code> <code>server</code> <code>client</code> 文件夹, 里面是各自的证书文件;</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>服务端需要上面生成的 <code>ca</code> 和 <code>server</code> 文件夹, 拷贝到<code>/etc/rabbitmq/ssl</code> 目录下, 如果此目录不存在就手动创建.</p><p>修改 <code>/etc/rabbitmq/rabbitmq.config</code> 文件, 添加以下内容, 注意替换其中的 <code>{your-hostname}</code>, 如果此文件不存在则直接创建:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;ssl, [&#123;versions, [&apos;tlsv1.2&apos;, &apos;tlsv1.1&apos;]&#125;]&#125;,</span><br><span class="line">  &#123;rabbit, [</span><br><span class="line">    &#123;tcp_listeners, [5672]&#125;,</span><br><span class="line">    &#123;ssl_listeners, [5671]&#125;,</span><br><span class="line">    &#123;ssl_options, [</span><br><span class="line">      &#123;cacertfile,&quot;/etc/rabbitmq/ssl/ca/cacert.pem&quot;&#125;,</span><br><span class="line">      &#123;certfile,&quot;/etc/rabbitmq/ssl/server/&#123;your-hostname&#125;.cert.pem&quot;&#125;,</span><br><span class="line">      &#123;keyfile,&quot;/etc/rabbitmq/ssl/server/&#123;your-hostname&#125;.key.pem&quot;&#125;,</span><br><span class="line">      &#123;verify, verify_peer&#125;,</span><br><span class="line">      &#123;fail_if_no_peer_cert, true&#125;,</span><br><span class="line">      &#123;versions, [&apos;tlsv1.2&apos;, &apos;tlsv1.1&apos;]&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  ]&#125;</span><br><span class="line">].</span><br></pre></td></tr></table></figure><p>重启rabbitmq-server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl stop</span><br><span class="line">sudo rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>网页控制台出现 <code>amqp/ssl :: 5671</code> 字样说明配置成功.</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="使用openssl库提供的测试程序进行ssl回路测试"><a href="#使用openssl库提供的测试程序进行ssl回路测试" class="headerlink" title="使用openssl库提供的测试程序进行ssl回路测试"></a>使用openssl库提供的测试程序进行ssl回路测试</h3><p>替换以下命令中 <code>/path/to/server/{hostname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/client/{clientname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/ca/cacert.pem</code> 路径.</p><p>启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_server -cert /path/to/server/&#123;hostname&#125;.cert.pem -key /path/to/server/&#123;hostname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>客户端连接服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_client -cert /path/to/client/&#123;clientname&#125;.cert.pem -key /path/to/client/&#123;clientname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>此时应该可以在服务端和客户端之间收发消息.</p><h3 id="使用openssl库提供的测试程序连接到rabbitmq-server"><a href="#使用openssl库提供的测试程序连接到rabbitmq-server" class="headerlink" title="使用openssl库提供的测试程序连接到rabbitmq-server"></a>使用openssl库提供的测试程序连接到rabbitmq-server</h3><p>替换以下命令中 <code>/path/to/client/{clientname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/ca/cacert.pem</code> 路径.</p><p>客户端连接服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_client -connect localhost:5671 -cert /path/to/client/&#123;clientname&#125;.cert.pem -key /path/to/client/&#123;clientname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>目前测试连接后一会自动断开, 猜测应该是没有使用rabbitmq库, 服务端自动断开.</p><h3 id="C-程序连接到rabbitmq-server"><a href="#C-程序连接到rabbitmq-server" class="headerlink" title="C++程序连接到rabbitmq-server"></a>C++程序连接到rabbitmq-server</h3><p>使用AMQP-CPP库, 需要作出部分修改, 主要是添加了读取证书调用:</p><p>修改 <code>src/linux_tcp/openssl.cpp</code> 文件, 添加以下内容:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_load_verify_locations</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *cafile, <span class="keyword">const</span> <span class="keyword">char</span> *capath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create a function</span></span><br><span class="line">    <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_load_verify_locations)&gt; func(handle, <span class="string">"SSL_CTX_load_verify_locations"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// call the openssl function</span></span><br><span class="line">    <span class="keyword">return</span> func(ctx, cafile, capath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_certificate_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span> </span>&#123;                                                                        </span><br><span class="line">   <span class="comment">// create a function</span></span><br><span class="line">   <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_use_certificate_file)&gt; func(handle, <span class="string">"SSL_CTX_use_certificate_file"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// call the openssl function</span></span><br><span class="line">   <span class="keyword">return</span> func(ctx, file, type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_PrivateKey_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// create a function</span></span><br><span class="line">   <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_use_PrivateKey_file)&gt; func(handle, <span class="string">"SSL_CTX_use_PrivateKey_file"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// call the openssl function</span></span><br><span class="line">   <span class="keyword">return</span> func(ctx, file, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>修改 <code>src/linux_tcp/openssl.h</code> 文件, 添加函数声明:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_load_verify_locations</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *cafile, <span class="keyword">const</span> <span class="keyword">char</span> *capath)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_certificate_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_PrivateKey_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>修改 <code>src/linux_tcp/sslcontext.h</code> 文件, 在构造函数中添加以下内容, 注意替换证书路径:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL::SSL_CTX_load_verify_locations(_ctx, <span class="string">"/path/to/ssl/ca/cacert.pem"</span>, <span class="literal">nullptr</span>);</span><br><span class="line">OpenSSL::SSL_CTX_use_certificate_file(_ctx, <span class="string">"/path/to/client/&#123;clientname&#125;.cert.pem"</span>, SSL_FILETYPE_PEM);</span><br><span class="line">OpenSSL::SSL_CTX_use_PrivateKey_file(_ctx, <span class="string">"/path/to/client/&#123;clientname&#125;.key.pem"</span>, SSL_FILETYPE_PEM);</span><br></pre></td></tr></table></figure><p>测试程序使用 <code>examples/libev.cpp</code>, 修改以下部分使用ssl安全连接:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMQP::Address address("amqp://guest:guest@localhost/");</span></span><br><span class="line">AMQP::<span class="function">Address <span class="title">address</span><span class="params">(<span class="string">"amqps://guest:guest@localhost/"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>编译:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ../ -DAMQP-CPP_BUILD_EXAMPLES=ON -DAMQP-CPP_LINUX_TCP=ON</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>如果缺少<code>libev</code> <code>libuv</code> <code>libevent</code>库, 使用以下命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libev4 libuv1-dev libevent-2.0-5</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./examples/amqpcpp_libev_example</span><br></pre></td></tr></table></figure><p>此时应该正确连接到rabbitmq-server.</p><h3 id="Python程序连接到rabbitmq-server"><a href="#Python程序连接到rabbitmq-server" class="headerlink" title="Python程序连接到rabbitmq-server"></a>Python程序连接到rabbitmq-server</h3><p>示例代码 <code>rmq_sender.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 适用于 pika 1.1</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换所有证书路径</span></span><br><span class="line">ca_certfile = <span class="string">"/etc/rabbitmq/ssl/ca/cacert.pem"</span></span><br><span class="line">certfile = <span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.cert.pem"</span></span><br><span class="line">private_key = <span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.key.pem"</span></span><br><span class="line"><span class="comment"># 服务器信息</span></span><br><span class="line">hostname = <span class="string">"192.168.3.122"</span></span><br><span class="line">port = <span class="number">5671</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logging.basicConfig(level=logging.INFO)</span></span><br><span class="line"></span><br><span class="line">context = ssl.create_default_context(cafile=ca_certfile)</span><br><span class="line">context.load_cert_chain(certfile, private_key)</span><br><span class="line">ssl_options = pika.SSLOptions(context, hostname)</span><br><span class="line">conn_params = pika.ConnectionParameters(port=port, ssl_options=ssl_options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> pika.BlockingConnection(conn_params) <span class="keyword">as</span> conn:</span><br><span class="line">    ch = conn.channel()</span><br><span class="line">    ch.queue_declare(<span class="string">"ssl_test"</span>)</span><br><span class="line">    ch.basic_publish(<span class="string">""</span>, <span class="string">"ssl_test"</span>, <span class="string">"Hello, world!"</span>)</span><br><span class="line">    input(<span class="string">"Please enter any key to exit!!!\n"</span>)</span><br><span class="line"><span class="comment">#    print(ch.basic_get("ssl_test"))</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 适用于 pika 0.12</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 guest 用户无法远程登录</span></span><br><span class="line">creds = pika.PlainCredentials(<span class="string">"admin"</span>, <span class="string">"123456"</span>);</span><br><span class="line">conn_params = pika.ConnectionParameters(host = <span class="string">"192.168.3.122"</span>,</span><br><span class="line">                                        port = <span class="number">5671</span>,</span><br><span class="line">                                        ssl = <span class="keyword">True</span>,</span><br><span class="line">                                        credentials = creds,</span><br><span class="line">                                        ssl_options = dict(</span><br><span class="line">                                            ca_certs=<span class="string">"/etc/rabbitmq/ssl/ca/cacert.pem"</span>,</span><br><span class="line">                                            certfile=<span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.cert.pem"</span>,</span><br><span class="line">                                            keyfile=<span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.key.pem"</span>,</span><br><span class="line">                                            cert_reqs=ssl.CERT_REQUIRED))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> pika.BlockingConnection(conn_params) <span class="keyword">as</span> conn:</span><br><span class="line">   ch = conn.channel()</span><br><span class="line">   ch.queue_declare(<span class="string">"ssl_test"</span>)</span><br><span class="line">   ch.basic_publish(<span class="string">""</span>, <span class="string">"ssl_test"</span>, <span class="string">"Hello, pika!!!"</span>)</span><br><span class="line">   input(<span class="string">"Please enter any key to exit!!!\n"</span>)</span><br><span class="line">   <span class="comment"># print(ch.basic_get("ssl_test"))</span></span><br><span class="line">   conn.close()</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./rmq_sender.py</span><br></pre></td></tr></table></figure><p>此时应该正确连接到rabbitmq-server.</p><h3 id="增加一个RabbitMQ用户"><a href="#增加一个RabbitMQ用户" class="headerlink" title="增加一个RabbitMQ用户"></a>增加一个RabbitMQ用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl add_user admin 123456</span><br><span class="line">sudo rabbitmqctl set_user_tags admin administrator</span><br><span class="line">sudo rabbitmqctl set_permissions -p <span class="string">'/'</span> admin <span class="string">'.'</span> <span class="string">'.'</span> <span class="string">'.'</span></span><br><span class="line">sudo service rabbitmq-server restart</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/Vstars/article/details/84733995" target="_blank" rel="noopener">RabbitMQ SSL设置</a><br><a href="https://blog.csdn.net/comprel/article/details/94663170" target="_blank" rel="noopener">rabbitmq ssl/tls及pika tls认证连接方法</a><br><a href="https://blog.csdn.net/rzytc/article/details/50647095" target="_blank" rel="noopener">SSL编程指南</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> SSl </tag>
            
            <tag> Pika </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>VSCode 配置</title>
      <link href="/4258116079/"/>
      <url>/4258116079/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><p>测试环境:</p><ul><li>windows 10 专业版 64位 1909</li><li>Visual Studio Code 1.41.1 (system setup)</li></ul><a id="more"></a><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>这里使用了<code>MinGW</code>作为编译工具, 主要是保持代码与<code>Linux</code>平台最大兼容性.</p><p><code>VS Code</code>需要安装以下插件:</p><ul><li>C/C++</li></ul><h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p><a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/" target="_blank" rel="noopener">下载地址</a>;</p><p>这里选择下载 <code>MinGW-W64 GCC-8.1.0</code> 下的 <a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z" target="_blank" rel="noopener">x86_64-posix-seh</a>;</p><p>将解压后目录下<code>bin</code>文件夹路径添加到系统环境变量中, 本人的路径为<code>D:\Programs\MinGW\bin</code>.</p><h2 id="CMake"><a href="#CMake" class="headerlink" title="CMake"></a>CMake</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p><a href="https://cmake.org/download/" target="_blank" rel="noopener">下载地址</a>;</p><p>优先下载<code>Latest Release</code>版本. 这里选择下载的是<code>cmake-3.16.3-win64-x64.msi</code>;</p><p>安装按照默认安装即可, 记得勾选<code>Add CMake to the system PATH for all users</code>.</p><h3 id="VS-Code-插件"><a href="#VS-Code-插件" class="headerlink" title="VS Code 插件"></a>VS Code 插件</h3><p>需要以下插件:</p><ul><li>C++ Intellisense</li><li>CMake</li><li>CMake Tools</li></ul><h3 id="简单测试工程"><a href="#简单测试工程" class="headerlink" title="简单测试工程"></a>简单测试工程</h3><p>新建一个文件夹<code>hellocmake</code>, 进入该目录后, 右键菜单选择 <code>Open with Code</code> 项打开<code>VS Code</code>;</p><p>进入<code>VS Code</code>界面后, 新建<code>hello_cmake.cc</code>和<code>CMakeLists.txt</code>文件, 内容分别如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Hello CMake from VS Code."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 2.8)</span><br><span class="line"></span><br><span class="line">project(HelloCMake)</span><br><span class="line"></span><br><span class="line">add_executable(hello_cmake hello_cmake.cc)</span><br></pre></td></tr></table></figure><p>在<code>VS Code</code>界面输入<code>Ctrl+Shift+P</code>快捷键, 输入<code>CMake: Select a Kit</code>, 选择<code>GCC for x86_64-w64-mingw32 8.1.0</code>, 对应刚才安装<code>MinGW</code>编译工具;</p><p>在<code>VS Code</code>界面输入<code>Ctrl+Shift+P</code>快捷键, 输入<code>CMake: Build</code>进行编译, 或者直接输入快捷键<code>F7</code>;</p><p>在<code>VS Code</code>下方终端界面输入<code>cd build</code> , 然后输入<code>ls</code>, 目录下文件结构大致如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d-----        2020/1/27     21:16                CMakeFiles</span><br><span class="line">-a----        2020/1/27     20:50          16612 CMakeCache.txt</span><br><span class="line">-a----        2020/1/27     20:50           1495 cmake_install.cmake</span><br><span class="line">-a----        2020/1/27     21:15            388 compile_commands.json</span><br><span class="line">-a----        2020/1/27     21:15          54716 hello_cmake.exe</span><br><span class="line">-a----        2020/1/27     21:15           5317 Makefile</span><br></pre></td></tr></table></figure><p>其中<code>hello_cmake.exe</code>是编译正确后输入的可执行文件, 输入<code>./hello_cmake.exe</code>. 得到以下输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Yuming\Documents\Visual Studio Code\hellocmake\build&gt; .\hello_cmake.exe</span><br><span class="line">Hello CMake from VS Code.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CMake 之 ExternalProject_Add</title>
      <link href="/855694789/"/>
      <url>/855694789/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><p><code>CMake</code> 通过使用<code>ExternalProject_Add</code>将其他第三方库导入到本工程中使用.</p><a id="more"></a><h2 id="常规编译方式的源码包导入"><a href="#常规编译方式的源码包导入" class="headerlink" title="常规编译方式的源码包导入"></a>常规编译方式的源码包导入</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(OpenSSL_ROOT <span class="string">"$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/openssl"</span>)</span><br><span class="line">ExternalProject_Add(</span><br><span class="line">  <span class="comment"># 工程名称</span></span><br><span class="line">  openssl</span><br><span class="line">  <span class="comment"># 从网路链接中获取源码包解压.</span></span><br><span class="line">  <span class="comment"># URL "https://www.openssl.org/source/openssl-1.1.0h.tar.gz"</span></span><br><span class="line">  <span class="comment"># 从本地路径源码包解压.</span></span><br><span class="line">  URL <span class="string">"$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/externalproject/openssl-1.1.0h.tar.gz"</span></span><br><span class="line">  <span class="comment"># 文件MD5校验码.</span></span><br><span class="line">  URL_MD5 <span class="string">"5271477e4d93f4ea032b665ef095ff24"</span></span><br><span class="line">  <span class="comment"># 传统配置命令, 类似于'./configure [options] ...';</span></span><br><span class="line">  CONFIGURE_COMMAND &lt;SOURCE_DIR&gt;/Configure linux-x86_64 --prefix=&lt;INSTALL_DIR&gt; --openssldir=&lt;INSTALL_DIR&gt;/lib/ssl</span><br><span class="line">  no-weak-ssl-ciphers enable-ec_nistp_64_gcc_128 no-shared</span><br><span class="line">  <span class="comment"># 编译携带参数;</span></span><br><span class="line">  <span class="comment"># BUILD_COMMAND make "-ldl"</span></span><br><span class="line">  <span class="comment"># ‘make install’路径;</span></span><br><span class="line">  INSTALL_DIR <span class="variable">$&#123;OpenSSL_ROOT&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">set</span>(OpenSSL_INCLUDE_DIR <span class="variable">$&#123;OpenSSL_ROOT&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">set</span>(OpenSSL_LINK_DIR <span class="variable">$&#123;OpenSSL_ROOT&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(OpenSSL_LIBRARIES <span class="variable">$&#123;OpenSSL_ROOT&#125;</span>/lib/libssl.a <span class="variable">$&#123;OpenSSL_ROOT&#125;</span>/lib/libcrypto.a)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"Found external dependency SSL: "</span> <span class="variable">$&#123;OpenSSL_INCLUDE_DIR&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="支持CMake的源码包导入"><a href="#支持CMake的源码包导入" class="headerlink" title="支持CMake的源码包导入"></a>支持CMake的源码包导入</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(AMQPCPP_ROOT <span class="string">"$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/amqpcpp"</span>)</span><br><span class="line">ExternalProject_Add(</span><br><span class="line">    <span class="comment"># 工程名称.</span></span><br><span class="line">    libamqpcpp</span><br><span class="line">    <span class="comment"># 从网路链接中获取源码包解压.</span></span><br><span class="line">    <span class="comment"># URL "https://github.com/CopernicaMarketingSoftware/AMQP-CPP/archive/v4.1.5.tar.gz"</span></span><br><span class="line">    <span class="comment"># 从本地路径源码包解压.</span></span><br><span class="line">    URL <span class="string">"$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/externalproject/libamqpcpp-4.1.5.tar.gz"</span></span><br><span class="line">    <span class="comment"># 文件MD5校验码.</span></span><br><span class="line">    URL_MD5 <span class="string">"66fa995d432adade65ea6274799f2bed"</span></span><br><span class="line">    <span class="comment"># CMake 配置参数项, 类似于‘cmake &#123;src_dir&#125; -Dxxx’命令.</span></span><br><span class="line">    CMAKE_ARGS -Wno-dev <span class="string">"-DCMAKE_INSTALL_PREFIX=&lt;INSTALL_DIR&gt;"</span> <span class="string">"-DAMQP-CPP_LINUX_TCP=ON"</span></span><br><span class="line">    <span class="comment"># ‘make install’路径.</span></span><br><span class="line">    INSTALL_DIR <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 生成头文件和库的路径.</span></span><br><span class="line"><span class="keyword">set</span>(AMQPCPP_INCLUDE_DIR <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">set</span>(AMQPCPP_LINK_DIR <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/lib)</span><br><span class="line"><span class="keyword">set</span>(AMQPCPP_LIBRARIES <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/lib/libamqpcpp.a)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"Found external dependency AMQP-CPP: "</span> <span class="variable">$&#123;AMQPCPP_INCLUDE_DIR&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="使用外部库"><a href="#使用外部库" class="headerlink" title="使用外部库"></a>使用外部库</h2><p>推荐使用后两种写法.</p><h3 id="包含所有的库"><a href="#包含所有的库" class="headerlink" title="包含所有的库"></a>包含所有的库</h3><p>将所有的编译好的链接库保存到一个变量中, 需要使用时全部导入;</p><ol><li>封装:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(APPEND LIBRARIES <span class="variable">$&#123;AMQPCPP_LIBRARIES&#125;</span>)</span><br><span class="line">list(APPEND DEPENDENCIES libamqpcpp)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(xxx <span class="variable">$&#123;DEPENDENCIES&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(xxx PRIVATE</span><br><span class="line">  <span class="variable">$&#123;LIBRARIES&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="每个库独立使用"><a href="#每个库独立使用" class="headerlink" title="每个库独立使用"></a>每个库独立使用</h3><p>将编译生成的链接库和头文件路径直接添加到工程的链接库和头文件搜索路径, 需要使用到某些链接库时单独导入;</p><ol><li>封装:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;AMQPCPP_INCLUDE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(<span class="variable">$&#123;AMQPCPP_LINK_DIR&#125;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(xxx libamqpcpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(xxx PRIVATE</span><br><span class="line">  amqpcpp</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="优雅写法"><a href="#优雅写法" class="headerlink" title="优雅写法"></a>优雅写法</h3><ol><li>封装:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建依赖目录, 否则cmake时会报错.</span></span><br><span class="line">file(<span class="keyword">MAKE_DIRECTORY</span> <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">add_library</span>(amqpcpp-static STATIC IMPORTED GLOBAL)</span><br><span class="line"><span class="keyword">set_property</span>(TARGET amqpcpp-static PROPERTY IMPORTED_LOCATION <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/lib/libamqpcpp.a)</span><br><span class="line"><span class="comment"># 打包依赖库, 可以添加多个.</span></span><br><span class="line"><span class="comment"># set_property(TARGET amqpcpp-static PROPERTY IMPORTED_INTERFACE_LINK_LIBRARIES pthread)</span></span><br><span class="line"><span class="keyword">set_property</span>(TARGET amqpcpp-static PROPERTY INTERFACE_INCLUDE_DIRECTORIES <span class="variable">$&#123;AMQPCPP_ROOT&#125;</span>/<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用:</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_dependencies</span>(xxx libamqpcpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(xxx PRIVATE</span><br><span class="line">  amqpcpp-static</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="示例工程"><a href="#示例工程" class="headerlink" title="示例工程"></a>示例工程</h2><p><a href="https://github.com/hanoi404/rmqclient" target="_blank" rel="noopener">rmqclient</a></p><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://cmake.org/cmake/help/v3.15/module/ExternalProject.html" target="_blank" rel="noopener">ExternalProject</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> CMake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
            <tag> ExternalProject </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RabbitMQ配置使用SSL加密通信</title>
      <link href="/1725682028/"/>
      <url>/1725682028/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li>ubuntu 16.04</li><li>rabbitmq-server 3.5.7</li><li>openssl 1.0.2g</li></ul><h2 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>从网络获取生成证书工具:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Berico-Technologies/CMF-AMQP-Configuration.git &amp;&amp; <span class="built_in">cd</span> CMF-AMQP-Configuration/ssl</span><br></pre></td></tr></table></figure><p>生成证书文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh setup_ca.sh &#123;your-ca-file-name&#125;</span><br><span class="line">sh make_server_cert.sh &#123;your-hostname&#125; &#123;passwd&#125;</span><br><span class="line">sh create_client_cert.sh &#123;your-client-name&#125; &#123;passwd&#125;</span><br></pre></td></tr></table></figure><p>完成后会在当前目录生成 <code>ca</code> <code>server</code> <code>client</code> 文件夹, 里面是各自的证书文件;</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>服务端需要上面生成的 <code>ca</code> 和 <code>server</code> 文件夹, 拷贝到<code>/etc/rabbitmq/ssl</code> 目录下, 如果此目录不存在就手动创建.</p><p>修改 <code>/etc/rabbitmq/rabbitmq.config</code> 文件, 添加以下内容, 注意替换其中的 <code>{your-hostname}</code>, 如果此文件不存在则直接创建:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;ssl, [&#123;versions, [&apos;tlsv1.2&apos;, &apos;tlsv1.1&apos;]&#125;]&#125;,</span><br><span class="line">  &#123;rabbit, [</span><br><span class="line">    &#123;tcp_listeners, [5672]&#125;,</span><br><span class="line">    &#123;ssl_listeners, [5671]&#125;,</span><br><span class="line">    &#123;ssl_options, [</span><br><span class="line">      &#123;cacertfile,&quot;/etc/rabbitmq/ssl/ca/cacert.pem&quot;&#125;,</span><br><span class="line">      &#123;certfile,&quot;/etc/rabbitmq/ssl/server/&#123;your-hostname&#125;.cert.pem&quot;&#125;,</span><br><span class="line">      &#123;keyfile,&quot;/etc/rabbitmq/ssl/server/&#123;your-hostname&#125;.key.pem&quot;&#125;,</span><br><span class="line">      &#123;verify, verify_peer&#125;,</span><br><span class="line">      &#123;fail_if_no_peer_cert, true&#125;,</span><br><span class="line">      &#123;versions, [&apos;tlsv1.2&apos;, &apos;tlsv1.1&apos;]&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">  ]&#125;</span><br><span class="line">].</span><br></pre></td></tr></table></figure><p>重启rabbitmq-server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rabbitmqctl stop</span><br><span class="line">sudo rabbitmq-server -detached</span><br></pre></td></tr></table></figure><p>网页控制台出现 <code>amqp/ssl :: 5671</code> 字样说明配置成功.</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="使用openssl库提供的测试程序进行ssl回路测试"><a href="#使用openssl库提供的测试程序进行ssl回路测试" class="headerlink" title="使用openssl库提供的测试程序进行ssl回路测试"></a>使用openssl库提供的测试程序进行ssl回路测试</h3><p>替换以下命令中 <code>/path/to/server/{hostname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/client/{clientname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/ca/cacert.pem</code> 路径.</p><p>启动服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_server -cert /path/to/server/&#123;hostname&#125;.cert.pem -key /path/to/server/&#123;hostname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>客户端连接服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_client -cert /path/to/client/&#123;clientname&#125;.cert.pem -key /path/to/client/&#123;clientname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>此时应该可以在服务端和客户端之间收发消息.</p><h3 id="使用openssl库提供的测试程序连接到rabbitmq-server"><a href="#使用openssl库提供的测试程序连接到rabbitmq-server" class="headerlink" title="使用openssl库提供的测试程序连接到rabbitmq-server"></a>使用openssl库提供的测试程序连接到rabbitmq-server</h3><p>替换以下命令中 <code>/path/to/client/{clientname}.cert.pem</code> 路径.<br>替换以下命令中 <code>/path/to/ca/cacert.pem</code> 路径.</p><p>客户端连接服务端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl s_client -connect localhost:5671 -cert /path/to/client/&#123;clientname&#125;.cert.pem -key /path/to/client/&#123;clientname&#125;.key.pem -CAfile /path/to/ca/cacert.pem</span><br></pre></td></tr></table></figure><p>目前测试连接后一会自动断开, 猜测应该是没有使用rabbitmq库, 服务端自动断开.</p><h3 id="C-程序连接到rabbitmq-server"><a href="#C-程序连接到rabbitmq-server" class="headerlink" title="C++程序连接到rabbitmq-server"></a>C++程序连接到rabbitmq-server</h3><p>使用AMQP-CPP库, 需要作出部分修改, 主要是添加了读取证书调用:</p><p>修改 <code>src/linux_tcp/openssl.cpp</code> 文件, 添加以下内容:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_load_verify_locations</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *cafile, <span class="keyword">const</span> <span class="keyword">char</span> *capath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create a function</span></span><br><span class="line">    <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_load_verify_locations)&gt; func(handle, <span class="string">"SSL_CTX_load_verify_locations"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// call the openssl function</span></span><br><span class="line">    <span class="keyword">return</span> func(ctx, cafile, capath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_certificate_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span> </span>&#123;                                                                        </span><br><span class="line">   <span class="comment">// create a function</span></span><br><span class="line">   <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_use_certificate_file)&gt; func(handle, <span class="string">"SSL_CTX_use_certificate_file"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// call the openssl function</span></span><br><span class="line">   <span class="keyword">return</span> func(ctx, file, type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_PrivateKey_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// create a function</span></span><br><span class="line">   <span class="keyword">static</span> Function&lt;<span class="keyword">decltype</span>(::SSL_CTX_use_PrivateKey_file)&gt; func(handle, <span class="string">"SSL_CTX_use_PrivateKey_file"</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// call the openssl function</span></span><br><span class="line">   <span class="keyword">return</span> func(ctx, file, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>src/linux_tcp/openssl.h</code> 文件, 添加函数声明:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_load_verify_locations</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *cafile, <span class="keyword">const</span> <span class="keyword">char</span> *capath)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_certificate_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_CTX_use_PrivateKey_file</span><span class="params">(SSL_CTX *ctx, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> type)</span></span>;</span><br></pre></td></tr></table></figure><p>修改 <code>src/linux_tcp/sslcontext.h</code> 文件, 在构造函数中添加以下内容, 注意替换证书路径:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL::SSL_CTX_load_verify_locations(_ctx, <span class="string">"/path/to/ssl/ca/cacert.pem"</span>, <span class="literal">nullptr</span>);</span><br><span class="line">OpenSSL::SSL_CTX_use_certificate_file(_ctx, <span class="string">"/path/to/client/&#123;clientname&#125;.cert.pem"</span>, SSL_FILETYPE_PEM);</span><br><span class="line">OpenSSL::SSL_CTX_use_PrivateKey_file(_ctx, <span class="string">"/path/to/client/&#123;clientname&#125;.key.pem"</span>, SSL_FILETYPE_PEM);</span><br></pre></td></tr></table></figure><p>测试程序使用 <code>examples/libev.cpp</code>, 修改以下部分使用ssl加密连接:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMQP::Address address("amqp://guest:guest@localhost/");</span></span><br><span class="line">AMQP::<span class="function">Address <span class="title">address</span><span class="params">(<span class="string">"amqps://guest:guest@localhost/"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>编译:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ../ -DAMQP-CPP_BUILD_EXAMPLES=ON -DAMQP-CPP_LINUX_TCP=ON</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>如果缺少<code>libev</code> <code>libuv</code> <code>libevent</code>库, 使用以下命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libev4 libuv1-dev libevent-2.0-5</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./examples/amqpcpp_libev_example</span><br></pre></td></tr></table></figure><p>此时应该正确连接到rabbitmq-server.</p><h3 id="Python程序连接到rabbitmq-server"><a href="#Python程序连接到rabbitmq-server" class="headerlink" title="Python程序连接到rabbitmq-server"></a>Python程序连接到rabbitmq-server</h3><p>示例代码 <code>rmq_sender.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请替换所有证书路径</span></span><br><span class="line">ca_certfile = <span class="string">"/etc/rabbitmq/ssl/ca/cacert.pem"</span></span><br><span class="line">certfile = <span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.cert.pem"</span></span><br><span class="line">private_key = <span class="string">"/etc/rabbitmq/ssl/client/rabbitmq_client.key.pem"</span></span><br><span class="line"><span class="comment"># 服务器信息</span></span><br><span class="line">hostname = <span class="string">"192.168.3.122"</span></span><br><span class="line">port = <span class="number">5671</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logging.basicConfig(level=logging.INFO)</span></span><br><span class="line"></span><br><span class="line">context = ssl.create_default_context(cafile=ca_certfile)</span><br><span class="line">context.load_cert_chain(certfile, private_key)</span><br><span class="line">ssl_options = pika.SSLOptions(context, hostname)</span><br><span class="line">conn_params = pika.ConnectionParameters(port=port, ssl_options=ssl_options)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> pika.BlockingConnection(conn_params) <span class="keyword">as</span> conn:</span><br><span class="line">    ch = conn.channel()</span><br><span class="line">    ch.queue_declare(<span class="string">"ssl_test"</span>)</span><br><span class="line">    ch.basic_publish(<span class="string">""</span>, <span class="string">"ssl_test"</span>, <span class="string">"Hello, world!"</span>)</span><br><span class="line">    input(<span class="string">"Please enter any key to exit!!!\n"</span>)</span><br><span class="line"><span class="comment">#    print(ch.basic_get("ssl_test"))</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./rmq_sender.py</span><br></pre></td></tr></table></figure><p>此时应该正确连接到rabbitmq-server.</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://blog.csdn.net/Vstars/article/details/84733995" target="_blank" rel="noopener">RabbitMQ SSL设置</a><br><a href="https://blog.csdn.net/comprel/article/details/94663170" target="_blank" rel="noopener">rabbitmq ssl/tls及pika tls认证连接方法</a><br><a href="https://blog.csdn.net/rzytc/article/details/50647095" target="_blank" rel="noopener">SSL编程指南</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu 修改开机画面</title>
      <link href="/1403734030/"/>
      <url>/1403734030/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><p>基于ubuntu-logo主题进行修改.</p><h2 id="开机显示部分"><a href="#开机显示部分" class="headerlink" title="开机显示部分"></a>开机显示部分</h2><p>相关文件: <code>/etc/default/grub</code>.</p><h3 id="不显示任何信息-黑屏"><a href="#不显示任何信息-黑屏" class="headerlink" title="不显示任何信息(黑屏)"></a>不显示任何信息(黑屏)</h3><p>修改配置文件以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=quiet</span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">"console=tty12"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="只显示文本信息"><a href="#只显示文本信息" class="headerlink" title="只显示文本信息"></a>只显示文本信息</h3><p>修改配置文件以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=quiet</span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br></pre></td></tr></table></figure><h3 id="显示指定LOG等级的文本信息"><a href="#显示指定LOG等级的文本信息" class="headerlink" title="显示指定LOG等级的文本信息"></a>显示指定LOG等级的文本信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"loglevel=4"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br></pre></td></tr></table></figure><h3 id="显示开机动画"><a href="#显示开机动画" class="headerlink" title="显示开机动画"></a>显示开机动画</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br></pre></td></tr></table></figure><h3 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h3><p>修改完成后输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><p>重启后生效.</p><h2 id="开机动画-ubuntu-logo"><a href="#开机动画-ubuntu-logo" class="headerlink" title="开机动画(ubuntu-logo)"></a>开机动画(ubuntu-logo)</h2><p>相关文件路径: <code>/usr/share/plymouth/themes/ubuntu-logo</code></p><h3 id="LOGO-替换"><a href="#LOGO-替换" class="headerlink" title="LOGO 替换"></a>LOGO 替换</h3><p>替换主题路径下的 <code>ubuntu-logo.png</code> 图片.</p><h3 id="背景色修改"><a href="#背景色修改" class="headerlink" title="背景色修改"></a>背景色修改</h3><p>分为两部分: <code>GRUB</code> 中一闪而过的背景色和显示进度的背景色.</p><h4 id="GRUB"><a href="#GRUB" class="headerlink" title="GRUB"></a>GRUB</h4><p>相关文件: <code>ubuntu-logo.grub</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前3个参数.</span></span><br><span class="line"><span class="keyword">if</span> background_color 0,0,0,0; <span class="keyword">then</span></span><br><span class="line">  clear</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h4><p>相关文件: <code>ubuntu-logo.script</code></p><p>修改配置文件以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># #ffffff</span></span><br><span class="line"><span class="comment"># 换算: 每个byte除以255.</span></span><br><span class="line">Window.SetBackgroundTopColor (1.0, 1.0, 1.0);     <span class="comment"># Nice colour on top of the screen fading to</span></span><br><span class="line">Window.SetBackgroundBottomColor (1.0, 1.0, 1.0);  <span class="comment"># an equally nice colour on the bottom</span></span><br></pre></td></tr></table></figure><p>这两个设置不同颜色时, 会出现渐变色效果;</p><h3 id="配置生效-1"><a href="#配置生效-1" class="headerlink" title="配置生效"></a>配置生效</h3><p>修改完成后输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs  -u</span><br></pre></td></tr></table></figure><p>重启后生效.</p><h2 id="其他动画主题"><a href="#其他动画主题" class="headerlink" title="其他动画主题"></a>其他动画主题</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>将其它主题放到 <code>/usr/share/plymouth/themes</code> 目录下;</li><li>输入以下命令生成选项:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/share/plymouth/themes/default.plymouth default.plymouth /usr/share/plymouth/themes/&#123;your_theme_dir&#125;/&#123;your_theme.plymouth&#125; 100</span><br></pre></td></tr></table></figure><h3 id="选择生效"><a href="#选择生效" class="headerlink" title="选择生效"></a>选择生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config default.plymouth</span><br></pre></td></tr></table></figure><p>根据提示选择使用的动画主题.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-initramfs  -u</span><br></pre></td></tr></table></figure><p>重启后生效.</p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu-logo </tag>
            
            <tag> plymouth </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mesa 库(libGL)静态编译</title>
      <link href="/4090592276/"/>
      <url>/4090592276/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><h2 id="编译-环境"><a href="#编译-环境" class="headerlink" title="编译 环境"></a>编译 环境</h2><ul><li>系统: Ubuntu 16.04 64bit</li><li>Mesa 库版本: 18.0.5</li></ul><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh --<span class="built_in">disable</span>-dri3 --<span class="built_in">disable</span>-dri --<span class="built_in">disable</span>-gbm --<span class="built_in">disable</span>-egl enable_shared=no --prefix=/mnt/workspace/SkyUI/mesa-mesa-18.0.5/_install</span><br></pre></td></tr></table></figure><h2 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>之后在源码根目录<code>_install</code>, 目录下生成相关文件.</p><h2 id="错误解决记录"><a href="#错误解决记录" class="headerlink" title="错误解决记录"></a>错误解决记录</h2><ol><li>Python mako module v0.8.0 or higher not found.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-mako</span><br></pre></td></tr></table></figure><ol start="2"><li>No package ‘expat21’ found.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libexpat1-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>configure: error: –enable-llvm is required when building r300.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install llvm</span><br></pre></td></tr></table></figure><p>这样应该是不行的, 提示 <code>configure: error: LLVM 3.9.0 or newer is required for r600</code>. 按照下面的方法安装解决:<br><a href="https://www.jianshu.com/p/ad7e7fca51bb" target="_blank" rel="noopener">ubuntu 16.04 安装 llvm</a></p><ol start="4"><li>configure: error: r600 requires libelf when using llvm.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sudo apt-get install libelf-dev</span><br></pre></td></tr></table></figure><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="https://launchpad.net/ubuntu/+source/mesa/18.0.5-0ubuntu0~16.04.1" target="_blank" rel="noopener">mesa-18.0.5-0ubuntu0~16.04.1</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mesa </tag>
            
            <tag> LibGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 下 Qt 应用程序发布</title>
      <link href="/549431043/"/>
      <url>/549431043/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li>系统: Ubuntu 16.04 64bit</li><li>Qt 版本: 5.13.0</li></ul><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>下载 <code>linuxdeployqt-6-x86_64.AppImage</code>, 重命名为 <code>linuxdeployqt</code>, 并放到 <code>/usr/local/bin</code>目录下;</li><li>下载 <code>appimagetool-x86_64.AppImage</code>, 重命名为 <code>appimagetool</code>, 并放到 <code>/usr/local/bin</code>目录下;</li><li>下载 <code>patchelf-0.9.tar.gz</code>, 解压, 并执行以下命令.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><h3 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h3><p>使用 <code>Qt</code> 编译出来的程序为 <code>qmlstatictest</code>, 在任意位置创建目录 <code>qmlstatictest.AppDir</code>, 目录名称格式尽量保持一致, 在<code>qmlstatictest.AppDir</code> 目录下创建如下目录结构, 并将编译出来的程序 <code>qmlstatictest</code> 复制到该目录下指定位置, 编写<code>qmlstatictest.desktop</code>, 拷贝 <code>logo.png</code> 文件, 最终得到的目录结构如下所示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ tree qmlstatictest.AppDir</span><br><span class="line">qmlstatictest.AppDir</span><br><span class="line">└── usr</span><br><span class="line">    ├── bin</span><br><span class="line">    │   └── qmlstatictest</span><br><span class="line">    ├── lib</span><br><span class="line">    └── share</span><br><span class="line">        ├── applications</span><br><span class="line">        │   └── qmlstatictest.desktop</span><br><span class="line">        └── icons</span><br><span class="line">            └── hicolor</span><br><span class="line">                └── logo.png</span><br><span class="line"></span><br><span class="line">7 directories, 3 files</span><br></pre></td></tr></table></figure><h3 id="执行打包命令"><a href="#执行打包命令" class="headerlink" title="执行打包命令"></a>执行打包命令</h3><p>这一步需要使用 <code>root</code> 用户操作, 否则会出错:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linuxdeployqt qmlstatictest.AppDir/usr/share/applications/qmlstatictest.desktop</span></span><br><span class="line">linuxdeployqt 5 (commit 37631e5), build 631 built on 2019-01-25 22:47:58 UTC</span><br><span class="line">Desktop file as first argument: <span class="string">"qmlstatictest.AppDir/usr/share/applications/qmlstatictest.desktop"</span></span><br><span class="line">desktopExecEntry: <span class="string">"qmlstatictest"</span></span><br><span class="line">desktopIconEntry: <span class="string">"logo"</span></span><br><span class="line">Found binary from desktop file: <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr/bin/qmlstatictest"</span></span><br><span class="line">FHS-like mode with PREFIX, fhsPrefix: <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr"</span></span><br><span class="line">app-binary: <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr/bin/qmlstatictest"</span></span><br><span class="line">appDirPath: <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir"</span></span><br><span class="line">relativeBinPath: <span class="string">"usr/bin/qmlstatictest"</span></span><br><span class="line">Copied <span class="string">"qmlstatictest.AppDir/usr/share/applications/qmlstatictest.desktop"</span> to <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/qmlstatictest.desktop"</span></span><br><span class="line">Found icons from desktop file: (<span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr/share/icons/hicolor/logo.png"</span>)</span><br><span class="line">iconToBeUsed: <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr/share/icons/hicolor/logo.png"</span></span><br><span class="line">Copied <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/usr/share/icons/hicolor/logo.png"</span> to <span class="string">"/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir/logo.png"</span></span><br></pre></td></tr></table></figure><p>执行命令后, 目录文件结构为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">$ tree qmlstatictest.AppDir</span><br><span class="line">qmlstatictest.AppDir</span><br><span class="line">├── AppRun -&gt; usr/bin/qmlstatictest</span><br><span class="line">├── logo.png</span><br><span class="line">├── qmlstatictest.desktop</span><br><span class="line">└── usr</span><br><span class="line">    ├── bin</span><br><span class="line">    │   ├── qmlstatictest</span><br><span class="line">    │   └── qt.conf</span><br><span class="line">    ├── lib</span><br><span class="line">    │   ├── libicudata.so.56</span><br><span class="line">    │   ├── libicui18n.so.56</span><br><span class="line">    │   ├── libicuuc.so.56</span><br><span class="line">    │   ├── libQt5Core.so.5</span><br><span class="line">    │   ├── libQt5DBus.so.5</span><br><span class="line">    │   ├── libQt5Gui.so.5</span><br><span class="line">    │   ├── libQt5Network.so.5</span><br><span class="line">    │   ├── libQt5Qml.so.5</span><br><span class="line">    │   └── libQt5XcbQpa.so.5</span><br><span class="line">    ├── plugins</span><br><span class="line">    │   ├── bearer</span><br><span class="line">    │   │   ├── libqconnmanbearer.so</span><br><span class="line">    │   │   ├── libqgenericbearer.so</span><br><span class="line">    │   │   └── libqnmbearer.so</span><br><span class="line">    │   ├── imageformats</span><br><span class="line">    │   │   ├── libqgif.so</span><br><span class="line">    │   │   ├── libqicns.so</span><br><span class="line">    │   │   ├── libqico.so</span><br><span class="line">    │   │   ├── libqjpeg.so</span><br><span class="line">    │   │   ├── libqtga.so</span><br><span class="line">    │   │   ├── libqtiff.so</span><br><span class="line">    │   │   ├── libqwbmp.so</span><br><span class="line">    │   │   └── libqwebp.so</span><br><span class="line">    │   ├── platforminputcontexts</span><br><span class="line">    │   │   ├── libcomposeplatforminputcontextplugin.so</span><br><span class="line">    │   │   └── libibusplatforminputcontextplugin.so</span><br><span class="line">    │   ├── platforms</span><br><span class="line">    │   │   └── libqxcb.so</span><br><span class="line">    │   └── xcbglintegrations</span><br><span class="line">    │       ├── libqxcb-egl-integration.so</span><br><span class="line">    │       └── libqxcb-glx-integration.so</span><br><span class="line">    ├── share</span><br><span class="line">    │   ├── applications</span><br><span class="line">    │   │   └── qmlstatictest.desktop</span><br><span class="line">    │   └── icons</span><br><span class="line">    │       └── hicolor</span><br><span class="line">    │           └── logo.png</span><br><span class="line">    └── translations</span><br><span class="line">        ├── qt_ar.qm</span><br><span class="line">        ├── qt_bg.qm</span><br><span class="line">        ├── qt_ca.qm</span><br><span class="line">        ├── qt_cs.qm</span><br><span class="line">        ├── qt_da.qm</span><br><span class="line">        ├── qt_de.qm</span><br><span class="line">        ├── qt_en.qm</span><br><span class="line">        ├── qt_es.qm</span><br><span class="line">        ├── qt_fi.qm</span><br><span class="line">        ├── qt_fr.qm</span><br><span class="line">        ├── qt_gd.qm</span><br><span class="line">        ├── qt_he.qm</span><br><span class="line">        ├── qt_hu.qm</span><br><span class="line">        ├── qt_it.qm</span><br><span class="line">        ├── qt_ja.qm</span><br><span class="line">        ├── qt_ko.qm</span><br><span class="line">        ├── qt_lv.qm</span><br><span class="line">        ├── qt_pl.qm</span><br><span class="line">        ├── qt_ru.qm</span><br><span class="line">        ├── qt_sk.qm</span><br><span class="line">        ├── qt_uk.qm</span><br><span class="line">        └── qt_zh_TW.qm</span><br><span class="line"></span><br><span class="line">14 directories, 54 files</span><br></pre></td></tr></table></figure><p>将 <code>AppRun</code> 文件拷贝到 <code>qmlstatictest.AppDir</code>目录下, 然后执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># appimagetool qmlstatictest.AppDir</span></span><br><span class="line">appimagetool, continuous build (commit effcebc), build 2084 built on 2019-05-01 21:02:41 UTC</span><br><span class="line">Using architecture x86_64</span><br><span class="line">/home/skycaster/QtProjects/build-qmlstatictest-Desktop_Qt_5_13_0_GCC_64bit-Default/deploy/qmlstatictest.AppDir should be packaged as qmlstatictest-x86_64.AppImage</span><br><span class="line">WARNING: AppStream upstream metadata is missing, please consider creating it</span><br><span class="line">         <span class="keyword">in</span> usr/share/metainfo/qmlstatictest.appdata.xml</span><br><span class="line">         Please see https://www.freedesktop.org/software/appstream/docs/chap-Quickstart.html<span class="comment">#sect-Quickstart-DesktopApps</span></span><br><span class="line">         <span class="keyword">for</span> more information or use the generator at http://output.jsbin.com/qoqukof.</span><br><span class="line">Generating squashfs...</span><br><span class="line">Parallel mksquashfs: Using 2 processors</span><br><span class="line">Creating 4.0 filesystem on qmlstatictest-x86_64.AppImage, block size 131072.</span><br><span class="line">[===============================================================================================================================-] 507/507 100%</span><br><span class="line"></span><br><span class="line">Exportable Squashfs 4.0 filesystem, gzip compressed, data block size 131072</span><br><span class="line">compressed data, compressed metadata, compressed fragments, compressed xattrs</span><br><span class="line">duplicates are removed</span><br><span class="line">Filesystem size 23246.74 Kbytes (22.70 Mbytes)</span><br><span class="line">38.14% of uncompressed filesystem size (60948.35 Kbytes)</span><br><span class="line">Inode table size 2317 bytes (2.26 Kbytes)</span><br><span class="line">54.71% of uncompressed inode table size (4235 bytes)</span><br><span class="line">Directory table size 803 bytes (0.78 Kbytes)</span><br><span class="line">51.41% of uncompressed directory table size (1562 bytes)</span><br><span class="line">Number of duplicate files found 3</span><br><span class="line">Number of inodes 71</span><br><span class="line">Number of files 55</span><br><span class="line">Number of fragments 7</span><br><span class="line">Number of symbolic links  1</span><br><span class="line">Number of device nodes 0</span><br><span class="line">Number of fifo nodes 0</span><br><span class="line">Number of socket nodes 0</span><br><span class="line">Number of directories 15</span><br><span class="line">Number of ids (unique uids + gids) 1</span><br><span class="line">Number of uids 1</span><br><span class="line">root (0)</span><br><span class="line">Number of gids 1</span><br><span class="line">root (0)</span><br><span class="line">Embedding ELF...</span><br><span class="line">Marking the AppImage as executable...</span><br><span class="line">Embedding MD5 digest</span><br><span class="line">Success</span><br><span class="line"></span><br><span class="line">Please consider submitting your AppImage to AppImageHub, the crowd-sourced</span><br><span class="line">central directory of available AppImages, by opening a pull request</span><br><span class="line">at https://github.com/AppImage/appimage.github.io</span><br></pre></td></tr></table></figure><p>之后就会得到 <code>qmlstatictest-x86_64.AppImage</code> 可执行程序.</p><h2 id="错误解决记录"><a href="#错误解决记录" class="headerlink" title="错误解决记录"></a>错误解决记录</h2><h3 id="未找到-qml-文件夹路径"><a href="#未找到-qml-文件夹路径" class="headerlink" title="未找到 qml 文件夹路径"></a>未找到 qml 文件夹路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./qmlstatictest-x86_64.AppImage</span></span><br><span class="line">QStandardPaths: XDG_RUNTIME_DIR not <span class="built_in">set</span>, defaulting to <span class="string">'/tmp/runtime-root'</span></span><br><span class="line">QQmlApplicationEngine failed to load component</span><br><span class="line">qrc:/main.qml:1 module <span class="string">"QtQuick"</span> is not installed</span><br><span class="line">qrc:/main.qml:2 module <span class="string">"QtQuick.Window"</span> is not installed</span><br><span class="line">qrc:/main.qml:1 module <span class="string">"QtQuick"</span> is not installed</span><br><span class="line">qrc:/main.qml:2 module <span class="string">"QtQuick.Window"</span> is not installed</span><br></pre></td></tr></table></figure><p>解决方法:</p><ol><li>修改 <code>RunApp</code> 文件, 添加 <code>QML2_IMPORT_PATH</code> 环境变量;</li><li>在 <code>qmlstatictest.AppDir/usr</code>目录下创建 <code>qml</code> 文件夹， 将安装 <code>Qt</code> 时<code>/opt/Qt5.13.0/5.13.0/gcc_64/qml</code>下文件拷贝到 <code>qmlstatictest.AppDir/usr/qml</code>下, 缺什么就拷贝什么;</li></ol><h3 id="优先使用系统自带的-Qt-库"><a href="#优先使用系统自带的-Qt-库" class="headerlink" title="优先使用系统自带的 Qt 库"></a>优先使用系统自带的 Qt 库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./qmlstatictest-x86_64.AppImage</span></span><br><span class="line">QStandardPaths: XDG_RUNTIME_DIR not <span class="built_in">set</span>, defaulting to <span class="string">'/tmp/runtime-root'</span></span><br><span class="line">QQmlApplicationEngine failed to load component</span><br><span class="line">qrc:/main.qml:1 plugin cannot be loaded <span class="keyword">for</span> module <span class="string">"QtQuick"</span>: Cannot load library /tmp/.mount_qmlstaEDRcHg/usr/qml/QtQuick.2/libqtquick2plugin.so: (/usr/lib/x86_64-linux-gnu/libQt5Quick.so.5: version `Qt_5_PRIVATE_API<span class="string">' not found (required by /tmp/.mount_qmlstaEDRcHg/usr/qml/QtQuick.2/libqtquick2plugin.so))</span></span><br></pre></td></tr></table></figure><p>解决方法:</p><ol><li>项目构建环境中添加变量 <code>LD_LIBRARY_PATH</code>, 值与<code>QTDIR</code>一致;</li><li>重新编译生成应用程序;</li><li>修改 <code>RunApp</code>, 将 <code>QT_PLUGIN_PATH</code>和 <code>QML2_IMPORT_PATH</code> 变量中关于系统的路径移除, 取消寻找系统 <code>Qt</code> 库;</li></ol><h2 id="示例文件"><a href="#示例文件" class="headerlink" title="示例文件"></a>示例文件</h2><ol><li>*.desktop, 将 <code>xxx</code> 替换成你自己的应用名称:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=xxx</span><br><span class="line">Exec=xxx</span><br><span class="line">Comment=Tool to generate AppImages from AppDirs</span><br><span class="line">Icon=logo</span><br><span class="line">Categories=Development;</span><br><span class="line">Terminal=false</span><br></pre></td></tr></table></figure><ol start="2"><li><code>RunApp</code>, 第一种, 别人的提供参考:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">SELF=$(readlink -f <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line"></span><br><span class="line">HERE=<span class="variable">$&#123;SELF%/*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/bin/:<span class="variable">$&#123;HERE&#125;</span>/usr/sbin/:<span class="variable">$&#123;HERE&#125;</span>/usr/games/:<span class="variable">$&#123;HERE&#125;</span>/bin/:<span class="variable">$&#123;HERE&#125;</span>/sbin/<span class="variable">$&#123;PATH:+:$PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/:<span class="variable">$&#123;HERE&#125;</span>/lib/:<span class="variable">$&#123;HERE&#125;</span>/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib32/:<span class="variable">$&#123;HERE&#125;</span>/lib64/<span class="variable">$&#123;LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/pyshared/<span class="variable">$&#123;PYTHONPATH:+:$PYTHONPATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XDG_DATA_DIRS=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/<span class="variable">$&#123;XDG_DATA_DIRS:+:$XDG_DATA_DIRS&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PERLLIB=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/perl5/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/perl5/<span class="variable">$&#123;PERLLIB:+:$PERLLIB&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GSETTINGS_SCHEMA_DIR=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/glib-2.0/schemas/<span class="variable">$&#123;GSETTINGS_SCHEMA_DIR:+:$GSETTINGS_SCHEMA_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QT_PLUGIN_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/plugins/<span class="variable">$&#123;QT_PLUGIN_PATH:+:$QT_PLUGIN_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">EXEC=$(grep -e <span class="string">'^Exec=.*'</span> <span class="string">"<span class="variable">$&#123;HERE&#125;</span>"</span>/*.desktop | head -n 1 | cut -d <span class="string">"="</span> -f 2 | cut -d <span class="string">" "</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$&#123;EXEC&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>RunApp</code>, 添加 <code>QML</code> 路径:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">SELF=$(readlink -f <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line"></span><br><span class="line">HERE=<span class="variable">$&#123;SELF%/*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/bin/:<span class="variable">$&#123;HERE&#125;</span>/usr/sbin/:<span class="variable">$&#123;HERE&#125;</span>/usr/games/:<span class="variable">$&#123;HERE&#125;</span>/bin/:<span class="variable">$&#123;HERE&#125;</span>/sbin/<span class="variable">$&#123;PATH:+:$PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/:<span class="variable">$&#123;HERE&#125;</span>/lib/:<span class="variable">$&#123;HERE&#125;</span>/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib32/:<span class="variable">$&#123;HERE&#125;</span>/lib64/<span class="variable">$&#123;LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/pyshared/<span class="variable">$&#123;PYTHONPATH:+:$PYTHONPATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XDG_DATA_DIRS=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/<span class="variable">$&#123;XDG_DATA_DIRS:+:$XDG_DATA_DIRS&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PERLLIB=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/perl5/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/perl5/<span class="variable">$&#123;PERLLIB:+:$PERLLIB&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GSETTINGS_SCHEMA_DIR=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/glib-2.0/schemas/<span class="variable">$&#123;GSETTINGS_SCHEMA_DIR:+:$GSETTINGS_SCHEMA_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QT_PLUGIN_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt4/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt5/plugins/:<span class="variable">$&#123;HERE&#125;</span>/usr/plugins/<span class="variable">$&#123;QT_PLUGIN_PATH:+:$QT_PLUGIN_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QML2_IMPORT_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt4/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt4/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt4/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt4/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt4/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/qt5/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/qt5/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/qt5/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/qt5/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/qt5/qml/:<span class="variable">$&#123;HERE&#125;</span>/usr/qml/<span class="variable">$&#123;QML2_IMPORT_PATH:+:$QML2_IMPORT_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">EXEC=$(grep -e <span class="string">'^Exec=.*'</span> <span class="string">"<span class="variable">$&#123;HERE&#125;</span>"</span>/*.desktop | head -n 1 | cut -d <span class="string">"="</span> -f 2 | cut -d <span class="string">" "</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$&#123;EXEC&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><ol start="5"><li><code>RunApp</code>, 不使用系统自带的Qt库:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">SELF=$(readlink -f <span class="string">"<span class="variable">$0</span>"</span>)</span><br><span class="line"></span><br><span class="line">HERE=<span class="variable">$&#123;SELF%/*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/bin/:<span class="variable">$&#123;HERE&#125;</span>/usr/sbin/:<span class="variable">$&#123;HERE&#125;</span>/usr/games/:<span class="variable">$&#123;HERE&#125;</span>/bin/:<span class="variable">$&#123;HERE&#125;</span>/sbin/<span class="variable">$&#123;PATH:+:$PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/lib/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib32/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib64/:<span class="variable">$&#123;HERE&#125;</span>/lib/:<span class="variable">$&#123;HERE&#125;</span>/lib/i386-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib/x86_64-linux-gnu/:<span class="variable">$&#123;HERE&#125;</span>/lib32/:<span class="variable">$&#123;HERE&#125;</span>/lib64/<span class="variable">$&#123;LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/pyshared/<span class="variable">$&#123;PYTHONPATH:+:$PYTHONPATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> XDG_DATA_DIRS=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/<span class="variable">$&#123;XDG_DATA_DIRS:+:$XDG_DATA_DIRS&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PERLLIB=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/perl5/:<span class="variable">$&#123;HERE&#125;</span>/usr/lib/perl5/<span class="variable">$&#123;PERLLIB:+:$PERLLIB&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GSETTINGS_SCHEMA_DIR=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/share/glib-2.0/schemas/<span class="variable">$&#123;GSETTINGS_SCHEMA_DIR:+:$GSETTINGS_SCHEMA_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QT_PLUGIN_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/plugins/<span class="variable">$&#123;QT_PLUGIN_PATH:+:$QT_PLUGIN_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> QML2_IMPORT_PATH=<span class="string">"<span class="variable">$&#123;HERE&#125;</span>/usr/qml/<span class="variable">$&#123;QML2_IMPORT_PATH:+:$QML2_IMPORT_PATH&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">EXEC=$(grep -e <span class="string">'^Exec=.*'</span> <span class="string">"<span class="variable">$&#123;HERE&#125;</span>"</span>/*.desktop | head -n 1 | cut -d <span class="string">"="</span> -f 2 | cut -d <span class="string">" "</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$&#123;EXEC&#125;</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><h2 id="相关文件下载"><a href="#相关文件下载" class="headerlink" title="相关文件下载"></a>相关文件下载</h2><p><a href="https://github.com/probonopd/linuxdeployqt/releases" target="_blank" rel="noopener">linuxdeployqt</a><br><a href="https://github.com/AppImage/AppImageKit/releases" target="_blank" rel="noopener">appimagetool</a><br><a href="https://nixos.org/releases/patchelf/patchelf-0.9/patchelf-0.9.tar.gz" target="_blank" rel="noopener">patchelf</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://blog.csdn.net/bkbliu/article/details/88090465" target="_blank" rel="noopener">linux-ubuntu下使用linuxdeployqt+appimagetool将qt程序打包成xxx.AppImage文件</a></p></li><li><p><a href="https://blog.csdn.net/jiejieaiai/article/details/88928102" target="_blank" rel="noopener">解决 qml 发布程序 module “QtQuick.Window” is not installed问题</a></p></li></ol><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Qt </tag>
            
            <tag> Deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Qt 静态编译(基于Windows MinGW 版)</title>
      <link href="/1519021197/"/>
      <url>/1519021197/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>Qt source: 5.13.0<br>操作系统: windows 7 SP1 64-bit<br>编译工具: minGW730 32-bit<br>目标版本: minGW730 32-bit static</p><hr><a id="more"></a><h2 id="编译准备"><a href="#编译准备" class="headerlink" title="编译准备"></a>编译准备</h2><h3 id="安装-Qt"><a href="#安装-Qt" class="headerlink" title="安装 Qt"></a>安装 Qt</h3><p>目录盘符修改为<code>D</code>盘, 选择安装<code>MinGW 7.3.0 32 bit</code>, <code>TOOLS</code>下的<code>MinGW 7.3.0 32 bit</code>, 以及<code>Strawberry Perl</code>, <code>Src</code>不建议直接安装, 浪费时间, 直接官网下载单独的源码包解压就行 <a href="http://download.qt.io/" target="_blank" rel="noopener">下载地址</a>.</p><h3 id="添加到-MinGW-环境变量"><a href="#添加到-MinGW-环境变量" class="headerlink" title="添加到 MinGW 环境变量"></a>添加到 MinGW 环境变量</h3><p>首先, 需要将 <code>MinGW</code> 编译工具添加到环境变量中, 如果你按照我的安装路径的话,应该是<code>D:\Qt\Qt5.13.0\Tools\mingw730_32\bin</code>. 把该路径添加到环境变量中, 最好放到最前面.</p><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><p>网上下载安装包直接安装即可, 注意选择添加到环境变量.</p><h3 id="解压Qt-Source"><a href="#解压Qt-Source" class="headerlink" title="解压Qt Source"></a>解压Qt Source</h3><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>假设当前盘符为 <code>D</code>, 创建以下目录结构</p><blockquote><p>Qt</p><blockquote><p>qt-everywhere-src-5.13.0<br>mingw73_32_static<br>mingw73_32_static_install</p></blockquote></blockquote><p>其中 <code>qt-everywhere-src-5.13.0</code> 为源码解压后的目录, <code>mingw73_32_static</code> 和 <code>mingw73_32_static_install</code> 分别为编译和安装目录.</p><hr><h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><ol><li>从开始菜单选择运行 <code>Qt 5.13 for Desktop (MinGW 7.3.0 32 bit)</code></li><li><p>进入到 <code>mingw73_32_static</code> 目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> d</span><br><span class="line"><span class="built_in">cd</span> Qt</span><br><span class="line"><span class="built_in">cd</span> mingw73_32_static</span><br></pre></td></tr></table></figure></li><li><p>输入以下命令进行配置, 我这里配置只编译了 <code>Release</code> 版本, 跳过了编译 <code>examples</code> 和 <code>tests</code>, <code>-prefix</code>安装路径根据自己的进行修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Qt\qt-everywhere-src-5.13.0\configure.bat -confirm-license -opensource -opengl desktop -platform win32-g++ -mp -release -static -static-runtime -prefix <span class="string">"D:\Qt\mingw73_32_static_install"</span> -nomake examples -nomake tests</span><br></pre></td></tr></table></figure></li><li><p>编译和安装, <code>-j4</code> 表示使用 <code>3</code> 线程进行编译, 根据各机器修改, 编译的时间有点长:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mingw32-make -j4</span><br><span class="line">mingw32-make install</span><br></pre></td></tr></table></figure></li><li><p>以上流程完成后, 在 <code>mingw73_32_static_install</code> 目录下生成已经编译好的 <code>Qt SDK</code> 库</p></li></ol><h2 id="配置-Qt-Creator"><a href="#配置-Qt-Creator" class="headerlink" title="配置 Qt Creator"></a>配置 Qt Creator</h2><h3 id="目录迁移"><a href="#目录迁移" class="headerlink" title="目录迁移"></a>目录迁移</h3><p>将 <code>mingw73_32_static_install</code> 目录原来 <code>Qt</code> 的安装目录下, 目录名称修改为 <code>mingw73_32_static</code>, 我的 <code>Qt</code> 安装在 <code>D</code> 盘, 所以迁移后路径为 <code>D:\Qt\Qt5.13.0\5.13.0\mingw73_32_static</code>.</p><h3 id="文件替换"><a href="#文件替换" class="headerlink" title="文件替换"></a>文件替换</h3><p>一般来说, 编译生成的目录路径是不能更改的, 但我们已经改变了路径, 就要做相应的修改, 这里使用比较简单的一种改法: 在安装时勾选了 <code>MinGW 7.3.0 32-bit</code>(不是 <code>Tools</code> 中的), 那么在应该存在 <code>D:\Qt\Qt5.13.0\5.13.0\mingw73_32</code> 这个目录, 将此目录下的 <code>bin</code> 文件夹中的 <code>qmlscene.exe</code> 和 <code>qt.confqt.conf</code> 拷贝到<code>D:\Qt\Qt5.13.0\5.13.0\mingw73_32_static\bin</code> 目录下覆盖原文件即可.</p><h3 id="Qt-Creator-中使用"><a href="#Qt-Creator-中使用" class="headerlink" title="Qt Creator 中使用"></a>Qt Creator 中使用</h3><ol><li>打开 <code>工具</code>-&gt;<code>选项</code>-&gt;<code>Kits</code>-&gt;<code>Qt Versions</code>-&gt;<code>添加</code>, 选择 <code>D:\Qt\Qt5.13.0\5.13.0\mingw73_32_static\bin\qmake.exe</code>文件.</li><li>克隆 <code>Kit</code> 下的 <code>Desktop Qt 5.13.0 MinGW 32-bit</code>, 修改下 <code>名称</code>, <code>Qt version</code> 选择上一步新建的版本.</li><li>打开或新建一个项目, 在 <code>项目</code>-&gt;<code>Build &amp; Run</code>， 中选择新添加的 <code>Kit</code>, 编译并运行即可.</li></ol><hr><h2 id="云盘备份"><a href="#云盘备份" class="headerlink" title="云盘备份"></a>云盘备份</h2><p><a href="https://pan.baidu.com/s/1rYyseSqo9BnoJ8ezI5ibZQ" target="_blank" rel="noopener">百度云</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> MinGW </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C# 下 CRC32 算法的实现</title>
      <link href="/880640044/"/>
      <url>/880640044/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="CRC32"><a href="#CRC32" class="headerlink" title="CRC32"></a>CRC32</h2><p><code>CRC</code> 的全称是<a href="https://baike.baidu.com/item/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C/3219009" target="_blank" rel="noopener">循环冗余校验</a>. 通常用于检查传输的数据是否完整.</p><a id="more"></a><hr><h2 id="生成-CRC32-校验表"><a href="#生成-CRC32-校验表" class="headerlink" title="生成 CRC32 校验表"></a>生成 CRC32 校验表</h2><p>首先来看 <code>CRC32</code> 的生成多项式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRC32=X^32+X^26+X^23+X^22+X^16+X^12+X^11+X^10+X^8+X^7+X^5+X^4+X^2+X^1+1</span><br></pre></td></tr></table></figure><p>由此得到多项式值为 <code>0x04C11DB7</code> ，忽略了最高位的 <code>1</code>，即完整的多项式值是 <code>0x104C11DB7</code> , 根据这个多项式值得到反转多项式值 <code>0xEDB88320</code> (反转多项式: 在数据通讯时, 信息字节先传送或接受低位字节, 如重新排列则影响速度), 这时，就可以使用该反转多项式值来生成 <code>CRC32</code> 校验表了:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetCRC32Table</span>(<span class="params"></span>)  <span class="comment">//生成CRC32码表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  UInt32 Crc;</span><br><span class="line">  crcTable = <span class="keyword">new</span> UInt32[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    Crc = (UInt32)i;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">8</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((Crc &amp; <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        Crc = (Crc &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;  <span class="comment">// 0x04C11DB7 位逆转得到 0xEDB88320.</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        Crc &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    crcTable[i] = Crc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查表法的实现"><a href="#查表法的实现" class="headerlink" title="查表法的实现"></a>查表法的实现</h2><p>查表法实现 <code>CRC</code> 校验, 具体步骤如下:</p><ol><li>将上次计算出的 <code>CRC</code> 校验码右移一个字节;</li><li>将移出的这个字节与新的要校验的字节进行 <code>XOR</code> 运算;</li><li>用运算出的值在预先生成码表中进行索引, 获取对应的值(称为余式);</li><li>用获取的值与第 <code>1</code> 步右移后的值进行 <code>XOR</code> 运算；</li><li>如果要校验的数据已经处理完, 则第 <code>4</code> 步的结果就是最终的<code>CRC</code>校验码.如果还有数据要进行处理, 则再转到第 <code>1</code> 步运行.</li></ol><p>示例代码:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">uint</span> <span class="title">GetCRC32</span>(<span class="params"><span class="keyword">byte</span>[] bytes</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint</span> iCount = (<span class="keyword">uint</span>)bytes.Length;</span><br><span class="line">  <span class="keyword">uint</span> crc = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint</span> i = <span class="number">0</span>; i &lt; iCount; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    crc = (crc &gt;&gt; <span class="number">8</span>) ^ crcTable[(crc ^ bytes[i]) &amp; <span class="number">0xFF</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (crc ^ <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="CPP-代码"><a href="#CPP-代码" class="headerlink" title="CPP 代码"></a>CPP 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位逆转</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> uint32_t <span class="title">BitReverse</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> &amp;input, <span class="keyword">const</span> <span class="keyword">int</span> &amp;bit_width)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> var = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bit_width; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input &amp; <span class="number">0x1</span>) &#123;</span><br><span class="line">      var |= <span class="number">1</span> &lt;&lt; (bit_width<span class="number">-1</span>-i);</span><br><span class="line">    &#125;   </span><br><span class="line">    input &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 码表生成</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Crc32Init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> &amp;poly, <span class="keyword">uint32_t</span> *table)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> crc;</span><br><span class="line">  <span class="keyword">uint32_t</span> poly_reverse = BitReverse(poly, <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i) &#123;</span><br><span class="line">    crc = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (crc&amp;<span class="number">0x1</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        crc = (crc&gt;&gt;<span class="number">1</span>) ^ poly_reverse;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        crc = crc&gt;&gt;<span class="number">1</span>;</span><br><span class="line">      &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    table[i] = crc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> Crc32(<span class="keyword">const</span> <span class="keyword">char</span> *input, <span class="keyword">const</span> <span class="keyword">int</span> &amp;len) &#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> table[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">uint32_t</span> crc = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">  Crc32Init(<span class="number">0x4C11DB7</span>, table);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">uint8_t</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    crc = (crc&gt;&gt;<span class="number">8</span>) ^ table[(crc^input[i]) &amp; <span class="number">0xFF</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (crc ^ <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> crc = Crc32(<span class="string">"1234567890"</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"CRC32 = %08X\n"</span>, crc);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="http://blog.sina.com.cn/s/blog_715691110102wqbr.html" target="_blank" rel="noopener">crc32 算法与实现</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> CRC32 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C# 下 JSON 格式数据的解析与生成</title>
      <link href="/3650545541/"/>
      <url>/3650545541/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="JSON-简介"><a href="#JSON-简介" class="headerlink" title="JSON 简介"></a>JSON 简介</h2><p><code>JSON</code> 是一种数据格式, 不是一种编程语言, 而且是 <code>JavaScript</code> 的语法的子集.支持两种数据类型: 第一种是 <code>JavaScript</code> 中的基本类型(除了<code>undefined</code>外); 第二种是数组和对象(不支持函数).</p><a id="more"></a><hr><h2 id="下载与配置"><a href="#下载与配置" class="headerlink" title="下载与配置"></a>下载与配置</h2><p>手动进行解析比较麻烦, 因此使用开源的类库 <code>Newtonsoft.Json</code> (<a href="http://json.codeplex.com/" target="_blank" rel="noopener">下载地址</a>) . 下载后 在项目工程中添加 <code>Newtonsoft.Json.dll</code> 引用就能用:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br></pre></td></tr></table></figure><hr><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>下面是一个 <code>JSON</code> 格式内容示例:<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"result"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Version"</span>: <span class="string">"1.11.1"</span>,</span><br><span class="line">      <span class="attr">"FileName"</span>: <span class="string">"CDRadioFW-Ver1.11.1.bin"</span>,</span><br><span class="line">      <span class="attr">"Note"</span>: <span class="string">"CDRadio 1.11.1版本固件"</span>,</span><br><span class="line">      <span class="attr">"Crc32"</span>: <span class="string">"2142964168"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Version"</span>: <span class="string">"1.11.2"</span>,</span><br><span class="line">      <span class="attr">"FileName"</span>: <span class="string">"CDRadioFW-Ver1.11.2.bin"</span>,</span><br><span class="line">      <span class="attr">"Note"</span>: <span class="string">"CDRadio 1.11.2 版本固件"</span>,</span><br><span class="line">      <span class="attr">"Crc32"</span>: <span class="string">"-1753905049"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>根据以上 <code>JSON</code> 格式数据设计类:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FirmwareInfo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Filename &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Note &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Crc32 &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FirmwareInfoList</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> List&lt;FirmwareInfo&gt; result &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类成员变量名称与 <code>JSON</code> 格式数据中的 <code>Key</code> 必须一致.<br>调用解析代码:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FirmwareInfoList firmwareInfoList = <span class="keyword">new</span> FirmwareInfoList();</span><br><span class="line">firmwareInfoList = JsonConvert.DeserializeObject&lt;FirmwareInfoList&gt;(jsonString);</span><br></pre></td></tr></table></figure><p>正确解析后 <code>firmwareInfoList</code> 中保存解析出来的数据.</p><hr><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>现假设有一个 <code>WEB</code> 服务器 的<code>API</code> 需要格式为 <code>&quot;Version&quot;:&quot;1.11.1&quot;</code> 的 <code>JSON</code> 格式数据, 据此设计类:<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VersionInfo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">string</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>调用生成内容代码:<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VersionInfo versionInfo = <span class="keyword">new</span> VersionInfo();</span><br><span class="line">versionInfo.Version = <span class="string">"1.11.1"</span>;</span><br><span class="line"><span class="keyword">string</span> jsonString = JsonConvert.SerializeObject(versionInfo);</span><br></pre></td></tr></table></figure><p></p><p>得到的 <code>jsonString</code> 内容为 <code>{&quot;Version&quot;: &quot;1.11.1&quot;}</code> .</p><hr><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.cnblogs.com/zxx193/p/3664562.html" target="_blank" rel="noopener">C#解析JSON字符串总结</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .NET </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下常用计时、延时、定时函数</title>
      <link href="/860935474/"/>
      <url>/860935474/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><p><strong>函数定义</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">time_t</span> time(<span class="keyword">time_t</span> *tloc);</span><br></pre></td></tr></table></figure><p></p><pre><code>功能: 返回计算机纪元到当前的秒数</code></pre><a id="more"></a><p><strong>注意点</strong></p><pre><code>1. 传递NULL参数来获得返回的时间;2、传递结构体指针time_t *方式参数, 把结果存放到time_t *中;3. 只能精确到秒;</code></pre><p><strong>使用示例</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算程序运行时间. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start, stop;</span><br><span class="line"></span><br><span class="line">    start = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; ++i) ;</span><br><span class="line">    stop = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"second: "</span> &lt;&lt; (stop - start) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><p><strong>函数定义</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> clock(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><p></p><pre><code>功能: 计算一个程序运行时间    </code></pre><p><strong>注意点</strong></p><pre><code>1. clock() 计算的是cpu时间(processor time), 因此在linux环境下不能用于计算sleep()占用的时间;2. clock() / CLOCKS_PER_SEC 得到秒级为单位的时间, 常量 CLOCKS_PRE_SEC 表示一秒钟会有多少个时钟计时单元;3. CLOCKS_PRE_SEC 在不同的系统环境中可能定义不一致, 标准POSIX中定义为1000000;4. 在32位机器上, 运行时间较长(达到72 minutes), 有可能出现计时错误;</code></pre><p><strong>使用示例</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算程序运行时间. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> clk1, clk2;</span><br><span class="line"></span><br><span class="line">    clk1 = clock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; ++i) ;</span><br><span class="line">    clk2 = clock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CLOCKS_PER_SEC: "</span> &lt;&lt; CLOCKS_PER_SEC &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"raw: "</span> &lt;&lt; (clk2 - clk1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"millisecond: "</span> &lt;&lt; (<span class="keyword">double</span>)((clk2 - clk1) * <span class="number">1000</span> /CLOCKS_PER_SEC) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"second: "</span> &lt;&lt; (<span class="keyword">double</span>)((clk2 - clk1)/CLOCKS_PER_SEC) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实现sleep()延时函数. */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> clk = clock();</span><br><span class="line">    <span class="keyword">while</span> (clock() - clk &lt; seconds * CLOCKS_PER_SEC) ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="alarm"><a href="#alarm" class="headerlink" title="alarm()"></a>alarm()</h2><p><strong>函数定义</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seconds)</span></span>;</span><br></pre></td></tr></table></figure><p></p><pre><code>功能: 在seconds后产生一个SIGALARM信号    </code></pre><p><strong>注意点</strong></p><pre><code>1. seconds为0时, 之前设置的定时器闹钟将被取消, 并将剩下的时间返回;2. 在seconds秒内再次调用了alarm函数设置了新的闹钟, 则后面定时器的设置将覆盖前面的设置;3. SIGALARM会中断部分阻塞I/O(epoll_wait());4. 只能精确到秒级;</code></pre><p><strong>使用示例</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 延时执行一个任务. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alarm_handler</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"running in alarm handler"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    signal(SIGALRM, (<span class="keyword">void</span> (*)(<span class="keyword">int</span>))&amp;alarm_handler);</span><br><span class="line">    alarm(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main function end"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="setitime"><a href="#setitime" class="headerlink" title="setitime()"></a>setitime()</h2><p><strong>简介</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;/sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setitimer</span><span class="params">(<span class="keyword">int</span> which, <span class="keyword">const</span> struct itimerval *new_value, struct itimerval *old_value)</span></span>;</span><br></pre></td></tr></table></figure><p></p><pre><code>功能: 定时任务或延时任务</code></pre><p><strong>注意点</strong></p><pre><code>1. struct itimerval结构体中it_value设为0, 不会触发信号;2. struct itimerval结构体中it_interval设为0, 任务仅仅会延时执行一次, 不会定时执行;3. 在epoll_wait()或sleep()时, 任务不会执行;</code></pre><p><strong>使用示例</strong><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定时执行一个任务. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"count is "</span> &lt;&lt; count++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_sigaction</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span>;</span></span><br><span class="line">          </span><br><span class="line">act.sa_handler = (<span class="keyword">void</span>(*)(<span class="keyword">int</span>))&amp;timer_handler;</span><br><span class="line">act.sa_flags  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sigemptyset(&amp;act.sa_mask);</span><br><span class="line">sigaction(SIGPROF, &amp;act, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_timer</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">val</span>;</span></span><br><span class="line">         </span><br><span class="line">val.it_value.tv_sec = <span class="number">1</span>;</span><br><span class="line">val.it_value.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">val.it_interval = val.it_value;</span><br><span class="line"></span><br><span class="line">setitimer(ITIMER_PROF, &amp;val, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">init_sigaction();</span><br><span class="line">init_timer();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) ;</span><br><span class="line"><span class="comment">//while(1) sleep(3);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BCD编码方式</title>
      <link href="/4000297480/"/>
      <url>/4000297480/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="BCD编码"><a href="#BCD编码" class="headerlink" title="BCD编码"></a>BCD编码</h2><p><code>BCD码</code>是一种二进制的数字编码形式，用二进制编码的十进制代码。这种编码形式利用了4个<code>bit</code>来储存一个十进制的数码，使二进制和十进制之间的转换得以快捷的进行。<code>BCD码</code>常用的有<code>8421码</code>、<code>5421码</code>、<code>2421码</code>和<code>余3码</code>，以下为编码表：<br><a id="more"></a></p><table><thead><tr><th style="text-align:center">十进制数</th><th style="text-align:center">8421码</th><th style="text-align:center">5421码</th><th style="text-align:center">2421码</th><th style="text-align:center">余3码</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0000</td><td style="text-align:center">0000</td><td style="text-align:center">0000</td><td style="text-align:center">0011</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0001</td><td style="text-align:center">0001</td><td style="text-align:center">0001</td><td style="text-align:center">0100</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0010</td><td style="text-align:center">0010</td><td style="text-align:center">0010</td><td style="text-align:center">0101</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0011</td><td style="text-align:center">0011</td><td style="text-align:center">0011</td><td style="text-align:center">0110</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0100</td><td style="text-align:center">0100</td><td style="text-align:center">0100</td><td style="text-align:center">0111</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0101</td><td style="text-align:center">1000</td><td style="text-align:center">1011</td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">0110</td><td style="text-align:center">1001</td><td style="text-align:center">1100</td><td style="text-align:center">1001</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0111</td><td style="text-align:center">1010</td><td style="text-align:center">1101</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">1000</td><td style="text-align:center">1011</td><td style="text-align:center">1110</td><td style="text-align:center">1011</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1001</td><td style="text-align:center">1100</td><td style="text-align:center">1111</td><td style="text-align:center">1100</td></tr></tbody></table><p><code>BCD码</code>又可分为压缩式和非压缩式两类。非压缩式一般是一个字节来表示，其中高四位置0，低四位表示相应数字；压缩式仅采用四位表示相应的数字。</p><hr><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>以下代码基于压缩式<code>8421码</code>。<br></p><figure class="highlight cpp"><figcaption><span>[src]str2bcd.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 十进制转成BCD码(单字节). 一个字节最多保存2位十进制数, 所以需要确保十进制数小于或等于99. */</span></span><br><span class="line"><span class="keyword">uint8_t</span> hex2bcd(<span class="keyword">const</span> <span class="keyword">uint8_t</span> &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高4位保存十进制数的十位, 低4位保存十进制数的个位. */</span></span><br><span class="line">    temp = (((src/<span class="number">10</span>)&lt;&lt;<span class="number">4</span>) + (src%<span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* BCD码(单字节)转成十进制. */</span></span><br><span class="line"><span class="keyword">uint8_t</span> bcd2hex(<span class="keyword">const</span> <span class="keyword">uint8_t</span> &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 高4位作为十进制数的十位, 低4位作为十进制数的个位. */</span></span><br><span class="line">    temp = ((src&gt;&gt;<span class="number">4</span>)*<span class="number">10</span> + (src&amp;<span class="number">0x0f</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 十进制格式化字符串转成BCD码. */</span></span><br><span class="line"><span class="keyword">uint32_t</span> str2bcd(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *src, <span class="keyword">const</span> <span class="keyword">uint32_t</span> &amp;len, <span class="keyword">uint8_t</span> *dst)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> *ptr = dst;</span><br><span class="line">    <span class="keyword">uint32_t</span> cnt = len;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 确保十进制格式化字符串的长度为偶数. */</span></span><br><span class="line">    <span class="keyword">if</span> (cnt%<span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        *ptr++ = *src++ - <span class="string">'0'</span>;</span><br><span class="line">        --cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cnt) &#123;</span><br><span class="line">        <span class="comment">/* 每两个字节十进制拼接成一个字节BCD码. */</span></span><br><span class="line">        *ptr++ = ((*src++ - <span class="string">'0'</span>) &lt;&lt; <span class="number">4</span>) + (*src++ - <span class="string">'0'</span>);</span><br><span class="line">        --cnt;</span><br><span class="line">        --cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回转换后的字符串长度. */</span></span><br><span class="line">    <span class="keyword">return</span> ptr - dst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* BCD码转成十进制格式化字符串. */</span></span><br><span class="line"><span class="keyword">uint32_t</span> bcd2str(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *src, <span class="keyword">const</span> <span class="keyword">uint32_t</span> &amp;len, <span class="keyword">uint8_t</span> *dst)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> *ptr = dst;</span><br><span class="line">    <span class="keyword">uint32_t</span> cnt = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">/* 一个字节BCD码转换为两个字节十进制数. */</span></span><br><span class="line">        <span class="comment">/* 处理高4位. */</span></span><br><span class="line">        *ptr++ = (*src &gt;&gt; <span class="number">4</span>) + <span class="string">'0'</span>;</span><br><span class="line">        <span class="comment">/* 处理低4位. */</span></span><br><span class="line">        *ptr++ = (*src++ &amp; <span class="number">0x0f</span>) + <span class="string">'0'</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--cnt);</span><br><span class="line"></span><br><span class="line">    *ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 返回转换后的字符串长度. */</span></span><br><span class="line">    <span class="keyword">return</span> ptr - dst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 编码方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码方式 </tag>
            
            <tag> BCD码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Trimble GPS模块Android系统支持</title>
      <link href="/552701786/"/>
      <url>/552701786/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Trimble</code>公司的<code>BD930</code>北斗<code>GPS</code>模块, 目前要做<code>Android</code>系统的标准接口支持(<code>HAL</code>层接口).<br><a id="more"></a></p><hr><h2 id="原来的做法分析"><a href="#原来的做法分析" class="headerlink" title="原来的做法分析"></a>原来的做法分析</h2><p>原有的<code>GPS</code>模块是<code>Broadcom</code>的<code>BCM4752</code>, 先来看看与之相关的文件:</p><h3 id="init脚本"><a href="#init脚本" class="headerlink" title="init脚本"></a>init脚本</h3><figure class="highlight bash"><figcaption><span>[src]device/leadcore/fourmode/init.lc1860.rc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># gps</span></span><br><span class="line">chmod 0660 /dev/ttyS1</span><br><span class="line">chown gps system /dev/ttyS1</span><br><span class="line"><span class="comment"># gps runs as gps + system permission, we need change the following files mode.</span></span><br><span class="line">mkdir /data/gps 0771 gps system</span><br><span class="line">chmod 0660 /sys/bus/platform/devices/brcm-gps.0/standby</span><br><span class="line">chown gps system /sys/bus/platform/devices/brcm-gps.0/standby</span><br><span class="line">chmod 0755 /system/bin/gps_config_init.sh</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>[src]device/leadcore/fourmode/init.lc1860.brcm.rc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">#for gps glconfig.xml check and copy on booting</span></span><br><span class="line">service gps_config_init /system/bin/gps_config_init.sh</span><br><span class="line">class main</span><br><span class="line">user root</span><br><span class="line">group system</span><br><span class="line">oneshot</span><br><span class="line"></span><br><span class="line"><span class="comment">#gps daemon</span></span><br><span class="line">service gps-daemon /system/bin/glgps -c /data/etc/glconfig.xml</span><br><span class="line">user gps</span><br><span class="line">class late_start</span><br><span class="line">socket gps seqpacket 0660 gps system</span><br><span class="line">socket rilgps.socket seqpacket 0660 gps system</span><br><span class="line">group system inet sdcard_rw</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mk文件"><a href="#mk文件" class="headerlink" title="mk文件"></a>mk文件</h3><figure class="highlight bash"><figcaption><span>[src]device/leadcore/fourmode/brcm_config.mk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">GPS_COPY_PATH := hardware/broadcom/gps</span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/bin/glgps:system/bin/glgps \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/bin/gpslogd:system/bin/gpslogd \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/bin/gps.default.so:system/lib/hw/gps.default.so \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gps_config_init.sh:system/bin/gps_config_init.sh \</span><br><span class="line"> frameworks/native/data/etc/android.hardware.location.gps.xml:system/etc/permissions/android.hardware.location.gps.xml</span><br><span class="line">ifeq ($(BUILD_MASS_PRODUCTION),<span class="literal">true</span>)</span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gps.conf:system/etc/gps.conf \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gps.conf:data/etc/gps.conf \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gpsconfig.xml:system/etc/glconfig.xml \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gpsconfig.xml:data/etc/glconfig.xml \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/ca-cert-google.cer:system/etc/gps.pem     </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PRODUCT_COPY_FILES += \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gps_CMCC.conf:system/etc/gps.conf \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gps_CMCC.conf:data/etc/gps.conf \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gpsconfig_CMCC.xml:system/etc/glconfig.xml \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/gpsconfig_CMCC.xml:data/etc/glconfig.xml \</span><br><span class="line">$(GPS_COPY_PATH)/bcm4752/config/ca-cert-cmcc-commercial.cer:system/etc/gps.pem   </span><br><span class="line">endif</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从以上部分内容可以得出原有做法: 创建一个守护进程(glgps), 从串口(ttyS1)读取GPS数据, 然后使用localsocket进行进程间通信, 将GPS数据传输到HAL层.</p><hr><h2 id="HAL的实现"><a href="#HAL的实现" class="headerlink" title="HAL的实现"></a>HAL的实现</h2><p>我尝试过还原<code>Broadcom</code>做法, HAL层基本没有问题(基于gps_qemu.c进行修改), 苦于没有守护进程(glgps)的源码, 自己摸索了一个简单的守护进程, 发现跑着中途会死掉. 后来想想还是先做简单点吧, 直接在HAL层打开串口读取数据, 再解析上报系统就好了.</p><h3 id="回调函数接口定义"><a href="#回调函数接口定义" class="headerlink" title="回调函数接口定义"></a>回调函数接口定义</h3><figure class="highlight c"><figcaption><span>[src]hardware/libhardware/include/hardware/gps.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** GPS callback structure. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">/** set to sizeof(GpsCallbacks) */</span></span><br><span class="line"><span class="keyword">size_t</span>      size;</span><br><span class="line">gps_location_callback location_cb;</span><br><span class="line">gps_status_callback status_cb;</span><br><span class="line">gps_sv_status_callback sv_status_cb;</span><br><span class="line">gps_nmea_callback nmea_cb;</span><br><span class="line">gps_set_capabilities set_capabilities_cb;</span><br><span class="line">gps_acquire_wakelock acquire_wakelock_cb;</span><br><span class="line">gps_release_wakelock release_wakelock_cb;</span><br><span class="line">gps_create_thread create_thread_cb;</span><br><span class="line">gps_request_utc_time request_utc_time_cb;</span><br><span class="line">&#125; GpsCallbacks;</span><br></pre></td></tr></table></figure><p>其中常用的接口为:</p><ul><li><strong>location_cb</strong><br>上报<code>GPS</code>模块输出的定位信息.</li><li><strong>status_cb</strong><br>上报<code>GPS</code>模块自身状态和定位状态信息.</li><li><strong>sv_status_cb</strong><br>上报<code>GPS</code>模块输出的卫星信息.</li><li><strong>nmea_cb</strong><br>上报<code>GPS</code>模块输出的<code>NMEA</code>报文.</li><li><strong>create_thread_cb</strong><br>创建一个线程处理控制<code>GPS</code>模块命令和解析<code>NMEA</code>数据.</li></ul><h3 id="JNI层调用函数接口定义"><a href="#JNI层调用函数接口定义" class="headerlink" title="JNI层调用函数接口定义"></a>JNI层调用函数接口定义</h3><p>JNI层调用HAL层的这些接口函数操作GPS硬件:<br></p><figure class="highlight c"><figcaption><span>[src]hardware/libhardware/include/hardware/gps.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Represents the standard GPS interface. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="comment">/** set to sizeof(GpsInterface) */</span></span><br><span class="line"><span class="keyword">size_t</span>          size;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Opens the interface and provides the callback routines</span></span><br><span class="line"><span class="comment"> * to the implemenation of this interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>   (*init)( GpsCallbacks* callbacks );</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Starts navigating. */</span></span><br><span class="line"><span class="keyword">int</span>   (*start)( <span class="keyword">void</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Stops navigating. */</span></span><br><span class="line"><span class="keyword">int</span>   (*stop)( <span class="keyword">void</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Closes the interface. */</span></span><br><span class="line"><span class="keyword">void</span>  (*cleanup)( <span class="keyword">void</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Injects the current time. */</span></span><br><span class="line"><span class="keyword">int</span>   (*inject_time)(GpsUtcTime time, <span class="keyword">int64_t</span> timeReference,</span><br><span class="line"><span class="keyword">int</span> uncertainty);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Injects current location from another location provider</span></span><br><span class="line"><span class="comment"> *  (typically cell ID).</span></span><br><span class="line"><span class="comment"> *  latitude and longitude are measured in degrees</span></span><br><span class="line"><span class="comment"> *  expected accuracy is measured in meters</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>  (*inject_location)(<span class="keyword">double</span> latitude, <span class="keyword">double</span> longitude, <span class="keyword">float</span> accuracy);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Specifies that the next call to start will not use the</span></span><br><span class="line"><span class="comment"> * information defined in the flags. GPS_DELETE_ALL is passed for</span></span><br><span class="line"><span class="comment"> * a cold start.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span>  (*delete_aiding_data)(GpsAidingData flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * min_interval represents the time between fixes in milliseconds.</span></span><br><span class="line"><span class="comment"> * preferred_accuracy represents the requested fix accuracy in meters.</span></span><br><span class="line"><span class="comment"> * preferred_time represents the requested time to first fix in milliseconds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>   (*set_position_mode)(GpsPositionMode mode, GpsPositionRecurrence recurrence,</span><br><span class="line">            <span class="keyword">uint32_t</span> min_interval, <span class="keyword">uint32_t</span> preferred_accuracy, <span class="keyword">uint32_t</span> preferred_time);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Get a pointer to extension information. */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">void</span>* (*get_extension)(<span class="keyword">const</span> <span class="keyword">char</span>* name);</span><br><span class="line">&#125; GpsInterface;</span><br></pre></td></tr></table></figure><br>其中常用的接口为:<p></p><ul><li><strong>init</strong><br>系统中开启<code>GPS</code>功能时调用, 进行初始化, 开启线程等待回调函数. 保存JNI调用时传递过来的回调函数, 打开<code>GPS</code>串口, 创建一对无名套接字,</li><li><strong>cleanup</strong><br>系统中关闭<code>GPS</code>功能时调用, 回收初始化的资源.</li><li><strong>start</strong><br>APP中使用<code>GPS</code>功能时调用, 打开<code>GPS</code>模块电源, 设置回调函数.</li><li><strong>stop</strong><br>APP中结束<code>GPS</code>功能时调用, 关闭<code>GPS</code>模块电源, 清空回调函数.</li></ul><hr><h2 id="主要流程分析"><a href="#主要流程分析" class="headerlink" title="主要流程分析"></a>主要流程分析</h2><p>系统启动时将<code>LocationManagerService</code>服务添加进系统服务中, <code>LocationManagerService</code>服务创建一个<code>GpsLocationProvider</code>对象, <code>GpsLocationProvider</code>对象初始化时获得<code>GPS`</code>HAL<code>层控制接口, 然后注册一个Handler接收处理控制消息, 调用对应的</code>GPS<code></code>HAL`层控制接口.</p><h3 id="初始化服务"><a href="#初始化服务" class="headerlink" title="初始化服务"></a>初始化服务</h3><p><code>LocationManagerService</code>服务最终创建<code>GpsLocationProvider</code>对象, 然后检查<code>GPS</code>是否可用:<br></p><figure class="highlight java"><figcaption><span>[src]frameworks/base/services/java/com/android/server/LocationManagerService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadProvidersLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Create a gps location provider</span></span><br><span class="line">GpsLocationProvider gpsProvider = <span class="keyword">new</span> GpsLocationProvider(mContext, <span class="keyword">this</span>,</span><br><span class="line">mLocationHandler.getLooper());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (GpsLocationProvider.isSupported()) &#123;</span><br><span class="line">mGpsStatusProvider = gpsProvider.getGpsStatusProvider();</span><br><span class="line">mNetInitiatedListener = gpsProvider.getNetInitiatedListener();</span><br><span class="line">addProviderLocked(gpsProvider);</span><br><span class="line">mRealProviders.put(LocationManager.GPS_PROVIDER, gpsProvider);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h3><p>在启动<code>LocationManagerService</code>时, 创建了一个<code>GpsLocationProvider</code>对象, 在<code>GpsLocationProvider</code>类中静态初始化块中调用:<br></p><figure class="highlight java"><figcaption><span>[src]frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GpsLocationProvider</span> <span class="keyword">implements</span> <span class="title">LocationProviderInterface</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">static</span> &#123; class_init_native(); &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其对应的<code>JNI</code>方法为<code>android_location_GpsLocationProvider_class_init_native</code>, 在该方法中, 根据<code>GPS_HARDWARE_MODULE_ID</code>加载<code>/system/lib/hw/gps.default.so</code>模块, 调用<code>gps.default.so</code>模块的<code>open</code>函数得到<code>gps.default.so</code>模块已实现的接口(<code>GpsInterface</code>):<br><figure class="highlight cpp"><figcaption><span>[src]frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_location_GpsLocationProvider_class_init_native</span><span class="params">(JNIEnv* env, jclass clazz)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">err = hw_get_module(GPS_HARDWARE_MODULE_ID, (<span class="keyword">hw_module_t</span> <span class="keyword">const</span>**)&amp;<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">hw_device_t</span>* device;</span><br><span class="line">err = <span class="keyword">module</span>-&gt;methods-&gt;open(<span class="keyword">module</span>, GPS_HARDWARE_MODULE_ID, &amp;device);</span><br><span class="line"><span class="keyword">if</span> (err == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">gps_device_t</span>* gps_device = (<span class="keyword">gps_device_t</span> *)device;</span><br><span class="line">sGpsInterface = gps_device-&gt;get_gps_interface(gps_device);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="控制HAL接口"><a href="#控制HAL接口" class="headerlink" title="控制HAL接口"></a>控制HAL接口</h3><p>在<code>GpsLocationProvider</code>类中, 注册了一个<code>Handler</code>接收控制消息, 处理消息内容, 调用对应的<code>HAL</code>层控制接口:<br></p><figure class="highlight java"><figcaption><span>[src]frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> message = msg.what;</span><br><span class="line"><span class="keyword">switch</span> (message) &#123;</span><br><span class="line"><span class="keyword">case</span> ENABLE:</span><br><span class="line"><span class="keyword">if</span> (msg.arg1 == <span class="number">1</span>) &#123;</span><br><span class="line">handleEnable();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">handleDisable();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SET_REQUEST:</span><br><span class="line">GpsRequest gpsRequest = (GpsRequest) msg.obj;</span><br><span class="line">handleSetRequest(gpsRequest.request, gpsRequest.source);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> UPDATE_NETWORK_STATE:</span><br><span class="line">handleUpdateNetworkState(msg.arg1, (NetworkInfo)msg.obj);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INJECT_NTP_TIME:</span><br><span class="line">handleInjectNtpTime();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWNLOAD_XTRA_DATA:</span><br><span class="line"><span class="keyword">if</span> (mSupportsXtra) &#123;</span><br><span class="line">handleDownloadXtraData();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> INJECT_NTP_TIME_FINISHED:</span><br><span class="line">mInjectNtpTimePending = STATE_IDLE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DOWNLOAD_XTRA_DATA_FINISHED:</span><br><span class="line">mDownloadXtraDataPending = STATE_IDLE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> UPDATE_LOCATION:</span><br><span class="line">handleUpdateLocation((Location)msg.obj);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (msg.arg2 == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// wakelock was taken for this message, release it</span></span><br><span class="line">mWakeLock.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>在系统设置中打开<code>GPS</code>, 最终调用到<code>ENABLE</code>中的<code>handleEnable</code>方法, 在该方法中调用<code>native_init</code>方法:<br><figure class="highlight java"><figcaption><span>[src]frameworks/base/services/java/com/android/server/location/GpsLocationProvider.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleEnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">boolean</span> enabled = native_init();</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其对应的<code>JNI</code>方法为<code>android_location_GpsLocationProvider_init</code>, 在该方法中, 调用<code>HAL</code>层已实现的<code>init</code>接口:<br><figure class="highlight cpp"><figcaption><span>[src]frameworks/base/services/jni/com_android_server_location_GpsLocationProvider.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jboolean <span class="title">android_location_GpsLocationProvider_init</span><span class="params">(JNIEnv* env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// fail if the main interface fails to initialize</span></span><br><span class="line"><span class="keyword">if</span> (!sGpsInterface || sGpsInterface-&gt;init(&amp;sGpsCallbacks) != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="HAL接口定义"><a href="#HAL接口定义" class="headerlink" title="HAL接口定义"></a>HAL接口定义</h3><figure class="highlight cpp"><figcaption><span>[src]gps_trimble.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> GpsInterface qemuGpsInterface = &#123;</span><br><span class="line">    <span class="keyword">sizeof</span>(GpsInterface),</span><br><span class="line">    qemu_gps_init,</span><br><span class="line">    qemu_gps_start,</span><br><span class="line">    qemu_gps_stop,</span><br><span class="line">    qemu_gps_cleanup,</span><br><span class="line">    qemu_gps_inject_time,</span><br><span class="line">    qemu_gps_inject_location,</span><br><span class="line">    qemu_gps_delete_aiding_data,</span><br><span class="line">    qemu_gps_set_position_mode,</span><br><span class="line">    qemu_gps_get_extension,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="HAL层初始化"><a href="#HAL层初始化" class="headerlink" title="HAL层初始化"></a>HAL层初始化</h3><p>在<code>qemu_gps_init</code>接口中完成打开<code>GPS</code>串口的操作, 创建一对匿名套接字, 实现<code>start</code>和<code>stop</code>接口与主线程之间的通信, 达到控制解析NMEA数据的目的;<br></p><figure class="highlight cpp"><figcaption><span>[src]gps_trimble.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">gps_state_init(GpsState* state, GpsCallbacks* callbacks)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 打开GPS串口.</span></span><br><span class="line">state-&gt;fd = serial_init();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一对匿名套接字.</span></span><br><span class="line"><span class="keyword">if</span>(socketpair(AF_LOCAL, SOCK_STREAM, <span class="number">0</span>, state-&gt;control) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">ALOGE(<span class="string">"could not create thread control socket pair: %s"</span>, strerror(errno));</span><br><span class="line"><span class="keyword">goto</span> Fail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启主线程.</span></span><br><span class="line">state-&gt;thread = callbacks-&gt;create_thread_cb(<span class="string">"gps_state_thread"</span>, gps_state_thread, state);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这时, GPS服务已经完成了初始化工作, 等待APP使用定位.<p></p><hr><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>最近比较忙, 等忙完后继续更新, 先把源码上传…</p><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/balost/trimble_gps_hal" target="_blank" rel="noopener">GitHub</a></p><hr><h2 id="测试平台"><a href="#测试平台" class="headerlink" title="测试平台"></a>测试平台</h2><p>Android 4.4</p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> HAL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HAL </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NTRIP通信协议之NTRIPCaster</title>
      <link href="/3453995741/"/>
      <url>/3453995741/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>NTRIP</code>(<code>Networked Transport of RTCM via Internet Protocol</code>)是一种基于<code>HTTP</code>协议的数据传输协议, 在互联网上进行<code>RTK</code>(<code>Real Time Kinematic</code>)(实时动态载波相位差分技术)数据(<code>NCT</code>, <code>RTCM</code>, <code>CMR</code>, <code>CMR+</code>等等)传输的协议. <code>NTRIP</code>协议主要由<code>NTRIPClient</code>, <code>NTRIPCaster</code>, <code>NTRIPServer</code>三个部分组成. 这里搭建一个简单的<code>NTRIPCaster</code>.<br><a id="more"></a></p><hr><h2 id="NTRIPCaster功能"><a href="#NTRIPCaster功能" class="headerlink" title="NTRIPCaster功能"></a>NTRIPCaster功能</h2><p>NTRIPCaster主要实现以下几个功能:</p><ul><li><strong>NTRIPServer连接</strong><br><code>NTRIPServer</code>端请求连接<code>NTRIPCaster</code>时, <code>NTRIPCaster</code>检查是否存在请求的挂载点, 如果挂载点不存在, 则创建一个新的挂载点, 将其加入到挂载点链表; <code>NTRIPServer</code>端断开连接时, 将挂载点从挂载点链表移除;</li><li><strong>NTRIPClient连接</strong><br><code>NtripClient</code>端请求获得<code>RTK</code>数据, <code>NTRIPCaster</code>解析<code>NTRIPClient</code>发送的请求数据, 检查挂载点, 检查用户名和密码, 确认无误后, 将<code>NTRIPClient</code>端的<code>socket</code>保存到挂载点节点中, 随后<code>NTRIPServer</code>发送<code>RTK</code>数据后进行转发; <code>NTRIPClient</code>端断开连接时, 将<code>socket</code>从挂载点节点中移除;</li><li><strong>返回源列表信息</strong><br><code>NTRIPClient</code>端请求获得源列表时, <code>NTRIPCaster</code>从文件中读取挂载点详细信息, 按照<code>NTRIP</code>协议进行封装, 发送回<code>NTRIPClient</code>端;</li><li><strong>转发RTK数据</strong><br><code>NTRIPClient</code>端已经存在于<code>NTRIPServer</code>端挂载点节点, 且已发送<code>GPGGA</code>数据时, <code>NTRIPCaster</code>将转发<code>NTRIPServer</code>端发送的<code>RTK</code>数据到已连接上的<code>NTRIPClient</code>端;</li><li><strong>处理GGA数据</strong><br>如果<code>NTRIPCaster</code>作为基准站, <code>NTRIPClient</code>端要发送一个位置坐标(<code>GPGGA</code>数据)到<code>NTRIPCaster</code>, <code>NTRIPCaster</code>使用该坐标作为基准站坐标, 允许将<code>RTK</code>数据发送到<code>NTRIPClient</code>端;</li></ul><h2 id="NTRIPCaster实现"><a href="#NTRIPCaster实现" class="headerlink" title="NTRIPCaster实现"></a>NTRIPCaster实现</h2><h3 id="主要流程设计"><a href="#主要流程设计" class="headerlink" title="主要流程设计"></a>主要流程设计</h3><ol><li><code>NTRIPCaster</code>使用<code>epoll</code>模型来实现高并发网络编程, 创建一个<code>epoll</code>对象, 然后创建一个TCP服务器(<code>TCP Server</code>), 添加进<code>epoll</code>对象的监听列表, 等待客户端的连接;</li><li>客户端连接<code>NTRIPCaster</code>时, <code>NTRIPCaster</code>调用<code>accept</code>函数生成一个新的<code>socket</code>, 并将其添加进<code>epoll</code>对象的监听列表;</li><li>客户端连接向<code>NTRIPCaster</code>发送数据时, <code>NTRIPCaster</code>接受并解析数据, 确认数据是<code>NtripClient</code>或<code>NTRIPServer</code>发过来的及数据的内容, 然后作出相应处理;</li><li>客户端断开连接时, <code>NTRIPCaster</code>确认是<code>NtripClient</code>或<code>NTRIPServer</code>断开连接, 然后作出相应处理;</li></ol><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><p>主体运行部分:<br></p><figure class="highlight cpp"><figcaption><span>[src]ntripcaster.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ntrip_caster::run(<span class="keyword">int</span> time_out)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ret; i++)&#123;</span><br><span class="line"><span class="comment">/* 监听到作为服务器的socket有事件发生. */</span></span><br><span class="line"><span class="keyword">if</span>(m_epoll_events[i].data.fd == m_listen_sock)&#123;</span><br><span class="line"><span class="comment">/* EPOLLIN 事件说明有新的客户端请求连接, 向监听列表中添加该socket. */</span></span><br><span class="line"><span class="keyword">if</span>(m_epoll_events[i].events &amp; EPOLLIN)&#123;</span><br><span class="line"><span class="keyword">int</span> new_sock = accept_new_client();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/* EPOLLIN事件说明客户端已经发送数据, 需要接收数据并进行解析. */</span></span><br><span class="line"><span class="keyword">if</span>(m_epoll_events[i].events &amp; EPOLLIN)&#123;</span><br><span class="line"><span class="keyword">int</span> recv_count = recv_data(m_epoll_events[i].data.fd, recv_buf);</span><br><span class="line"><span class="comment">/* 接收到的数据长度为0, 客户端出错或者连接关闭, 从监听列表中移除该socket. */</span></span><br><span class="line"><span class="keyword">if</span>(recv_count == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> sock = m_epoll_events[i].data.fd;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果是NTRIPClient端socket, 从挂载点节点中移除此socket. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_info</span> *<span class="title">mi_ptr</span> = <span class="title">check_conn</span>(<span class="title">sock</span>);</span></span><br><span class="line"><span class="keyword">if</span>(mi_ptr &amp;&amp; mi_ptr-&gt;current_conn_cursor != <span class="number">-1</span>)&#123;</span><br><span class="line">del_conn(mi_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果是NTRIPServer端socket, 移除挂载点. */</span></span><br><span class="line">mi_ptr = check_mntpoint(sock, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(mi_ptr)&#123;</span><br><span class="line">del_mntpoint(mi_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从监听列表中移除该socket. */</span></span><br><span class="line"><span class="keyword">if</span>(!epoll_ctl(m_epoll_fd, EPOLL_CTL_DEL, sock, &amp;m_epoll_events[i]))&#123;</span><br><span class="line">close(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(send_buf, recv_buf, recv_count);</span><br><span class="line"><span class="comment">/* 进行数据解析. */</span></span><br><span class="line">parse_data(m_epoll_events[i].data.fd, recv_buf, recv_count);</span><br><span class="line"><span class="built_in">memset</span>(recv_buf, <span class="number">0</span>, <span class="built_in">strlen</span>(recv_buf));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(m_epoll_events[i].events &amp; EPOLLOUT)&#123;</span><br><span class="line"><span class="keyword">int</span> send_count = send_data(m_epoll_events[i].data.fd, send_buf, <span class="built_in">strlen</span>(send_buf));</span><br><span class="line"><span class="built_in">memset</span>(send_buf, <span class="number">0</span>, send_count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>数据解析部分:<br></p><figure class="highlight cpp"><figcaption><span>[src]caster.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ntrip_caster::parse_data(<span class="keyword">int</span> sock, <span class="keyword">char</span>* recv_data, <span class="keyword">int</span> data_len)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* 逐行解析数据. */</span></span><br><span class="line">result = strtok(temp, <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">/* NTRIPServer请求连接Caster. */</span></span><br><span class="line"><span class="keyword">if</span>(!strncasecmp(result, <span class="string">"POST /"</span>, <span class="number">6</span>) &amp;&amp; <span class="built_in">strstr</span>(result, <span class="string">"HTTP/1.1"</span>))&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(result, <span class="string">"%*[^/]%*c%[^ ]"</span>, m_mnt);</span><br><span class="line"><span class="comment">/* 检查挂载点是否已经存在. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_info</span> *<span class="title">mi_ptr</span> = <span class="title">check_mntpoint</span>(-1, <span class="title">m_mnt</span>);</span></span><br><span class="line"><span class="keyword">if</span>(mi_ptr != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MountPoint already used!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 向NTRIPServer返回错误信息. */</span></span><br><span class="line">send_data(sock, <span class="string">"ERROR - Bad Password\r\n"</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = strtok(<span class="literal">NULL</span>, <span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(result != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!strncasecmp(result, <span class="string">"Authorization: Basic"</span>, <span class="number">20</span>))&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(result, <span class="string">"%*[^ ]%*c%*[^ ]%*c%[^\r]"</span>, m_userpwd);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(m_userpwd) &gt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="comment">/* 解码挂载点用户名和密码. */</span></span><br><span class="line">base64_decode(m_userpwd, m_username, m_password);</span><br><span class="line"><span class="comment">/* 向挂载点链表添加挂载点. */</span></span><br><span class="line">add_mntpoint(sock, m_mnt, m_username, m_password);</span><br><span class="line"><span class="comment">/* 向NTRIPServer返回正确信息, NTRIPServer收到该信息后开始向NTRIPCaster发送RTK数据. */</span></span><br><span class="line">send_data(sock, <span class="string">"ICY 200 OK\r\n"</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result = strtok(<span class="literal">NULL</span>, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检测当前socket是否为已存在的挂载点(NTRIPServer), 若是则说明该数据为RTK数据, 需要转发给连接上此挂载点的NTRIPClient. */</span></span><br><span class="line"><span class="keyword">if</span>(struct mnt_info *mi_ptr = check_mntpoint(sock, <span class="literal">NULL</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(mi_ptr != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mi_ptr-&gt;current_conn_count; ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>((mi_ptr-&gt;conn_sock[i] &gt; <span class="number">0</span>) </span><br><span class="line">&amp;&amp; (mi_ptr-&gt;send_flags&amp;(<span class="number">0x1</span>&lt;&lt;i)))</span><br><span class="line">send_data(mi_ptr-&gt;conn_sock[i], recv_data, data_len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPClient请求获得源列表和请求连接挂载点(NTRIPServer)获取RTK数据. */</span></span><br><span class="line"><span class="keyword">if</span>(!strncasecmp(result, <span class="string">"GET /"</span>, <span class="number">5</span>) &amp;&amp; <span class="built_in">strstr</span>(result, <span class="string">"HTTP/1.1"</span>))&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(result, <span class="string">"%*[^/]%*c%[^ ]"</span>, m_mnt);</span><br><span class="line"><span class="comment">/* 挂载点为空, NTRIPClient请求获得源列表. */</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strlen</span>( m_mnt))&#123;</span><br><span class="line"><span class="keyword">char</span> *st_data = <span class="keyword">new</span> <span class="keyword">char</span>[MAX_LEN];</span><br><span class="line"><span class="comment">/* 从文件中读取源列表信息, 将数据返回NTRIPClient. */</span></span><br><span class="line">get_sourcetable(st_data, MAX_LEN);</span><br><span class="line">send_data(sock, st_data, <span class="built_in">strlen</span>(st_data));</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 挂载点不为空, NTRIPClient请求连接挂载点(NTRIPServer)获取RTK数据. */</span></span><br><span class="line"><span class="comment">/* 先检查挂载点是否存在. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_info</span> *<span class="title">mi_ptr</span> = <span class="title">check_mntpoint</span>(-1, <span class="title">m_mnt</span>);</span></span><br><span class="line"><span class="keyword">if</span>(mi_ptr == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MountPoint not find!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 向NTRIPClient返回错误信息. */</span></span><br><span class="line">send_data(sock, <span class="string">"HTTP/1.1 401 Unauthorized\r\n"</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = strtok(<span class="literal">NULL</span>, <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(result != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!strncasecmp(result, <span class="string">"Authorization: Basic"</span>, <span class="number">20</span>))&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(result, <span class="string">"%*[^ ]%*c%*[^ ]%*c%[^\r]"</span>, m_userpwd);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(m_userpwd) &gt; <span class="number">0</span> )&#123;</span><br><span class="line"><span class="comment">/* 解码用户名和密码. */</span></span><br><span class="line">base64_decode(m_userpwd, m_username, m_password);</span><br><span class="line"><span class="comment">/* 检验用户名和密码是否一致. */</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(mi_ptr-&gt;username, m_username, <span class="built_in">strlen</span>(m_username)) ||</span><br><span class="line"><span class="built_in">strncmp</span>(mi_ptr-&gt;password, m_password, <span class="built_in">strlen</span>(m_password)))&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Password error!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* 向NTRIPClient返回错误信息. */</span></span><br><span class="line">send_data(sock, <span class="string">"HTTP/1.1 401 Unauthorized\r\n"</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">return</span>  <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将该socket保存到已找到的挂载点节点中. */</span></span><br><span class="line">add_conn(mi_ptr, sock);</span><br><span class="line"><span class="comment">/* 向NTRIPClient返回正确信息. */</span></span><br><span class="line">send_data(sock, <span class="string">"ICY 200 OK\r\n"</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result = strtok(<span class="literal">NULL</span>, <span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPCaster作为基准站, NTRIPClient发送一个位置坐标(GPGGA)数据, NTRIPCaster以此坐标作为基准站坐标, 然后开始设置发送RTK数据标志. */</span></span><br><span class="line"><span class="keyword">if</span>(!strncasecmp(result, <span class="string">"$GPGGA,"</span>, <span class="number">7</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(!check_sum(result))&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Check sum pass"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">/* RTK数据处理部分不做, 只做转发数据. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 配置转发NtripServer的RTK数据. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mnt_info</span> *<span class="title">mi_ptr</span> = <span class="title">check_conn</span>(<span class="title">sock</span>);</span></span><br><span class="line"><span class="keyword">if</span>(mi_ptr &amp;&amp; mi_ptr-&gt;current_conn_cursor != <span class="number">-1</span>)&#123;</span><br><span class="line">mi_ptr-&gt;send_flags |= <span class="number">0x1</span> &lt;&lt; mi_ptr-&gt;current_conn_cursor;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Start forward the server's data"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="NTRIP协议字符串示例"><a href="#NTRIP协议字符串示例" class="headerlink" title="NTRIP协议字符串示例"></a>NTRIP协议字符串示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* NTRIPServer请求连接创建挂载点. */</span></span><br><span class="line"><span class="string">"POST /RTCM32 HTTP/1.1\r\n</span></span><br><span class="line"><span class="string">Host: 192.168.2.246:12345\r\n</span></span><br><span class="line"><span class="string">Ntrip-Version: Ntrip/2.0\r\n</span></span><br><span class="line"><span class="string">User-Agent: NTRIP TheXiiNTRIPServer/20180926\r\n</span></span><br><span class="line"><span class="string">Authorization: Basic dGVzdDAxOnRlc3Rpbmc=\r\n</span></span><br><span class="line"><span class="string">Ntrip-STR: \r\n</span></span><br><span class="line"><span class="string">Connection: close\r\n</span></span><br><span class="line"><span class="string">Transfer-Encoding: chunked\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPCient请求获得源列表. */</span></span><br><span class="line"><span class="string">"GET / HTTP/1.1\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPCient请求连接挂载点获取RTK数据. */</span></span><br><span class="line"><span class="string">"GET /RTCM32 HTTP/1.1\r\n</span></span><br><span class="line"><span class="string">User-Agent: NTRIP TheXiiNTRIPClient/20180926\r\n</span></span><br><span class="line"><span class="string">Accept: */*\r\n</span></span><br><span class="line"><span class="string">Connection: close\r\n</span></span><br><span class="line"><span class="string">Authorization: Basic dGVzdDAxOnRlc3Rpbmc=\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPCient发送GPGGA数据. */</span></span><br><span class="line"><span class="string">"$GPGGA,083552.00,3000.0000000,N,11900.0000000,E,1,08,1.0,0.000,M,100.000,M,,*57\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* NTRIPCaster返回源列表数据. */</span></span><br><span class="line"><span class="string">"SOURCETABLE 200 OK</span></span><br><span class="line"><span class="string">Server: NTRIP TheXiiNTRIPCaster/20180926</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string">Content-Length: 425</span></span><br><span class="line"><span class="string">STR;RTCM23;RTCM23;RTCM 2.3;1(1),3(10),18(1),19(1);2;GPS;SGNET;CHN;31;121;1;1;SGCAN;None;B;N;0;;</span></span><br><span class="line"><span class="string">STR;CMR;CMR;CMR;CMR;2;GPS;SGNET;CHN;31;121;1;1;SGCAN;None;B;N;0;;</span></span><br><span class="line"><span class="string">STR;CMRP;CMRP;CMR+;CMR;2;GPS;SGNET;CHN;31;121;1;1;Trimble GPSNet;None;B;N;0;;</span></span><br><span class="line"><span class="string">STR;DGPS;DGPS;RTCM 2.1;RTCM 2.1;2;GPS;SGNET;CHN;31;121;1;1;SGCAN;None;B;N;0;;</span></span><br><span class="line"><span class="string">STR;RTCM3X;RTCM3X;RTCM 3.X;1004(1),1005/1007(5),PBS(10);2;GPS;SGNET;CHN;31;121;1;1;SGCAN;None;B;N;0;;</span></span><br><span class="line"><span class="string">ENDSOURCETABLE"</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>项目源码: <a href="https://github.com/balost/ntripcaster" target="_blank" rel="noopener">Github</a></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/hanford/article/details/53025771" target="_blank" rel="noopener">Ntrip通讯协议1.0</a><br><a href="https://blog.csdn.net/coder_yi_liu/article/details/8938927" target="_blank" rel="noopener">linux c/c++网络编程之—epoll 模型</a></p><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTRIPCaster </tag>
            
            <tag> Ntrip协议2.0 </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Base64编码与解码</title>
      <link href="/1443023263/"/>
      <url>/1443023263/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法. 网络信息传递时, 一些二进制资源往往需要转换为Base64编码进行传输, 以提高传输效率. 标准编码表一般为<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>这64个字符. 因为编码后的<code>+/</code>等字符, 标准的Base64并不适合直接放在URL里传输, 有一些Base64的变种, 它们将<code>+/</code>等符号转换为其他符号(如<code>_-</code>), 这样就能安全的在URL中传输了. 虽然编码后字符内容长度会增加大约1/3, 但是在一定程度上保证了一些不可打印字符在传输时的的信息完整性.<br><a id="more"></a></p><hr><h2 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h2><p>进行Base64转换的时候, 将3个byte(3*8bit=24bit)的数据, 先后放入一个24bit的缓冲区中, 先来的byte占高位. 数据不足3byte的话, 于缓冲器中剩下的bit用0补足. 然后,每次取出6个bit(24/6=4), 因为2^6=64, 按照其值选择编码表中对应的字符作为编码后的输出, 不断进行,直到全部输入数据转换完成. 当原数据长度不是3byte的整数倍时, 如果最后剩下1个输入数据, 在编码结果后加2个“=”; 如果最后剩下2个输入数据, 编码结果后加1个“=”; 如果没有剩下任何数据, 就什么都不要加.</p><hr><h2 id="C示例源码"><a href="#C示例源码" class="headerlink" title="C示例源码"></a>C示例源码</h2><figure class="highlight c"><figcaption><span>[src]base64code.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> base64code[<span class="number">64</span>] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据字符值返回对应编表中的位置. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chr2index</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt; <span class="built_in">strlen</span>(base64code); ++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch == base64code[i])</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据位置返回对应编表中的字符值. */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">index2chr</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> base64code[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 编码函数. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encode</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据长度不为3的整数倍时, 计算需要补'='个数. */</span></span><br><span class="line"><span class="keyword">if</span>(len%<span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">count = <span class="number">3</span> - len%<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line"><span class="comment">/* 每次处理3个char. */</span></span><br><span class="line"><span class="built_in">strncpy</span>(temp, src+i, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提取原数据第1个char高6bit, 根据编码表得到对应的编码后字符. */</span></span><br><span class="line">result[j+<span class="number">0</span>] = index2chr((temp[<span class="number">0</span>]&amp;<span class="number">0xFC</span>)&gt;&gt;<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提取原数据第1个char低2bit和第2个char的高4bit, 根据编码表得到对应的编码后字符. */</span></span><br><span class="line">result[j+<span class="number">1</span>] = index2chr(((temp[<span class="number">0</span>]&amp;<span class="number">0x3</span>)&lt;&lt;<span class="number">4</span>) | ((temp[<span class="number">1</span>]&amp;<span class="number">0xF0</span>)&gt;&gt;<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据剩余1个char. */</span></span><br><span class="line"><span class="keyword">if</span>(temp[<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提取第2个char低4bit和第3个char的高2bit, 根据编码表得到对应的编码后字符. */</span></span><br><span class="line">result[j+<span class="number">2</span>] = index2chr(((temp[<span class="number">1</span>]&amp;<span class="number">0xF</span>)&lt;&lt;<span class="number">2</span>) | ((temp[<span class="number">2</span>]&amp;<span class="number">0xC0</span>)&gt;&gt;<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据剩余2个char. */</span></span><br><span class="line"><span class="keyword">if</span>(temp[<span class="number">2</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提取第3个char低6bit, 根据编码表得到对应字符. */</span></span><br><span class="line">result[j+<span class="number">3</span>] = index2chr(temp[<span class="number">2</span>]&amp;<span class="number">0x3F</span>);</span><br><span class="line"></span><br><span class="line">i+=<span class="number">3</span>;</span><br><span class="line">j+=<span class="number">4</span>;</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0x0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 补'='. */</span></span><br><span class="line"><span class="keyword">while</span>(count)&#123;</span><br><span class="line">result[j+<span class="number">4</span>-count] = <span class="string">'='</span>;</span><br><span class="line">--count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解码函数. */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> *src, <span class="keyword">char</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span> || len%<span class="number">4</span>!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;len)&#123;</span><br><span class="line"><span class="comment">/* 每次处理4个char. */</span></span><br><span class="line"><span class="built_in">strncpy</span>(temp, src+i, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据每个char在编码表中对应的索引值的有效位为低6bit. */</span></span><br><span class="line"><span class="comment">/* 取原数据第1个char 根据编码表得到索引值, 将索引值有效位直接作为新char的高6bit, </span></span><br><span class="line"><span class="comment"> * 再取原数据第2个char, 根据编码表得到索引值, 将索引值有效位的高2bit作为新char的低2bit.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">result[j+<span class="number">0</span>] = ((chr2index(temp[<span class="number">0</span>])&amp;<span class="number">0x3F</span>) &lt;&lt; <span class="number">2</span>) | ((chr2index(temp[<span class="number">1</span>])&amp;<span class="number">0x3F</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据出现'=', 说明后面内容无意义. */</span></span><br><span class="line"><span class="keyword">if</span>(temp[<span class="number">2</span>] == <span class="string">'='</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取原数据第2个char, 根据编码表得到索引值, 将索引值有效位的低4bit作为新char的高6bit, </span></span><br><span class="line"><span class="comment"> * 再取原数据第3个char, 根据编码表得到索引值, 将索引值有效位的前4bit作为新char的低2bit.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">result[j+<span class="number">1</span>] = ((chr2index(temp[<span class="number">1</span>])&amp;<span class="number">0xF</span>) &lt;&lt; <span class="number">4</span>) | ((chr2index(temp[<span class="number">2</span>])&amp;<span class="number">0x3F</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 原数据出现'=', 说明后面内容无意义. */</span></span><br><span class="line"><span class="keyword">if</span>(temp[<span class="number">3</span>] == <span class="string">'='</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取原数据第3个char, 根据编码表得到索引值, 将索引值有效位的低2bit作为新char的高2bit, </span></span><br><span class="line"><span class="comment"> * 再取原数据第4个char, 根据编码表得到索引值, 将索引值有效位直接作为新char的低6bit.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">result[j+<span class="number">2</span>] = ((chr2index(temp[<span class="number">2</span>])&amp;<span class="number">0x3</span>) &lt;&lt; <span class="number">6</span>) | ((chr2index(temp[<span class="number">3</span>])&amp;<span class="number">0x3F</span>));</span><br><span class="line"></span><br><span class="line">i+=<span class="number">4</span>;</span><br><span class="line">j+=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0x0</span>, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> userpwd[<span class="number">32</span>] = &#123;<span class="string">"username:passwd"</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> result1[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> result2[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"source data: [%s]\n"</span>, userpwd);</span><br><span class="line">encode(userpwd, result1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"encode result: [%s]\n"</span>, result1);</span><br><span class="line">decode(result1, result2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"decode result: [%s]\n"</span>, result2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 编码方式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base64 </tag>
            
            <tag> 编码方式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Arm Linux下使用ldd</title>
      <link href="/3476998492/"/>
      <url>/3476998492/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ldd</code>命令用于打印程序或者库文件所依赖的共享库列表, <code>ldd</code>不是一个可执行程序, 而只是一个shell脚本. <code>ldd</code>显示可执行模块的依赖的工作原理, 其实质是通过<code>ld-linux.so</code>(动态库链接器)来实现的. <code>ldd</code>能够显示可执行模块的依赖, 其原理是通过设置一些的环境变量, 如<code>LD_TRACE_LOADED_OBJECTS</code>, <code>LD_WARN</code>, <code>LD_BIND_NOW</code>, <code>LD_LIBRARY_VERSION</code>, <code>LD_VERBOSE</code>等. 当<code>LD_TRACE_LOADED_OBJECTS</code>环境变量不为空时, 任何可执行程序在运行时, 它都会只显示模块的依赖, 而程序并不真正执行. 实际上可以直接执行<code>ld-linux.so</code>模块, 如: <code>/lib/ld-linux.so.2 --list ls</code>(这条命令相当于<code>ldd ls</code>).<br><a id="more"></a></p><hr><h2 id="ubuntu下的ldd"><a href="#ubuntu下的ldd" class="headerlink" title="ubuntu下的ldd"></a>ubuntu下的ldd</h2><p>ubuntu下的<code>ldd</code>位于<code>/usr/bin/ldd</code>, 文件内容如下:<br></p><figure class="highlight bash"><figcaption><span>[src]/usr/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Copyright (C) 1996-2016 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment"># This file is part of the GNU C Library.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The GNU C Library is free software; you can redistribute it and/or</span></span><br><span class="line"><span class="comment"># modify it under the terms of the GNU Lesser General Public</span></span><br><span class="line"><span class="comment"># License as published by the Free Software Foundation; either</span></span><br><span class="line"><span class="comment"># version 2.1 of the License, or (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The GNU C Library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class="line"><span class="comment"># Lesser General Public License for more details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU Lesser General Public</span></span><br><span class="line"><span class="comment"># License along with the GNU C Library; if not, see</span></span><br><span class="line"><span class="comment"># &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the `ldd' command, which lists what shared libraries are</span></span><br><span class="line"><span class="comment"># used by given dynamically-linked executables.  It works by invoking the</span></span><br><span class="line"><span class="comment"># run-time dynamic linker as a command and setting the environment</span></span><br><span class="line"><span class="comment"># variable LD_TRACE_LOADED_OBJECTS to a non-empty value.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We should be able to find the translation right at the beginning.</span></span><br><span class="line">TEXTDOMAIN=libc</span><br><span class="line">TEXTDOMAINDIR=/usr/share/locale</span><br><span class="line"></span><br><span class="line">RTLDLIST=<span class="string">"/lib/ld-linux.so.2 /lib64/ld-linux-x86-64.so.2 /libx32/ld-linux-x32.so.2"</span></span><br><span class="line">warn=</span><br><span class="line">bind_now=</span><br><span class="line">verbose=</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">test</span> <span class="variable">$#</span> -gt 0; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  --vers | --versi | --versio | --version)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'ldd (Ubuntu GLIBC 2.23-0ubuntu10) 2.23'</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"Copyright (C) %s Free Software Foundation, Inc.</span></span><br><span class="line"><span class="string">This is free software; see the source for copying conditions.  There is NO</span></span><br><span class="line"><span class="string">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="string">"</span> <span class="string">"2016"</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"Written by %s and %s.</span></span><br><span class="line"><span class="string">"</span> <span class="string">"Roland McGrath"</span> <span class="string">"Ulrich Drepper"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    ;;</span><br><span class="line">  --h | --he | --hel | --<span class="built_in">help</span>)</span><br><span class="line">    <span class="built_in">echo</span> $<span class="string">"Usage: ldd [OPTION]... FILE...</span></span><br><span class="line"><span class="string">      --help              print this help and exit</span></span><br><span class="line"><span class="string">      --version           print version information and exit</span></span><br><span class="line"><span class="string">  -d, --data-relocs       process data relocations</span></span><br><span class="line"><span class="string">  -r, --function-relocs   process data and function relocations</span></span><br><span class="line"><span class="string">  -u, --unused            print unused direct dependencies</span></span><br><span class="line"><span class="string">  -v, --verbose           print all information</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"For bug reporting instructions, please see:\\n%s.\\n"</span> \</span><br><span class="line">      <span class="string">"&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    ;;</span><br><span class="line">  -d | --d | --da | --dat | --data | --data- | --data-r | --data-re | \</span><br><span class="line">  --data-rel | --data-relo | --data-reloc | --data-relocs)</span><br><span class="line">    warn=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -r | --f | --fu | --fun | --func | --funct | --functi | --functio | \</span><br><span class="line">  --<span class="keyword">function</span> | --<span class="keyword">function</span>- | --<span class="keyword">function</span>-r | --<span class="keyword">function</span>-re | --<span class="keyword">function</span>-rel | \</span><br><span class="line">  --<span class="keyword">function</span>-relo | --<span class="keyword">function</span>-reloc | --<span class="keyword">function</span>-relocs)</span><br><span class="line">    warn=yes</span><br><span class="line">    bind_now=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -v | --verb | --verbo | --verbos | --verbose)</span><br><span class="line">    verbose=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -u | --u | --un | --unu | --unus | --unuse | --unused)</span><br><span class="line">    unused=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  --v | --ve | --ver)</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"ldd: option \`<span class="variable">$1</span>' is ambiguous"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">  --)<span class="comment"># Stop option processing.</span></span><br><span class="line">    <span class="built_in">shift</span>; <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line">  -*)</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 <span class="string">'ldd:'</span> $<span class="string">"unrecognized option"</span> <span class="string">"\`<span class="variable">$1</span>'"</span></span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"Try \`ldd --help' for more information."</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">nonelf ()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># Maybe extra code for non-ELF binaries.</span></span><br><span class="line">  <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add_env=<span class="string">"LD_TRACE_LOADED_OBJECTS=1 LD_WARN=<span class="variable">$warn</span> LD_BIND_NOW=<span class="variable">$bind_now</span>"</span></span><br><span class="line">add_env=<span class="string">"<span class="variable">$add_env</span> LD_LIBRARY_VERSION=\$verify_out"</span></span><br><span class="line">add_env=<span class="string">"<span class="variable">$add_env</span> LD_VERBOSE=<span class="variable">$verbose</span>"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">"<span class="variable">$unused</span>"</span> = yes; <span class="keyword">then</span></span><br><span class="line">  add_env=<span class="string">"<span class="variable">$add_env</span> LD_DEBUG=\"<span class="variable">$LD_DEBUG</span><span class="variable">$&#123;LD_DEBUG:+,&#125;</span>unused\""</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following command substitution is needed to make ldd work in SELinux</span></span><br><span class="line"><span class="comment"># environments where the RTLD might not have permission to write to the</span></span><br><span class="line"><span class="comment"># terminal.  The extra "x" character prevents the shell from trimming trailing</span></span><br><span class="line"><span class="comment"># newlines from command substitution results.  This function is defined as a</span></span><br><span class="line"><span class="comment"># subshell compound list (using "(...)") to prevent parameter assignments from</span></span><br><span class="line"><span class="comment"># affecting the calling shell execution environment.</span></span><br><span class="line">try_trace() (</span><br><span class="line">  output=$(<span class="built_in">eval</span> <span class="variable">$add_env</span> <span class="string">'"$@"'</span> 2&gt;&amp;1; rc=$?; <span class="built_in">printf</span> <span class="string">'x'</span>; <span class="built_in">exit</span> <span class="variable">$rc</span>)</span><br><span class="line">  rc=$?</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">'%s'</span> <span class="string">"<span class="variable">$&#123;output%x&#125;</span>"</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$rc</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$#</span> <span class="keyword">in</span></span><br><span class="line">0)</span><br><span class="line">  <span class="built_in">echo</span> &gt;&amp;2 <span class="string">'ldd:'</span> $<span class="string">"missing file arguments"</span></span><br><span class="line">  <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"Try \`ldd --help' for more information."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line">1)</span><br><span class="line">  single_file=t</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  single_file=f</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">result=0</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># We don't list the file name when there is only one.</span></span><br><span class="line">  <span class="built_in">test</span> <span class="variable">$single_file</span> = t || <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;file&#125;</span>:"</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$file</span> <span class="keyword">in</span></span><br><span class="line">  */*) :</span><br><span class="line">       ;;</span><br><span class="line">  *) file=./<span class="variable">$file</span></span><br><span class="line">     ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> ! -e <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ldd: <span class="variable">$&#123;file&#125;</span>:"</span> $<span class="string">"No such file or directory"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">elif</span> <span class="built_in">test</span> ! -f <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ldd: <span class="variable">$&#123;file&#125;</span>:"</span> $<span class="string">"not regular file"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">elif</span> <span class="built_in">test</span> -r <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    RTLD=</span><br><span class="line">    ret=1</span><br><span class="line">    <span class="keyword">for</span> rtld <span class="keyword">in</span> <span class="variable">$&#123;RTLDLIST&#125;</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">test</span> -x <span class="variable">$rtld</span>; <span class="keyword">then</span></span><br><span class="line">dummy=`<span class="variable">$rtld</span> 2&gt;&amp;1` </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? = 127; <span class="keyword">then</span></span><br><span class="line">  verify_out=`<span class="variable">$&#123;rtld&#125;</span> --verify <span class="string">"<span class="variable">$file</span>"</span>`</span><br><span class="line">  ret=$?</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$ret</span> <span class="keyword">in</span></span><br><span class="line">  [02]) RTLD=<span class="variable">$&#123;rtld&#125;</span>; <span class="built_in">break</span>;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$ret</span> <span class="keyword">in</span></span><br><span class="line">    0|2)</span><br><span class="line">      try_trace <span class="string">"<span class="variable">$RTLD</span>"</span> <span class="string">"<span class="variable">$file</span>"</span> || result=1</span><br><span class="line">      ;;</span><br><span class="line">    1)</span><br><span class="line">      <span class="comment"># This can be a non-ELF binary or no binary at all.</span></span><br><span class="line">      nonelf <span class="string">"<span class="variable">$file</span>"</span> || &#123;</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"not a dynamic executable"</span></span><br><span class="line">result=1</span><br><span class="line">      &#125;</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'ldd:'</span> <span class="variable">$&#123;RTLD&#125;</span> $<span class="string">"exited with unknown exit code"</span> <span class="string">"(<span class="variable">$ret</span>)"</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'ldd:'</span> $<span class="string">"error: you do not have read permission for"</span> <span class="string">"\`<span class="variable">$file</span>'"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># Local Variables:</span></span><br><span class="line"><span class="comment">#  mode:ksh</span></span><br><span class="line"><span class="comment"># End:</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="在arm平台上使用"><a href="#在arm平台上使用" class="headerlink" title="在arm平台上使用"></a>在arm平台上使用</h2><p>因为<code>ldd</code>是一个脚本, 所以只需稍作修改就可以在arm平台执行. 首先替换脚本解释器, arm平台用的基本都是<code>/bin/sh</code>:<br></p><figure class="highlight diff"><figcaption><span>[src]/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #! /bin/bash</span></span><br><span class="line"><span class="addition">+ #! /bin/sh</span></span><br></pre></td></tr></table></figure><br>然后替换动态库链接器, 我的交叉编译工具使用的是<code>ld-linux-hf.so.3</code>, 因此修改如下:<br><figure class="highlight diff"><figcaption><span>[src]/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- RTLDLIST="/lib/ld-linux.so.2 /lib64/ld-linux-x86-64.so.2 /libx32/ld-linux-x32.so.2"</span></span><br><span class="line"><span class="addition">+ RTLDLIST="/lib/ld-linux-hf.so.3"</span></span><br></pre></td></tr></table></figure><br>将修改好的<code>ldd</code>文件拷贝到开发板上<code>/bin</code>目录下, 测试:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ldd --version </span><br><span class="line">ldd (GNU libc) 2.26</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line">Written by Roland McGrath and Ulrich Drepper.</span><br></pre></td></tr></table></figure><br>测试通过.<p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://man.linuxde.net/ldd" target="_blank" rel="noopener">ldd命令</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下配置软AP分享Wifi热点</title>
      <link href="/1178631641/"/>
      <url>/1178631641/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个项目要求用无线网卡开启wifi热点, 由于板子目前还没回来, 那么先在Ubuntu下测试, 后面在进行移植. 我之前使用过Ubuntu自带的网络管理器和kde-nm-connection-editor(为了改mode从而使Android设备能识别, 后来发现其实可以直接改配置文件)成功搭建过wifi热点, 现在在ububtu14.04上试了很多次未成功(无法连接到隐藏网络), 后来一想最后要移植到开发板上, 应该是不用图形界面的, 还是老老实实用命令行配置吧. 使用命令行配置的话, 要用Hostapd创建一个无线接入点, 然后配置连接终端可以自动获取ip地址, 再共享以太网给无线网卡, 此时应该就可以正常上网了, 那么就开始吧.<br><a id="more"></a></p><hr><h2 id="确认网卡是否支持master模式"><a href="#确认网卡是否支持master模式" class="headerlink" title="确认网卡是否支持master模式"></a>确认网卡是否支持master模式</h2><p>在命令行终端输入iw list命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iw list</span><br></pre></td></tr></table></figure><br>如果Supported interface modes中有AP或AP/VLAN, 说明这张网卡支持master模式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Supported interface modes:</span><br><span class="line">* AP</span><br><span class="line">* AP/VLAN</span><br></pre></td></tr></table></figure><p></p><h2 id="配置hostapd"><a href="#配置hostapd" class="headerlink" title="配置hostapd"></a>配置hostapd</h2><p>编写/etc/hostapd/hostapd.conf文件, 输入以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]/etc/hostapd/hostapd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line"><span class="comment">#bridge=br0</span></span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=softap</span><br><span class="line">channel=1</span><br><span class="line">hw_mode=g</span><br><span class="line">ignore_broadcast_ssid=0</span><br><span class="line">auth_algs=1</span><br><span class="line">wpa=3</span><br><span class="line">wpa_passphrase=11111111</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">wpa_pairwise=TKIP</span><br><span class="line">rsn_pairwise=CCMP</span><br></pre></td></tr></table></figure><br>接下来看看这些配置部分选项说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface: Atheros 接口始终名为 athx, 所有其他接口都是wlanx.</span><br><span class="line">bridge: 如果接入点没有以太网桥接, 可以省略bridge一行的内容.</span><br><span class="line">driver: 如果使用的是hostapd V0.6.8或其更高版本以及具有mac80211支持的WI, 那么驱动程序是nl80211. 惟一受支持的旧版驱动程序是HostAP,madwifi和prism54. V0.6.8之前的hostapd发行版支持hostap,wiredk,madwifi,test,nl80211和bsd驱动程序.</span><br><span class="line">ssid: 接入点名称.</span><br><span class="line">channel: 802.11b/g都最多只有三条互不干扰的信道, 即1,6,11, 选择其中一个就行.</span><br><span class="line">auth_algs：1表示只支持WPA2身份验证算法; 2表示只支持WEP; 3表示支持这两种方式. 永远不要使用有线等效加密(wired equivalent privacy, WEP), 因为它非常容易破解, 并且多年前就已经被完全破解了.</span><br><span class="line">wpa: 1表示支持WPA1; 2仅支持WPA2; 3表示二者都支持.</span><br><span class="line">wpa_passphrase: 接入点密码;</span><br><span class="line">wpa_key_mgmt: 支持的加密密钥算法. 选择有WPA-PSK,WPA-EAP或两者均使用. PSK是预共享密钥. EAP是可扩展认证协议, 是一个支持许多不同身份验证方法的框架, 对于小的预共享密钥设置, 不需要使用它.</span><br><span class="line">wpa_pairwise,rsn_pairwise: 控制支持加密数据的密钥, 您可以使用CCMP,TKIP或两者均使用. CCMP比TKIP更强, 因此建议仅支持CCMP.</span><br></pre></td></tr></table></figure><br>编写完成后, 在终端输入以下内容, 测试配置文件是否有问题:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hostadp  /etc/hostapd/hostapd.conf</span><br></pre></td></tr></table></figure><br>这时, 你的手机可以搜索到该热点, 但由于无法获取到IP地址仍然无法连接.<p></p><hr><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><p>可以选择NAT或是网桥方式来使该AP的接入设备获得ip地址.</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>选择NAT方式的话, 要先为接入设备分配ip地址, 就能够连上热点, 但是无法连到网络. 通过配置NAT, 让终端发出的数据包的IP修改为公网IP, 即可连上网络. 首先为无线网卡分配IP地址并启用：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig wlan0 192.168.3.1 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><br>这里介绍两种自动获取IP服务配置:<p></p><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>安装dhcp:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install isc-dhcp-server</span><br></pre></td></tr></table></figure><br>打开/etc/dhcp/dhcpd.conf配置文件, 修改以下内容:<br><figure class="highlight bash"><figcaption><span>[src]/etc/dhcp/dhcpd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.3.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.3.20 192.168.3.200;</span><br><span class="line">  option routers 192.168.3.1;</span><br><span class="line">  option domain-name-servers 8.8.8.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>重启dhcp服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service isc-dhcp-server restart</span><br></pre></td></tr></table></figure><p></p><h4 id="DNSMASQ"><a href="#DNSMASQ" class="headerlink" title="DNSMASQ"></a>DNSMASQ</h4><p>在命令行终端输入输入以下命令安装dnsmasq:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install dnsmasq</span><br></pre></td></tr></table></figure><br>打开/etc/dnsmasq.conf配置文件, 添加以下内容:<br><figure class="highlight bash"><figcaption><span>[src]/etc/dnsmasq.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">listen-address=192.168.3.1</span><br><span class="line"><span class="comment">#no-dhcp-interface=</span></span><br><span class="line">dhcp-range=192.168.3.20,192.168.3.200,12h</span><br><span class="line">server=/google/8.8.8.8</span><br></pre></td></tr></table></figure><br>重启dnsmasq服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service dnsmasq restart</span><br></pre></td></tr></table></figure><br>出现OK就成功了.<p></p><h4 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h4><p>通过上面两种配置后, 手机可以连接上热点, 但还无法连接外网, 需要配置路由转发. 首先打开内核的ip转发功能:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><br>使用iptables设置转发:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">$ sudo iptables -A FORWARD -s 192.168.3.0/24 -j ACCEPT</span><br><span class="line">$ sudo iptables -A FORWARD -d 192.168.3.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><br>不出意外, 此时手机应该可以连接上外网了.<p></p><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><p>选择的是网桥方式, 那么IP地址将会由电脑实际连接的外网分配, 并且连接的终端可以直接发送数据到外网. 热点连上了就可以直接用了, 且和计算机的有线端同处于一个子网. 首先创建一个虚拟的以太网桥接口:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl addbr br0</span><br></pre></td></tr></table></figure><br>我们不需要STP(生成树协议)等. 因为我们只有一个路由器，是绝对不可能形成一个环的, 我们可以关闭这个功能.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl stp br0 off</span><br></pre></td></tr></table></figure><br>添加以太网物理接口和无线网卡接口到网桥上:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl addif br0 eth0</span><br><span class="line">$ sudo brctl addif br0 wlan0</span><br></pre></td></tr></table></figure><br>如果wlan0无法添加, 尝试以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iw dev wlan0 <span class="built_in">set</span> 4addr on</span><br></pre></td></tr></table></figure><br>配置网桥的IP和默认网关, 要和机器所在局域网同一网段:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig br0 192.168.2.184 netmask 255.255.255.0 up</span><br><span class="line">$ sudo route add default gw 192.168.2.1</span><br></pre></td></tr></table></figure><br>以太网物理接口和无线网卡接口成为网桥设备的一部分了, 所以不再需要IP地址.下面我们将这些IP地址释放掉:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth0 down</span><br><span class="line">$ sudo ifconfig wlan0 down</span><br><span class="line">$ sudo ifconfig eth0 0.0.0.0 up</span><br><span class="line">$ sudo ifconfig wlan0 0.0.0.0 up</span><br></pre></td></tr></table></figure><br>启用网桥设备:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig br0 up</span><br></pre></td></tr></table></figure><br>大功告成, 尽情享受吧!<p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/cupidove/article/details/38845049" target="_blank" rel="noopener">linux软AP－－hostapd+dhcpd</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-wifiencrypthostapd/" target="_blank" rel="noopener">使用 hostapd 轻松实现强 WiFi 加密</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>嵌入式LINUX下CGI与HTML网页之间的通信</title>
      <link href="/1522571396/"/>
      <url>/1522571396/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CGI 是Web服务器运行时外部程序的规范, 按CGI编写的程序可以扩展服务器功能. CGI应用程序能与浏览器进行交互, 还可通过数据库API与数据库服务器等外部数据源进行通信, 从数据库服务器中获取数据.几乎所有服务器都支持CGI,可用任何语言编写CGI,包括C/C++, Python, Shell等.<br>本文通过编写一个简单的登录的用例来了解CGI与HTML如何互相传递参数. 要在CGI和HTML之间传递数据, 需要移植CGI库, 由于比较简单这里就不再赘述, 本文默认已经移植好了CGI库以及能在开发板上使用httpd服务搭建Web服务器.</p><hr><h2 id="HTML调用CGI并传递参数"><a href="#HTML调用CGI并传递参数" class="headerlink" title="HTML调用CGI并传递参数"></a>HTML调用CGI并传递参数</h2><p>在HTML中我们使用表单(from), 采集和提交用户输入信息, 然后调用CGI程序处理:<br><a id="more"></a><br></p><figure class="highlight html"><figcaption><span>[src]www/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/getresult_cgi.cgi"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Username"</span> <span class="attr">placeholder</span>=<span class="string">"User"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"Password"</span> <span class="attr">placeholder</span>=<span class="string">"Passwd"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Tips</p><blockquote><ol><li>action为处理表单请求的程序;</li><li>method表示发送表单信息的方式. method有两个值: GET和POST. GET是把参数数据队列加到提交表单的ACTION属性所指的URL中, 值和表单内各个字段一一对应, 在URL中可以看到; POST是通过HTTP POST机制, 将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址, 用户看不到这个过程. GET一般用于取得和显示数据; POST多用于数据的保存更新;</li></ol></blockquote></blockquote><p>我们来看看CGI程序中是如何接受传递的参数. 首先是获取请求方式, 根据请求方式去拿数据:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    req_method = getenv(<span class="string">"REQUEST_METHOD"</span>);</span><br><span class="line">    input = getcgidata(<span class="built_in">stdin</span>, req_method);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>来看下解析数据关键代码:<br><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getcgidata</span><span class="params">(FILE* fp, <span class="keyword">char</span>* requestmethod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"GET"</span>)) &#123;                                                                            </span><br><span class="line">        input = getenv(<span class="string">"QUERY_STRING"</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"POST"</span>)) &#123;</span><br><span class="line">        len = atoi(getenv(<span class="string">"CONTENT_LENGTH"</span>));</span><br><span class="line">        input = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(size + <span class="number">1</span>));</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            input[i] = (<span class="keyword">char</span>)fgetc(fp);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看出GET请求传递的参数保存在环境变量QUERY_STRING中, 而POST请求将传递的参数保存在标准输入(stdin)中; 然后开始解析字符串:<br><figure class="highlight c"><figcaption><span>src:getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">sscanf</span>(input, <span class="string">"%*[^=]=%[^&amp;]%*[^=]=%[^EOF]"</span>, name, pass);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里使用sscanf来提取用户名和密码, 从HTML传递过来的参数格式应为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username=admin&amp;Password=aaaaa</span><br></pre></td></tr></table></figure><br>sscanf中格式化字符串的含义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%*[^=]=%[^&amp;]:   读取‘=’和‘&amp;’之间的字符, 放到name中;</span><br><span class="line">%*[^=]=%[^EOF]: 读取‘=’到文件流结尾之前的字符, 放到pass中;</span><br></pre></td></tr></table></figure><br>至此, 已经将HTML传递过来的参数解析完毕;<p></p><hr><h2 id="CGI返回数据给HTML"><a href="#CGI返回数据给HTML" class="headerlink" title="CGI返回数据给HTML"></a>CGI返回数据给HTML</h2><p>本文要做的是根据用户名和密码正不正确来返回不同信息: 正确返回login success信息, 错误返回输入的用户名和密码. 要将CGI数据传给HTML, 可以在CGI程序中直接生成一个页面, 不过这样好像不够灵活, 那么就使用HTML页面跳转时用来传递数据的Cookie来实现CGI与HTML间数据的传递:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name, <span class="string">"root"</span>, <span class="number">4</span>) &amp;&amp; !<span class="built_in">strncmp</span>(pass, <span class="string">"000"</span>, <span class="number">3</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s;  path=/\r\n"</span>,<span class="string">"Result"</span>,<span class="string">"login success"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s&amp;&amp;%s;  path=/\r\n"</span>,<span class="string">"Result"</span>, name, pass);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里要注意的是要先设置Cookie后再输出http请求头, 否则Cookie无效. 接着我们看看HTML是怎么接受Cookie的:<br><figure class="highlight html"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Login Result=</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lignt_now"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"result_text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">cookie_text= document.getElementById('result_text');            </span></span><br><span class="line"><span class="undefined">cookie_text.value =getCookie('Result')</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>这里使用了一个表单, 表单内有一个文本框, 内容由javascript来填充; 我们再来看看getCookie()做了什么:<br><figure class="highlight javascript"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span><br><span class="line"><span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span><br><span class="line">&#123; </span><br><span class="line">c_start=c_start + c_name.length+<span class="number">1</span> </span><br><span class="line">c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span><br><span class="line"><span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure><br>前面我们传递的Cookie为“Result=login success”或“Result=username, password”. 在javascript中根据首尾字符使用document.cookie.indexOf()来获取Cookie有效内容的开始和结束位置, 然后根据字符开始和结束位置使用document.cookie.substring()读取子字符串, 最终得到需要的数据.<p></p><hr><h2 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h2><p>这里把所有代码都贴出来,首先是CGI程序:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cgi.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"aux.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getcgidata</span><span class="params">(FILE* fp, <span class="keyword">char</span>* requestmethod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* input;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"GET"</span>)) &#123;</span><br><span class="line">input = getenv(<span class="string">"QUERY_STRING"</span>);</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"POST"</span>)) &#123;</span><br><span class="line">len = atoi(getenv(<span class="string">"CONTENT_LENGTH"</span>));</span><br><span class="line">input = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">input[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">input[i] = (<span class="keyword">char</span>)fgetc(fp);</span><br><span class="line"><span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">input[i+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">--len;</span><br><span class="line"><span class="keyword">if</span> (feof(fp) || (!(len))) &#123;</span><br><span class="line">i++;</span><br><span class="line">input[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *input;</span><br><span class="line"><span class="keyword">char</span> *req_method;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">char</span> pass[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">req_method = getenv(<span class="string">"REQUEST_METHOD"</span>);</span><br><span class="line">input = getcgidata(<span class="built_in">stdin</span>, req_method);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Format: Username=admin&amp;Password=aaaaa. */</span></span><br><span class="line"><span class="comment">//sscanf(input, "%*[^=]=%*c%[^&amp;]%*[^=]%*c%[^\n]", name, pass);</span></span><br><span class="line"><span class="built_in">sscanf</span>(input, <span class="string">"%*[^=]=%[^&amp;]%*[^=]=%[^EOF]"</span>, name, pass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name,<span class="string">"root"</span>,<span class="number">4</span>) &amp;&amp; !<span class="built_in">strncmp</span>(pass, <span class="string">"000"</span>, <span class="number">3</span>))&#123;</span><br><span class="line"><span class="comment">/* Set Cookie. */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s;  path=/\r\n"</span>,<span class="string">"Result"</span>,<span class="string">"login success"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s&amp;&amp;%s;  path=/\r\n"</span>,<span class="string">"Result"</span>, name, pass);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>主页index.html:<br><figure class="highlight html"><figcaption><span>[src]www/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/getresult_cgi.cgi"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Username"</span> <span class="attr">placeholder</span>=<span class="string">"User"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"Password"</span> <span class="attr">placeholder</span>=<span class="string">"Passwd"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>返回结果result.html:<br><figure class="highlight html"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span></span><br><span class="line"><span class="undefined">&#123; </span></span><br><span class="line"><span class="undefined">c_start=c_start + c_name.length+1 </span></span><br><span class="line"><span class="javascript">c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="string">""</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Result<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Login Result=</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lignt_now"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"result_text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">bang_text= <span class="built_in">document</span>.getElementById(<span class="string">'result_text'</span>);            </span></span><br><span class="line"><span class="javascript">bang_text.value =getCookie(<span class="string">'Result'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/guiyuan_yelang/article/details/45251947" target="_blank" rel="noopener">嵌入式CGI 与HTML的数据交换</a><br><a href="https://www.cnblogs.com/sjxbg/p/5897558.html" target="_blank" rel="noopener">CGI编程</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> cgi </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ从BUSYBOX开始制作RAMDISK</title>
      <link href="/2391800641/"/>
      <url>/2391800641/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="Busybox移植"><a href="#Busybox移植" class="headerlink" title="Busybox移植"></a>Busybox移植</h2><p>BusyBox将许多具有共性的小版本的UNIX工具结合到一个单一的可执行文件. 这样的集合可以替代大部分常用工具, BusyBox提供了一个比较完善的环境，可以适用于任何小的嵌入式系统.<br>这篇文章将从移植Busybox开始, 一步一步制作一个属于自己的根文件系统.<br><a id="more"></a></p><hr><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Busybox的官方源码下载路径为: <a href="http://busybox.net/downloads/" target="_blank" rel="noopener">点我</a><br>本次下载的是busybox-1.29.1.tar.bz2</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压下载的文件, 进入到源码根目录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvf busybox-1.29.1.tar.bz2 &amp;&amp; <span class="built_in">cd</span> busybox-1.29.1</span><br></pre></td></tr></table></figure><br>先使用默认配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make deconfig</span><br></pre></td></tr></table></figure><br>然后输入命令进行配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><br>配置以下选项:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Settings  ---&gt;</span><br><span class="line">[ ] Don<span class="string">'t use /usr</span></span><br><span class="line"><span class="string">[ ] Build static binary (no shared libs)</span></span><br><span class="line"><span class="string">(arm-linux-gnueabihf-) Cross compiler prefix</span></span><br></pre></td></tr></table></figure><br>第一个是选择是否编译出/usr相关目录, 这里不勾选则生成/usr目录;<br>第二个是选择静态编译不依赖动态库, 制作根文件系统后面会拷贝一套动态连接库, 先不勾选;<br>第三个是配置交叉编译工具, 根据实际情况填写;<br>其他的需要的命令支持自行选择配置.<p></p><blockquote><p>Tips</p><blockquote><p>静态编译与动态编译的区别<br>动态编译的可执行文件需要附带一个的动态链接库, 在执行时, 需要调用其对应动态链接库中的命令. 所以其优点一方面是缩小了执行文件本身的体积, 另一方面是加快了编译速度, 节省了系统资源. 缺点一是哪怕是很简单的程序, 只用到了链接库中的一两条命令, 也需要附带一个相对庞大的链接库; 二是如果其他计算机上没有安装对应的运行库, 则用动态编译的可执行文件就不能运行.<br>静态编译就是编译器在编译可执行文件的时候, 将可执行文件需要调用的对应动态链接库(.so)中的部分提取出来, 链接到可执行文件中去, 使可执行文件在运行的时候不依赖于动态链接库. 所以其优缺点与动态编译的可执行文件正好互补.</p></blockquote></blockquote><hr><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>生成文件位于_install文件夹内:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls _install/</span><br><span class="line">bin  linuxrc  sbin  usr</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="拷贝lib库"><a href="#拷贝lib库" class="headerlink" title="拷贝lib库"></a>拷贝lib库</h2><h3 id="新建一个root目录-进入该目录下"><a href="#新建一个root目录-进入该目录下" class="headerlink" title="新建一个root目录, 进入该目录下:"></a>新建一个root目录, 进入该目录下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir root &amp;&amp; <span class="built_in">cd</span> root/</span><br></pre></td></tr></table></figure><hr><h3 id="将编译busybox生成的目录下的所有文件拷贝过去"><a href="#将编译busybox生成的目录下的所有文件拷贝过去" class="headerlink" title="将编译busybox生成的目录下的所有文件拷贝过去:"></a>将编译busybox生成的目录下的所有文件拷贝过去:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af ../busybox-1.29.1/_install/* .</span><br></pre></td></tr></table></figure><hr><h3 id="创建其他的目录"><a href="#创建其他的目录" class="headerlink" title="创建其他的目录"></a>创建其他的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir dev etc lib sys proc tmp var home root mnt</span><br></pre></td></tr></table></figure><hr><h3 id="拷贝lib库-1"><a href="#拷贝lib库-1" class="headerlink" title="拷贝lib库"></a>拷贝lib库</h3><p>整个lib库有很多, 全部拷贝的话就有点臃肿了, 下面是我参考官方的ramdisk里面的lib库拷贝的, 应该还可以再精简, 先凑合着用吧:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls lib/</span><br><span class="line">ld-2.25.so               libcidn-2.25.so      libgfortran.so.4      libnss_compat-2.25.so   libnss_nis.so.2     libstdc++.so.6</span><br><span class="line">ld-linux-armhf.so.3      libcidn.so.1         libgfortran.so.4.0.0  libnss_compat.so.2      libpcprofile.so     libstdc++.so.6.0.24</span><br><span class="line">libanl-2.25.so           libcilkrts.so        libgomp.so            libnss_db-2.25.so       libpthread-2.25.so  libstdc++.so.6.0.24-gdb.py</span><br><span class="line">libanl.so.1              libcilkrts.so.5      libgomp.so.1          libnss_db.so.2          libpthread.so.0     libthread_db-1.0.so</span><br><span class="line">libasan.so               libcilkrts.so.5.0.0  libgomp.so.1.0.0      libnss_dns-2.25.so      libresolv-2.25.so   libthread_db.so.1</span><br><span class="line">libasan.so.4             libcrypt-2.25.so     libitm.so             libnss_dns.so.2         libresolv.so.2      libubsan.so</span><br><span class="line">libasan.so.4.0.0         libcrypt.so.1        libitm.so.1           libnss_files-2.25.so    librt-2.25.so       libubsan.so.0</span><br><span class="line">libatomic.so             libc.so.6            libitm.so.1.0.0       libnss_files.so.2       librt.so.1          libubsan.so.0.0.0</span><br><span class="line">libatomic.so.1           libdl-2.25.so        libm-2.25.so          libnss_hesiod-2.25.so   libSegFault.so      libutil-2.25.so</span><br><span class="line">libatomic.so.1.2.0       libdl.so.2           libmemusage.so        libnss_hesiod.so.2      libssp.so           libutil.so.1</span><br><span class="line">libBrokenLocale-2.25.so  libgcc_s.so          libm.so.6             libnss_nis-2.25.so      libssp.so.0</span><br><span class="line">libBrokenLocale.so.1     libgcc_s.so.1        libnsl-2.25.so        libnss_nisplus-2.25.so  libssp.so.0.0.0</span><br><span class="line">libc-2.25.so             libgfortran.so       libnsl.so.1           libnss_nisplus.so.2     libstdc++.so</span><br></pre></td></tr></table></figure><br>接下来拷贝上面的运行库:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af /opt/toolchain/arm-linux-gnueabihf/arm-linux-gnueabihf/libc/lib/*.so* lib/</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Tips</p><blockquote><ol><li>各个交叉编译工具的运行库的所在位置可能不同;</li><li>部分库文件是符号链接, 要保留原文件属性的前提下复制文件请使用 cp -a 命令;</li></ol></blockquote></blockquote><p>然后去掉库文件的符号表和调试信息进行瘦身, 进一步减少空间占用:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arm-linux-gnueabihf-strip lib/*</span><br></pre></td></tr></table></figure><br>现在整个可执行命令以及运行库已移植完成, 接下来是启动添加配置文件.<p></p><hr><h2 id="启动配置文件"><a href="#启动配置文件" class="headerlink" title="启动配置文件"></a>启动配置文件</h2><h3 id="profile文件"><a href="#profile文件" class="headerlink" title="profile文件"></a>profile文件</h3><p>新建etc/profile文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=skycaster</span><br><span class="line"><span class="built_in">export</span> USER=root</span><br><span class="line"><span class="built_in">export</span> HOME=home</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"[<span class="variable">$USER</span>@<span class="variable">$HOSTNAME</span> \W]\# "</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">LD_LIBRARY_PATH=/lib:/usr/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="inittab文件"><a href="#inittab文件" class="headerlink" title="inittab文件"></a>inittab文件</h3><p>新建etc/inittab文件, 并添加以下内容:<br></p><figure class="highlight plain"><figcaption><span>[src]etc/inittab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#this is run first except when booting in single-user mode.                                                                                      </span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line"># /bin/sh invocations on selected ttys</span><br><span class="line"># start an &quot;askfirst&quot; shell on the console (whatever that may be)</span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line"># stuff to do when restarting the init process</span><br><span class="line">::restart:/sbin/init</span><br><span class="line"># stuff to do before rebooting</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="fstab文件"><a href="#fstab文件" class="headerlink" title="fstab文件"></a>fstab文件</h3><p>新建etc/fstab文件, 并添加以下内容:<br></p><figure class="highlight plain"><figcaption><span>[src]etc/fstab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LABEL=/     /           tmpfs   defaults        0 0</span><br><span class="line">none        /dev/pts    devpts  gid=5,mode=620  0 0</span><br><span class="line">none        /proc       proc    defaults        0 0</span><br><span class="line">none        /sys        sysfs   defaults        0 0</span><br><span class="line">none        /tmp        tmpfs   defaults        0 0</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="rcS文件"><a href="#rcS文件" class="headerlink" title="rcS文件"></a>rcS文件</h3><p>新建etc/init.d/rcS文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/init.d/rcS</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting rcS..."</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++ Mounting filesystem"</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++ Setting up mdev"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br><span class="line"></span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mkdir -p /dev/i2c</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rcS Complete"</span></span><br></pre></td></tr></table></figure><br>为其添加执行权限和所属用户组:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 etc/init.d/rcS</span><br><span class="line">$ sudo chown root:root etc/init.d/rcS</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="passwd文件"><a href="#passwd文件" class="headerlink" title="passwd文件"></a>passwd文件</h3><p>新建etc/passwd文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/passwd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:<span class="variable">$1</span><span class="variable">$qC</span>.CEbjC<span class="variable">$SVJyqm</span>.IG.gkElhaeM.FD0:0:0:root:/root:/bin/sh</span><br></pre></td></tr></table></figure><br>现在根文件系统已经制作完成, 接下来就要制作成ramdisk image.<p></p><hr><h2 id="制作ramdisk"><a href="#制作ramdisk" class="headerlink" title="制作ramdisk"></a>制作ramdisk</h2><h3 id="制作新的ramdisk-image"><a href="#制作新的ramdisk-image" class="headerlink" title="制作新的ramdisk.image"></a>制作新的ramdisk.image</h3><p>文件系统格式为ext2, 大小为16M:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=ramdisk.image bs=1024 count=16384</span><br><span class="line">$ mke2fs -F ramdisk.image -L <span class="string">"ramdisk"</span> -b 1024 -m 0</span><br><span class="line">$ tune2fs ramdisk.image -i 0</span><br><span class="line">$ chmod 777 ramdisk.image</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="挂载ramdisk"><a href="#挂载ramdisk" class="headerlink" title="挂载ramdisk"></a>挂载ramdisk</h3><p>新建一个rootfs目录, 并将ramdisk.image挂载到rootfs目录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir rootfs</span><br><span class="line">$ chmod u+rwx ramdisk.image</span><br><span class="line">$ sudo mount -o loop ramdisk.image rootfs</span><br></pre></td></tr></table></figure><br>将制作好的根文件系统全部拷贝到rootfs目录下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af root/* rootfs/*</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="打包ramdisk"><a href="#打包ramdisk" class="headerlink" title="打包ramdisk"></a>打包ramdisk</h3><p>卸载rootfs, 并打包ramdisk.image:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo umount rootfs</span><br><span class="line">$ gzip ramdisk.image</span><br><span class="line">$ mkimage -A arm -T ramdisk -C gzip -d ramdisk.image.gz uramdisk.image.gz</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将ramdisk.image.gz拷贝到/mnt/workspace/linux/output目录下, 执行:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mk_kernel.sh &amp;&amp; mk_sdimage.sh</span><br></pre></td></tr></table></figure><br>将/mnt/workspace/linux/images/sd_image目录下的生成文件拷贝到SD卡, 重新上电, 启动后如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@skycaster ]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[root@skycaster ]<span class="comment"># ls</span></span><br><span class="line">bin         home        mnt         sbin        usr</span><br><span class="line">dev         lib         proc        sys         var</span><br><span class="line">etc         lost+found  root        tmp</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/surpassal/archive/2013/01/12/Zed_lab7.html" target="_blank" rel="noopener">(原创)一步一步学ZedBoard &amp; Zynq(七)：制作ZedBoard上linux根文件系统(ramdisk)</a><br><a href="https://blog.csdn.net/liebao_han/article/details/79450086" target="_blank" rel="noopener">最新busybox-1.28.1制作根文件系统</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> ramdisk </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ 烧录QSPI FLASH及从QSPI启动</title>
      <link href="/622008616/"/>
      <url>/622008616/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="ZYNQ-Linux启动方式"><a href="#ZYNQ-Linux启动方式" class="headerlink" title="ZYNQ Linux启动方式"></a>ZYNQ Linux启动方式</h2><p>由于ZYNQ采用的是PS(ARM A9双核)+PL(FPGA)设计, 整个启动过程比较复杂, 因此我们从嵌入式Linux软件层面的角度考虑, 将ZYNQ当作一块纯ARM开发板, 从而简化ZYNQ的启动流程.</p><hr><h3 id="SD卡和QSPI启动流程"><a href="#SD卡和QSPI启动流程" class="headerlink" title="SD卡和QSPI启动流程"></a>SD卡和QSPI启动流程</h3><p>ZYNQ跑Linux系统, 在实际情况中用得比较多的启动方法为SD卡启动和QSPI启动, 先看下这两种方式的启动流程:<br><a id="more"></a><br></p><figure class="highlight plain"><figcaption><span>QSPI启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置板子为QSPI启动 ----&gt;</span><br><span class="line">  上电启动 ---&gt;</span><br><span class="line">    从Flash加载BOOT.bin(fsbl.elf, system.bit, u-boot.elf) ---&gt;</span><br><span class="line">      进入U-BOOT ---&gt;</span><br><span class="line">        解析bootargs(将kernel, devicetree, ramdisk 从Flash加载到内存指定地址) ---&gt;</span><br><span class="line">          使用bootm命令启动Linux</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><figcaption><span>SD卡启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置板子为SD卡启动 ----&gt;</span><br><span class="line">  上电启动 ---&gt;</span><br><span class="line">    从SD卡加载BOOT.bin(fsbl.elf, system.bit, u-boot.elf) ---&gt;</span><br><span class="line">      进入U-BOOT ---&gt;</span><br><span class="line">        解析bootargs(将kernel, devicetree, ramdisk 从SD卡加载到内存指定地址) ---&gt;</span><br><span class="line">          使用bootm命令启动Linux</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="SD卡和QSPI启动Linux的bootargs"><a href="#SD卡和QSPI启动Linux的bootargs" class="headerlink" title="SD卡和QSPI启动Linux的bootargs"></a>SD卡和QSPI启动Linux的bootargs</h3><p>U-boot中这两种启动方式的boottargs定义:<br></p><figure class="highlight c"><figcaption><span>[src]bootloader/include/configs/zynq-common.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"kernel_image=uImage\0"</span> \</span><br><span class="line"><span class="string">"kernel_load_address=0x2080000\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_image=uramdisk.image.gz\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_load_address=0x4000000\0"</span>  \</span><br><span class="line"><span class="string">"devicetree_image=devicetree.dtb\0"</span> \</span><br><span class="line"><span class="string">"devicetree_load_address=0x2000000\0"</span>   \</span><br><span class="line"><span class="string">"bitstream_image=system.bit.bin\0"</span>  \</span><br><span class="line"><span class="string">"boot_image=BOOT.bin\0"</span> \</span><br><span class="line">...</span><br><span class="line"><span class="string">"kernel_size=0x500000\0"</span>    \</span><br><span class="line"><span class="string">"devicetree_size=0x20000\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_size=0x800000\0"</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"qspiboot=echo Copying Linux from QSPI flash to RAM... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf probe 0 0 0 &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;kernel_load_address&#125; 0x500000 $&#123;kernel_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;devicetree_load_address&#125; 0xA00000 $&#123;devicetree_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"echo Copying ramdisk... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;ramdisk_load_address&#125; 0xA20000 $&#123;ramdisk_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"bootm $&#123;kernel_load_address&#125; $&#123;ramdisk_load_address&#125; $&#123;devicetree_load_address&#125;\0"</span> \</span><br><span class="line">...</span><br><span class="line"><span class="string">"sdboot=if mmcinfo; then "</span> \</span><br><span class="line"><span class="string">"run uenvboot; "</span> \</span><br><span class="line"><span class="string">"echo Copying Linux from SD to RAM... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;kernel_load_address&#125; $&#123;kernel_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;devicetree_load_address&#125; $&#123;devicetree_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;ramdisk_load_address&#125; $&#123;ramdisk_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"bootm $&#123;kernel_load_address&#125; $&#123;ramdisk_load_address&#125; $&#123;devicetree_load_address&#125;; "</span> \</span><br><span class="line"><span class="string">"fi\0"</span> \</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>分别看下u-boot中sf和load命令:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sf: 用于spi/qspi flash的读/写/擦除操作;</span></span><br><span class="line"><span class="comment">// read/write/erase之前必须先调用sf probe;</span></span><br><span class="line"><span class="comment">// 具体用法:</span></span><br><span class="line">sf probe [[bus:]cs] [hz] [mode]- init flash device on given SPI bus <span class="keyword">and</span> chip select</span><br><span class="line">sf read addr offset len- read `len' bytes starting at`offset' to memory at `addr'</span><br><span class="line">sf write addr offset len- write `len' bytes from memor at `addr' to flash at `offset'</span><br><span class="line">sf erase offset [+]len- erase `len' bytes from `offset' `+len' round up `len' to block size</span><br><span class="line">sf update addr offset len- erase <span class="keyword">and</span> write `len' bytes from memory at `addr' to flash at `offset'</span><br></pre></td></tr></table></figure><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load: 用于读取文件系统中的二进制文件;</span></span><br><span class="line"><span class="comment">// 从SD卡启动, mmc 0 为SD卡;</span></span><br><span class="line"><span class="comment">// 具体用法:</span></span><br><span class="line">load &lt;interface&gt; [&lt;dev[:part]&gt; [&lt;addr&gt; [&lt;filename&gt; [bytes [pos]]]]]</span><br><span class="line">- Load binary file 'filename' from partition 'part' on device</span><br><span class="line">type 'interface' instance 'dev' to address 'addr' in memory.</span><br><span class="line">'bytes' gives the size to load in bytes.</span><br><span class="line">If 'bytes' is 0 or omitted, the file is read until the end.</span><br><span class="line">'pos' gives the file byte position to start reading from.</span><br><span class="line">If 'pos' is 0 or omitted, the file is read from the start.</span><br></pre></td></tr></table></figure><br>通过对比我们可以看出SD卡和QSPI启动Linux的区别主要在于:前者从SD卡中将uImage, uramdisk.image.gz, devicetree.dtb文件加载到内存指定位置, 而后者从qspi flash 指定地址(分区)中加载到内存.<p></p><blockquote><p>Tips:</p><blockquote><p>qspiboot中读取Flash时使用的三个地址偏移0x500000, 0xA00000, 0xA20000, 需要根据实际情况进行配置.</p></blockquote></blockquote><hr><h2 id="QSPI-FLASH烧录"><a href="#QSPI-FLASH烧录" class="headerlink" title="QSPI FLASH烧录"></a>QSPI FLASH烧录</h2><h3 id="U-boot下烧录SD卡启动文件到QSPI-Flash"><a href="#U-boot下烧录SD卡启动文件到QSPI-Flash" class="headerlink" title="U-boot下烧录SD卡启动文件到QSPI Flash"></a>U-boot下烧录SD卡启动文件到QSPI Flash</h3><p>设置板子为SD卡启动, 上电后进入U-boot命令行:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Zynq&gt; ls mmc 0# 查看SD卡目录结构;</span><br><span class="line"></span><br><span class="line">Zynq&gt; sf probe 0 0 0# 初始化SPI FLASH  </span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 BOOT.bin# 从SD卡加载BOOT.bin到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x0 0x500000# 擦除Flash 0x0地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x0 0x500000# 将内存地址0x08000000起始处的0x500000的大小内容写进Flash地址0x0处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 uImage# 从SD卡加载uImage到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x500000 0x500000# 擦除Flash 0x500000地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x500000 0x500000# 将内存地址0x08000000起始处的0x500000的大小内容写进Flash地址0x500000处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 devicetree.dtb# 从SD卡加载devicetree.dtb到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0xA00000 0x20000# 擦除Flash 0xA00000地址处大小为0x20000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0xA00000 0x20000# 将内存地址0x08000000起始处的0x20000的大小内容写进Flash地址0xA00000处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 uramdisk.image.gz# 从SD卡加载uramdisk.image.gz到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0xA20000 0x800000# 擦除Flash 0xA20000地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0xA20000 0x800000# 将内存地址0x08000000起始处的0x800000的大小内容写进Flash地址0xA20000处;</span><br></pre></td></tr></table></figure><br>设置板子为QSPI启动, 重新上电, 成功进入系统.<p></p><hr><h3 id="制作QSPI启动镜像"><a href="#制作QSPI启动镜像" class="headerlink" title="制作QSPI启动镜像"></a>制作QSPI启动镜像</h3><p>直接烧写SD卡启动文件似乎有点复杂, 那么我们就制作单独的QSPI启动镜像文件, 简化烧录过程; 首先我们看看制作SD卡启动文件脚本的主要内容:<br></p><figure class="highlight bash"><figcaption><span>scripts/mk_sd_image.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"//arch = zynq; split = false; format = BIN"</span>&gt; <span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the_ROM_image:"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" [bootloader]<span class="variable">$&#123;TARGET&#125;</span>/fsbl.elf"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" <span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" <span class="variable">$&#123;TARGET&#125;</span>/u-boot.elf"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#125;"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line">...</span><br><span class="line">bootgen -image <span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif -o <span class="variable">$&#123;IMAGES&#125;</span>/sd_image/BOOT.bin -w on</span><br><span class="line">...</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/uImage<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/devicetree.dtb<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/uramdisk.image.gz<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>从这一段内容可以看出BOOT.bin是由sd_image.bif打包生成的; 而sd_image.bif是由fsbl.elf, system_wrapper.bit, boot.elf三个文件组成, 基本格式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">the_ROM_image:</span><br><span class="line">&#123;</span><br><span class="line">[bootloader]fsbl.elf</span><br><span class="line">system_wrapper.bit</span><br><span class="line">boot.elf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>剩下的uImage, devicetree.dtb, uramdisk.image.gz则是直接拷贝过来的; 那么我们将bif文件的格式加入偏移后变成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">the_ROM_image:</span><br><span class="line">&#123;</span><br><span class="line">[bootloader]fsbl.elf</span><br><span class="line">system_wrapper.bit</span><br><span class="line">boot.elf</span><br><span class="line">[offset = 0x500000]uImage.bin</span><br><span class="line">[offset = 0xA00000]devicetree.dtb</span><br><span class="line">[offset = 0xA20000]uramdisk.image.gz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样就将所有需要的启动文件打包成一个文件.<p></p><blockquote><p>Tips:</p><blockquote><p>注意这里的offset要与bootargs中的偏移一致才能正确读取各个部分内容.</p></blockquote></blockquote><p>修改mk_sd_image.sh的内容, 保存为mk_qspi_image.sh<br></p><figure class="highlight bash"><figcaption><span>[src]scripts/mk_qspi_image.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">BIF_FILE=<span class="variable">$&#123;TARGET&#125;</span>/qspi_image.bif</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"//arch = zynq; split = false; format = BIN"</span>&gt; <span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the_ROM_image:"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># The files we need are:</span></span><br><span class="line"><span class="comment"># 1. the first stage boot loader</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[bootloader]<span class="variable">$&#123;TARGET&#125;</span>/fsbl.elf"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 2. FPGA bit stream</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 3. Das U-Boot boot loader</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/u-boot.elf"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 4. Linux kernel with modified header for U-Boot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0x500000]<span class="variable">$&#123;TARGET&#125;</span>/uImage.bin"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 5. Device tree blob</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0xA00000]<span class="variable">$&#123;TARGET&#125;</span>/devicetree.dtb"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 6. Root filesystem</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0xA20000]<span class="variable">$&#123;TARGET&#125;</span>/uramdisk.image.gz"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#125;"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line">bootgen -image <span class="variable">$&#123;TARGET&#125;</span>/qspi_image.bif -o <span class="variable">$&#123;IMAGES&#125;</span>/qspi_image/qspi_image.bin -w on</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>执行以下脚本生成image/qspi_image/qspi_image.bin, 文件大小接近18MB.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mk_bootloader.sh &amp;&amp; mk_kernel.sh &amp;&amp; mk_qspi_image.sh</span><br></pre></td></tr></table></figure><br>烧录时执行以下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Zynq&gt; fatload mmc 0 0x08000000 qspi_image.bin# 从SD卡加载qspi_image.bin到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x0 0x1200000# 擦除Flash 0x0地址处大小为0x1200000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x0 0x1200000# 将内存地址0x08000000起始处的0x1200000的大小内容写进Flash地址0x0处;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="启动Linux后烧录启动文件到QSPI-Flash"><a href="#启动Linux后烧录启动文件到QSPI-Flash" class="headerlink" title="启动Linux后烧录启动文件到QSPI Flash"></a>启动Linux后烧录启动文件到QSPI Flash</h3><p>在Linux下可以将bin文件通过dd 命令直接写进Flash中. 首先要配置QSPI Flash驱动, 生成MTD设备节点. 在Kernel源码路径输入命令:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># make ARCH=arm menuconfig</span><br></pre></td></tr></table></figure><br>选择以下配置选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Device Drivers  ---&gt;</span><br><span class="line">&lt;*&gt; Memory Technology Device (MTD) support  ---&gt;</span><br><span class="line">Self-contained MTD device drivers  ---&gt;</span><br><span class="line">&lt;*&gt; Support most SPI Flash chips (AT26DF, M25P, W25X, ...)</span><br><span class="line">&lt;*&gt;   SPI-NOR device support  ---&gt;</span><br><span class="line">[*] SPI support  ---&gt;</span><br><span class="line">&lt;*&gt;   Xilinx SPI controller common module</span><br><span class="line">&lt;*&gt;   Xilinx Zynq QSPI controller</span><br></pre></td></tr></table></figure><br>修改设备树:<br><figure class="highlight plain"><figcaption><span>[src]kernel/arch/arm/boot/dts/zynq-zed.dts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">aliases &#123;</span><br><span class="line">...</span><br><span class="line">spi0 = &amp;qspi;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&amp;qspi &#123;</span><br><span class="line">status = &quot;okay&quot;;</span><br><span class="line">is-dual = &lt;0&gt;;</span><br><span class="line">num-cs = &lt;1&gt;;</span><br><span class="line">flash@0 &#123;</span><br><span class="line">compatible = &quot;n25q128a11&quot;;</span><br><span class="line">reg = &lt;0x0&gt;;</span><br><span class="line">spi-tx-bus-width = &lt;1&gt;;</span><br><span class="line">spi-rx-bus-width = &lt;4&gt;;</span><br><span class="line">spi-max-frequency = &lt;50000000&gt;;</span><br><span class="line">#address-cells = &lt;1&gt;;</span><br><span class="line">#size-cells = &lt;1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>在flash子节点下可以自己添加分区, 格式为<br><figure class="highlight plain"><figcaption><span>[src]kernel/arch/arm/boot/dts/zynq-zed.dts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">partition@qspi-fsbl-uboot &#123;</span><br><span class="line">label = &quot;qspi-fsbl-uboot&quot;;</span><br><span class="line">reg = &lt;0x0 0x500000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-linux &#123;</span><br><span class="line">label = &quot;qspi-linux&quot;;</span><br><span class="line">reg = &lt;0x500000 0x500000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-device-tree &#123;</span><br><span class="line">label = &quot;qspi-device-tree&quot;;</span><br><span class="line">reg = &lt;0xA00000 0x20000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-rootfs &#123;</span><br><span class="line">label = &quot;qspi-rootfs&quot;;</span><br><span class="line">reg = &lt;0xA20000 0x800000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>执行以下脚本生成qspi_image.bin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mk_bootloader.sh &amp;&amp; mk_kernel.sh &amp;&amp; mk_qspi_image.sh</span><br></pre></td></tr></table></figure><br>拷贝生成文件到SD卡, 上电启动, 进入系统, 查看设备节点和MTD分区信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ls /dev/mtd*</span><br><span class="line">/dev/mtd0       /dev/mtd0ro     /dev/mtdblock0</span><br><span class="line"># cat /proc/mtd </span><br><span class="line">dev:    size   erasesize  name</span><br><span class="line">mtd0: 02000000 00010000 &quot;spi0.0&quot;</span><br></pre></td></tr></table></figure><br>使用dd命令烧录QSPI Flash:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># dd if=&lt;sdcard_root_dir&gt;/qspi_image.bin of=/dev/mtdblock0 bs=1024</span><br><span class="line">17687+1 records in</span><br><span class="line">17687+1 records out</span><br></pre></td></tr></table></figure><br>重新启动开发板, 进入系统, OK.<p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.osrc.cn/forum.php?mod=viewthread&amp;tid=1634" target="_blank" rel="noopener">[移植篇] CH04 LINUX从QSPI启动</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> qspi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ QSPI驱动分析</title>
      <link href="/1064320173/"/>
      <url>/1064320173/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Feb 19 2020 12:51:40 GMT+0800 (GMT+08:00) --><hr><h2 id="ZYNQ-QSPI框架接口"><a href="#ZYNQ-QSPI框架接口" class="headerlink" title="ZYNQ QSPI框架接口"></a>ZYNQ QSPI框架接口</h2><p>首先, 我们要知道: SPI Nor层完成MTD子系统的接口和Norflash操作硬件接口的转化, 而SPI Master层完成操作硬件时数据传输的协议制定.<br>那么一次读写Norflash过程可以简化为:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file system(open, read, write) -&gt;</span><br><span class="line">mtd sub system(mtd_open, mtd_read, mtd_write) -&gt;</span><br><span class="line">nor flash(m25p80_read, m25p80_write) -&gt;</span><br><span class="line">hardware</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>再来看下整个qspi框架的主要接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">MTD Sub System  |</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">                | spi_nor_read  spi_nor_write  spi_nor_lock  spi_nor_unlock</span><br><span class="line">SPI Nor         |------------------------------------------------------------</span><br><span class="line">                | m25p80_read m25p80_write m25p80_read_reg m25p80_write_reg</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">                | spi_write spi_sync spi_write_then_read</span><br><span class="line">SPI Master      |------------------------------------------------------------</span><br><span class="line">                | zynq_qspi_setup zynq_qspi_start_transfer</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">Hardware        |</span><br><span class="line">----------------|------------------------------------------------------------</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="ZYNQ-QSPI驱动注册过程"><a href="#ZYNQ-QSPI驱动注册过程" class="headerlink" title="ZYNQ QSPI驱动注册过程"></a>ZYNQ QSPI驱动注册过程</h2><p>QSPI驱动主要分为2个部分: SPI Master部分完成主控的硬件初始化以及配置SPI总线地址, 位宽, 模式, 速度等; Norflash部分实现了操作Flash硬件的接口和MTD子系统的读/写/擦除Flash接口.</p><hr><h3 id="SPI-Master驱动注册"><a href="#SPI-Master驱动注册" class="headerlink" title="SPI Master驱动注册"></a>SPI Master驱动注册</h3><p>在驱动入口函数zynq_qspi_probe中, 完成对QSPI主控制器的一系列初始化:<br></p><figure class="highlight c"><figcaption><span>[src]driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* QSPI controller initializations */</span></span><br><span class="line">zynq_qspi_init_hw(xqspi);</span><br><span class="line">...</span><br><span class="line">master-&gt;setup = zynq_qspi_setup;</span><br><span class="line">master-&gt;set_cs = zynq_qspi_chipselect;</span><br><span class="line">master-&gt;transfer_one = zynq_qspi_start_transfer;</span><br><span class="line">master-&gt;prepare_transfer_hardware = zynq_prepare_transfer_hardware;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后调用spi_register_master()创建设备节点/dev/spiX.X<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = spi_register_master(master);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;pdev-&gt;dev, <span class="string">"spi_register_master failed\n"</span>);</span><br><span class="line"><span class="keyword">goto</span> clk_dis_all;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在spi_register_master函数的最后, 调用了of_register_spi_device来遍历子节点<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_register_master</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register devices from the device tree and ACPI */</span></span><br><span class="line">of_register_spi_devices(master);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在该函数中读取设备树上的配置信息, 初始化SPI BUS<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Alloc an spi_device */</span></span><br><span class="line">spi = spi_alloc_device(master);</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Select device driver */</span></span><br><span class="line">rc = of_modalias_node(nc, spi-&gt;modalias, </span><br><span class="line"><span class="keyword">sizeof</span>(spi-&gt;modalias));</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Device address */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"reg"</span>, &amp;value);</span><br><span class="line">spi-&gt;chip_select = value;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Mode (clock phase/polarity/etc.) */</span></span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpha"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPHA;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpol"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPOL;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cs-high"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CS_HIGH;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-3wire"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_3WIRE;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-lsb-first"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_LSB_FIRST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device DUAL/QUAD mode */</span></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-tx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-tx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-rx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-rx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device speed */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"spi-max-frequency"</span>, &amp;value);</span><br><span class="line">spi-&gt;max_speed_hz = value;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="Norflash驱动注册"><a href="#Norflash驱动注册" class="headerlink" title="Norflash驱动注册"></a>Norflash驱动注册</h3><p>在of_register_spi_device函数的最后, 调用spi_add_device来加载m25p80设备驱动<br></p><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register the new device */</span></span><br><span class="line">rc = spi_add_device(spi);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在m25p_probe函数中, 配置spi nor的read/write(读写nor flash), read_reg(配置qspi寄存器), write_reg(配置nor flash寄存器)<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">m25p_probe</span><span class="params">(struct spi_device *spi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">nor-&gt;read = m25p80_read;</span><br><span class="line">nor-&gt;write = m25p80_write;</span><br><span class="line">nor-&gt;write_reg = m25p80_write_reg;</span><br><span class="line">nor-&gt;read_reg = m25p80_read_reg;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用spi_nor_scan函数, 获取id, 得到nor flash信息, 然后配置type, writesize, size等参数, 设置_erase, _read, _write回调函数<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_nor_scan</span><span class="params">(struct spi_nor *nor, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">enum</span> read_mode mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">jinfo = spi_nor_read_id(nor);</span><br><span class="line">...</span><br><span class="line">mtd-&gt;priv = nor;</span><br><span class="line">mtd-&gt;type = MTD_NORFLASH;</span><br><span class="line">mtd-&gt;writesize = <span class="number">1</span>;</span><br><span class="line">mtd-&gt;flags = MTD_CAP_NORFLASH;</span><br><span class="line">mtd-&gt;size = info-&gt;sector_size * info-&gt;n_sectors;</span><br><span class="line">mtd-&gt;_erase = spi_nor_erase;</span><br><span class="line">mtd-&gt;_read = spi_nor_read_ext;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用mtd_device_register函数, 解析设备树中的分区表, 添加分区信息<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/mtdcore.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mtd_device_parse_register</span><span class="params">(struct mtd_info *mtd, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> *types,</span></span></span><br><span class="line"><span class="function"><span class="params">      struct mtd_part_parser_data *parser_data,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> struct mtd_partition *parts,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> nr_parts)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = parse_mtd_partitions(mtd, types, &amp;parsed, parser_data);</span><br><span class="line">...</span><br><span class="line">ret = mtd_add_device_partitions(mtd, &amp;parsed);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/sinbingzoo/article/details/80206480" target="_blank" rel="noopener">Linux SPI/QSPI nor flash相关驱动代码</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> qspi </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
