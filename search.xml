<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Arm Linux下使用ldd</title>
      <link href="/3476998492/"/>
      <url>/3476998492/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ldd</code>命令用于打印程序或者库文件所依赖的共享库列表, <code>ldd</code>不是一个可执行程序, 而只是一个shell脚本. <code>ldd</code>显示可执行模块的依赖的工作原理, 其实质是通过<code>ld-linux.so</code>(动态库链接器)来实现的. <code>ldd</code>能够显示可执行模块的依赖, 其原理是通过设置一些的环境变量, 如<code>LD_TRACE_LOADED_OBJECTS</code>, <code>LD_WARN</code>, <code>LD_BIND_NOW</code>, <code>LD_LIBRARY_VERSION</code>, <code>LD_VERBOSE</code>等. 当<code>LD_TRACE_LOADED_OBJECTS</code>环境变量不为空时, 任何可执行程序在运行时, 它都会只显示模块的依赖, 而程序并不真正执行. 实际上可以直接执行<code>ld-linux.so</code>模块, 如: <code>/lib/ld-linux.so.2 --list ls</code>(这条命令相当于<code>ldd ls</code>).<br><a id="more"></a></p><hr><h2 id="ubuntu下的ldd"><a href="#ubuntu下的ldd" class="headerlink" title="ubuntu下的ldd"></a>ubuntu下的ldd</h2><p>ubuntu下的<code>ldd</code>位于<code>/usr/bin/ldd</code>, 文件内容如下:<br></p><figure class="highlight bash"><figcaption><span>[src]/usr/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># Copyright (C) 1996-2016 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment"># This file is part of the GNU C Library.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The GNU C Library is free software; you can redistribute it and/or</span></span><br><span class="line"><span class="comment"># modify it under the terms of the GNU Lesser General Public</span></span><br><span class="line"><span class="comment"># License as published by the Free Software Foundation; either</span></span><br><span class="line"><span class="comment"># version 2.1 of the License, or (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The GNU C Library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></span><br><span class="line"><span class="comment"># Lesser General Public License for more details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should have received a copy of the GNU Lesser General Public</span></span><br><span class="line"><span class="comment"># License along with the GNU C Library; if not, see</span></span><br><span class="line"><span class="comment"># &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the `ldd' command, which lists what shared libraries are</span></span><br><span class="line"><span class="comment"># used by given dynamically-linked executables.  It works by invoking the</span></span><br><span class="line"><span class="comment"># run-time dynamic linker as a command and setting the environment</span></span><br><span class="line"><span class="comment"># variable LD_TRACE_LOADED_OBJECTS to a non-empty value.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We should be able to find the translation right at the beginning.</span></span><br><span class="line">TEXTDOMAIN=libc</span><br><span class="line">TEXTDOMAINDIR=/usr/share/locale</span><br><span class="line"></span><br><span class="line">RTLDLIST=<span class="string">"/lib/ld-linux.so.2 /lib64/ld-linux-x86-64.so.2 /libx32/ld-linux-x32.so.2"</span></span><br><span class="line">warn=</span><br><span class="line">bind_now=</span><br><span class="line">verbose=</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">test</span> <span class="variable">$#</span> -gt 0; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  --vers | --versi | --versio | --version)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'ldd (Ubuntu GLIBC 2.23-0ubuntu10) 2.23'</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"Copyright (C) %s Free Software Foundation, Inc.</span></span><br><span class="line"><span class="string">This is free software; see the source for copying conditions.  There is NO</span></span><br><span class="line"><span class="string">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="string">"</span> <span class="string">"2016"</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"Written by %s and %s.</span></span><br><span class="line"><span class="string">"</span> <span class="string">"Roland McGrath"</span> <span class="string">"Ulrich Drepper"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    ;;</span><br><span class="line">  --h | --he | --hel | --<span class="built_in">help</span>)</span><br><span class="line">    <span class="built_in">echo</span> $<span class="string">"Usage: ldd [OPTION]... FILE...</span></span><br><span class="line"><span class="string">      --help              print this help and exit</span></span><br><span class="line"><span class="string">      --version           print version information and exit</span></span><br><span class="line"><span class="string">  -d, --data-relocs       process data relocations</span></span><br><span class="line"><span class="string">  -r, --function-relocs   process data and function relocations</span></span><br><span class="line"><span class="string">  -u, --unused            print unused direct dependencies</span></span><br><span class="line"><span class="string">  -v, --verbose           print all information</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line">    <span class="built_in">printf</span> $<span class="string">"For bug reporting instructions, please see:\\n%s.\\n"</span> \</span><br><span class="line">      <span class="string">"&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;"</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    ;;</span><br><span class="line">  -d | --d | --da | --dat | --data | --data- | --data-r | --data-re | \</span><br><span class="line">  --data-rel | --data-relo | --data-reloc | --data-relocs)</span><br><span class="line">    warn=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -r | --f | --fu | --fun | --func | --funct | --functi | --functio | \</span><br><span class="line">  --<span class="keyword">function</span> | --<span class="keyword">function</span>- | --<span class="keyword">function</span>-r | --<span class="keyword">function</span>-re | --<span class="keyword">function</span>-rel | \</span><br><span class="line">  --<span class="keyword">function</span>-relo | --<span class="keyword">function</span>-reloc | --<span class="keyword">function</span>-relocs)</span><br><span class="line">    warn=yes</span><br><span class="line">    bind_now=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -v | --verb | --verbo | --verbos | --verbose)</span><br><span class="line">    verbose=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  -u | --u | --un | --unu | --unus | --unuse | --unused)</span><br><span class="line">    unused=yes</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    ;;</span><br><span class="line">  --v | --ve | --ver)</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"ldd: option \`<span class="variable">$1</span>' is ambiguous"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">  --)<span class="comment"># Stop option processing.</span></span><br><span class="line">    <span class="built_in">shift</span>; <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line">  -*)</span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 <span class="string">'ldd:'</span> $<span class="string">"unrecognized option"</span> <span class="string">"\`<span class="variable">$1</span>'"</span></span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"Try \`ldd --help' for more information."</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line">    ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">nonelf ()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"># Maybe extra code for non-ELF binaries.</span></span><br><span class="line">  <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add_env=<span class="string">"LD_TRACE_LOADED_OBJECTS=1 LD_WARN=<span class="variable">$warn</span> LD_BIND_NOW=<span class="variable">$bind_now</span>"</span></span><br><span class="line">add_env=<span class="string">"<span class="variable">$add_env</span> LD_LIBRARY_VERSION=\$verify_out"</span></span><br><span class="line">add_env=<span class="string">"<span class="variable">$add_env</span> LD_VERBOSE=<span class="variable">$verbose</span>"</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">"<span class="variable">$unused</span>"</span> = yes; <span class="keyword">then</span></span><br><span class="line">  add_env=<span class="string">"<span class="variable">$add_env</span> LD_DEBUG=\"<span class="variable">$LD_DEBUG</span><span class="variable">$&#123;LD_DEBUG:+,&#125;</span>unused\""</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following command substitution is needed to make ldd work in SELinux</span></span><br><span class="line"><span class="comment"># environments where the RTLD might not have permission to write to the</span></span><br><span class="line"><span class="comment"># terminal.  The extra "x" character prevents the shell from trimming trailing</span></span><br><span class="line"><span class="comment"># newlines from command substitution results.  This function is defined as a</span></span><br><span class="line"><span class="comment"># subshell compound list (using "(...)") to prevent parameter assignments from</span></span><br><span class="line"><span class="comment"># affecting the calling shell execution environment.</span></span><br><span class="line">try_trace() (</span><br><span class="line">  output=$(<span class="built_in">eval</span> <span class="variable">$add_env</span> <span class="string">'"$@"'</span> 2&gt;&amp;1; rc=$?; <span class="built_in">printf</span> <span class="string">'x'</span>; <span class="built_in">exit</span> <span class="variable">$rc</span>)</span><br><span class="line">  rc=$?</span><br><span class="line">  <span class="built_in">printf</span> <span class="string">'%s'</span> <span class="string">"<span class="variable">$&#123;output%x&#125;</span>"</span></span><br><span class="line">  <span class="built_in">return</span> <span class="variable">$rc</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$#</span> <span class="keyword">in</span></span><br><span class="line">0)</span><br><span class="line">  <span class="built_in">echo</span> &gt;&amp;2 <span class="string">'ldd:'</span> $<span class="string">"missing file arguments"</span></span><br><span class="line">  <span class="built_in">echo</span> &gt;&amp;2 $<span class="string">"Try \`ldd --help' for more information."</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">  ;;</span><br><span class="line">1)</span><br><span class="line">  single_file=t</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  single_file=f</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line">result=0</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># We don't list the file name when there is only one.</span></span><br><span class="line">  <span class="built_in">test</span> <span class="variable">$single_file</span> = t || <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;file&#125;</span>:"</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$file</span> <span class="keyword">in</span></span><br><span class="line">  */*) :</span><br><span class="line">       ;;</span><br><span class="line">  *) file=./<span class="variable">$file</span></span><br><span class="line">     ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">test</span> ! -e <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ldd: <span class="variable">$&#123;file&#125;</span>:"</span> $<span class="string">"No such file or directory"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">elif</span> <span class="built_in">test</span> ! -f <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ldd: <span class="variable">$&#123;file&#125;</span>:"</span> $<span class="string">"not regular file"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">elif</span> <span class="built_in">test</span> -r <span class="string">"<span class="variable">$file</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    RTLD=</span><br><span class="line">    ret=1</span><br><span class="line">    <span class="keyword">for</span> rtld <span class="keyword">in</span> <span class="variable">$&#123;RTLDLIST&#125;</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">test</span> -x <span class="variable">$rtld</span>; <span class="keyword">then</span></span><br><span class="line">dummy=`<span class="variable">$rtld</span> 2&gt;&amp;1` </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? = 127; <span class="keyword">then</span></span><br><span class="line">  verify_out=`<span class="variable">$&#123;rtld&#125;</span> --verify <span class="string">"<span class="variable">$file</span>"</span>`</span><br><span class="line">  ret=$?</span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$ret</span> <span class="keyword">in</span></span><br><span class="line">  [02]) RTLD=<span class="variable">$&#123;rtld&#125;</span>; <span class="built_in">break</span>;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$ret</span> <span class="keyword">in</span></span><br><span class="line">    0|2)</span><br><span class="line">      try_trace <span class="string">"<span class="variable">$RTLD</span>"</span> <span class="string">"<span class="variable">$file</span>"</span> || result=1</span><br><span class="line">      ;;</span><br><span class="line">    1)</span><br><span class="line">      <span class="comment"># This can be a non-ELF binary or no binary at all.</span></span><br><span class="line">      nonelf <span class="string">"<span class="variable">$file</span>"</span> || &#123;</span><br><span class="line"><span class="built_in">echo</span> $<span class="string">"not a dynamic executable"</span></span><br><span class="line">result=1</span><br><span class="line">      &#125;</span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'ldd:'</span> <span class="variable">$&#123;RTLD&#125;</span> $<span class="string">"exited with unknown exit code"</span> <span class="string">"(<span class="variable">$ret</span>)"</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'ldd:'</span> $<span class="string">"error: you do not have read permission for"</span> <span class="string">"\`<span class="variable">$file</span>'"</span> &gt;&amp;2</span><br><span class="line">    result=1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$result</span></span><br><span class="line"><span class="comment"># Local Variables:</span></span><br><span class="line"><span class="comment">#  mode:ksh</span></span><br><span class="line"><span class="comment"># End:</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="在arm平台上使用"><a href="#在arm平台上使用" class="headerlink" title="在arm平台上使用"></a>在arm平台上使用</h2><p>因为<code>ldd</code>是一个脚本, 所以只需稍作修改就可以在arm平台执行. 首先替换脚本解释器, arm平台用的基本都是<code>/bin/sh</code>:<br></p><figure class="highlight diff"><figcaption><span>[src]/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- #! /bin/bash</span></span><br><span class="line"><span class="addition">+ #! /bin/sh</span></span><br></pre></td></tr></table></figure><br>然后替换动态库链接器, 我的交叉编译工具使用的是<code>ld-linux-hf.so.3</code>, 因此修改如下:<br><figure class="highlight diff"><figcaption><span>[src]/bin/ldd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- RTLDLIST="/lib/ld-linux.so.2 /lib64/ld-linux-x86-64.so.2 /libx32/ld-linux-x32.so.2"</span></span><br><span class="line"><span class="addition">+ RTLDLIST="/lib/ld-linux-hf.so.3"</span></span><br></pre></td></tr></table></figure><br>将修改好的<code>ldd</code>文件拷贝到开发板上<code>/bin</code>目录下, 测试:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ldd --version </span><br><span class="line">ldd (GNU libc) 2.26</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line">Written by Roland McGrath and Ulrich Drepper.</span><br></pre></td></tr></table></figure><br>测试通过.<p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://man.linuxde.net/ldd" target="_blank" rel="noopener">ldd命令</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下配置软AP分享Wifi热点</title>
      <link href="/1178631641/"/>
      <url>/1178631641/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个项目要求用无线网卡开启wifi热点, 由于板子目前还没回来, 那么先在Ubuntu下测试, 后面在进行移植. 我之前使用过Ubuntu自带的网络管理器和kde-nm-connection-editor(为了改mode从而使Android设备能识别, 后来发现其实可以直接改配置文件)成功搭建过wifi热点, 现在在ububtu14.04上试了很多次未成功(无法连接到隐藏网络), 后来一想最后要移植到开发板上, 应该是不用图形界面的, 还是老老实实用命令行配置吧. 使用命令行配置的话, 要用Hostapd创建一个无线接入点, 然后配置连接终端可以自动获取ip地址, 再共享以太网给无线网卡, 此时应该就可以正常上网了, 那么就开始吧.<br><a id="more"></a></p><hr><h2 id="确认网卡是否支持master模式"><a href="#确认网卡是否支持master模式" class="headerlink" title="确认网卡是否支持master模式"></a>确认网卡是否支持master模式</h2><p>在命令行终端输入iw list命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iw list</span><br><span class="line">...</span><br><span class="line">Supported interface modes:</span><br><span class="line">* IBSS</span><br><span class="line">* managed</span><br><span class="line">* AP</span><br><span class="line">* AP/VLAN</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>如果Supported interface modes中有AP或AP/VLAN, 说明这张网卡支持master模式, 接着往下看.<p></p><h2 id="配置hostapd"><a href="#配置hostapd" class="headerlink" title="配置hostapd"></a>配置hostapd</h2><p>编写/etc/hostapd/hostapd.conf文件, 输入以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]/etc/hostapd/hostapd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line"><span class="comment">#bridge=br0</span></span><br><span class="line">driver=nl80211</span><br><span class="line">ssid=softap</span><br><span class="line">channel=1</span><br><span class="line">hw_mode=g</span><br><span class="line">ignore_broadcast_ssid=0</span><br><span class="line">auth_algs=1</span><br><span class="line">wpa=3</span><br><span class="line">wpa_passphrase=11111111</span><br><span class="line">wpa_key_mgmt=WPA-PSK</span><br><span class="line">wpa_pairwise=TKIP</span><br><span class="line">rsn_pairwise=CCMP</span><br></pre></td></tr></table></figure><br>接下来看看这些配置部分选项说明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface: Atheros 接口始终名为 athx, 所有其他接口都是wlanx.</span><br><span class="line">bridge: 如果接入点没有以太网桥接, 可以省略bridge一行的内容.</span><br><span class="line">driver: 如果使用的是hostapd V0.6.8或其更高版本以及具有mac80211支持的WI, 那么驱动程序是nl80211. 惟一受支持的旧版驱动程序是HostAP,madwifi和prism54. V0.6.8之前的hostapd发行版支持hostap,wiredk,madwifi,test,nl80211和bsd驱动程序.</span><br><span class="line">ssid: 接入点名称.</span><br><span class="line">channel: 802.11b/g都最多只有三条互不干扰的信道, 即1,6,11, 选择其中一个就行.</span><br><span class="line">auth_algs：1表示只支持WPA2身份验证算法; 2表示只支持WEP; 3表示支持这两种方式. 永远不要使用有线等效加密(wired equivalent privacy, WEP), 因为它非常容易破解, 并且多年前就已经被完全破解了.</span><br><span class="line">wpa: 1表示支持WPA1; 2仅支持WPA2; 3表示二者都支持.</span><br><span class="line">wpa_passphrase: 接入点密码;</span><br><span class="line">wpa_key_mgmt: 支持的加密密钥算法. 选择有WPA-PSK,WPA-EAP或两者均使用. PSK是预共享密钥. EAP是可扩展认证协议, 是一个支持许多不同身份验证方法的框架, 对于小的预共享密钥设置, 不需要使用它.</span><br><span class="line">wpa_pairwise,rsn_pairwise: 控制支持加密数据的密钥, 您可以使用CCMP,TKIP或两者均使用. CCMP比TKIP更强, 因此建议仅支持CCMP.</span><br></pre></td></tr></table></figure><br>编写完成后, 在终端输入以下内容, 测试配置文件是否有问题:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hostadp  /etc/hostapd/hostapd.conf</span><br></pre></td></tr></table></figure><br>这时, 你的手机可以搜索到该热点, 但由于无法获取到IP地址仍然无法连接.<p></p><hr><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><p>可以选择NAT或是网桥方式来使该AP的接入设备获得ip地址.</p><h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>选择NAT方式的话, 要先为接入设备分配ip地址, 就能够连上热点, 但是无法连到网络. 通过配置NAT, 让终端发出的数据包的IP修改为公网IP, 即可连上网络. 首先为无线网卡分配IP地址并启用：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig wlan0 192.168.3.1 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure><br>这里介绍两种自动获取IP服务配置:<p></p><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>安装dnamasq:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install isc-dhcp-server</span><br></pre></td></tr></table></figure><br>打开/etc/dhcp/dhcpd.conf配置文件, 修改以下内容:<br><figure class="highlight bash"><figcaption><span>[src]/etc/dhcp/dhcpd.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subnet 192.168.3.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  range 192.168.3.20 192.168.3.200;</span><br><span class="line">  option routers 192.168.3.1;</span><br><span class="line">  option domain-name-servers 8.8.8.8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>重启dnamasq服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service isc-dhcp-server restart</span><br></pre></td></tr></table></figure><p></p><h4 id="DNSMASQ"><a href="#DNSMASQ" class="headerlink" title="DNSMASQ"></a>DNSMASQ</h4><p>在命令行终端输入输入以下命令安装dnamasq:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install dnsmasq</span><br></pre></td></tr></table></figure><br>打开/etc/dnsmasq.conf配置文件, 添加以下内容:<br><figure class="highlight bash"><figcaption><span>[src]/etc/dnsmasq.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface=wlan0</span><br><span class="line">listen-address=192.168.3.1</span><br><span class="line"><span class="comment">#no-dhcp-interface=</span></span><br><span class="line">dhcp-range=192.168.3.20,192.168.3.200,12h</span><br><span class="line">server=/google/8.8.8.8</span><br></pre></td></tr></table></figure><br>重启dnamasq服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service dnsmasq restart</span><br></pre></td></tr></table></figure><br>出现OK就成功了.<p></p><h4 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h4><p>通过上面两种配置后, 手机可以连接上热点, 但还无法连接外网, 需要配置路由转发. 首先打开内核的ip转发功能:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><br>使用iptables设置转发:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">$ sudo iptables -A FORWARD -s 192.168.3.0/24 -j ACCEPT</span><br><span class="line">$ sudo iptables -A FORWARD -d 192.168.3.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure><br>不出意外, 此时手机应该可以连接上外网了.<p></p><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><p>选择的是网桥方式, 那么IP地址将会由电脑实际连接的外网分配, 并且连接的终端可以直接发送数据到外网. 热点连上了就可以直接用了, 且和计算机的有线端同处于一个子网. 首先创建一个虚拟的以太网桥接口:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl addbr br0</span><br></pre></td></tr></table></figure><br>我们不需要STP(生成树协议)等. 因为我们只有一个路由器，是绝对不可能形成一个环的, 我们可以关闭这个功能.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl stp br0 off</span><br></pre></td></tr></table></figure><br>添加以太网物理接口和无线网卡接口到网桥上:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo brctl addif br0 eth0</span><br><span class="line">$ sudo brctl addif br0 wlan0</span><br></pre></td></tr></table></figure><br>如果wlan0无法添加, 尝试以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iw dev wlan0 <span class="built_in">set</span> 4addr on</span><br></pre></td></tr></table></figure><br>配置网桥的IP和默认网关, 要和机器所在局域网同一网段:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig br0 192.168.2.184 netmask 255.255.255.0 up</span><br><span class="line">$ sudo route add default gw 192.168.2.1</span><br></pre></td></tr></table></figure><br>以太网物理接口和无线网卡接口成为网桥设备的一部分了, 所以不再需要IP地址.下面我们将这些IP地址释放掉:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig eth0 down</span><br><span class="line">$ sudo ifconfig wlan0 down</span><br><span class="line">$ sudo ifconfig eth0 0.0.0.0 up</span><br><span class="line">$ sudo ifconfig wlan0 0.0.0.0 up</span><br></pre></td></tr></table></figure><br>启用网桥设备:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifconfig br0 up</span><br></pre></td></tr></table></figure><br>大功告成, 尽情享受吧!<p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/cupidove/article/details/38845049" target="_blank" rel="noopener">linux软AP－－hostapd+dhcpd</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-wifiencrypthostapd/" target="_blank" rel="noopener">使用 hostapd 轻松实现强 WiFi 加密</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>嵌入式LINUX下CGI与HTML网页之间的通信</title>
      <link href="/1522571396/"/>
      <url>/1522571396/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CGI 是Web服务器运行时外部程序的规范, 按CGI编写的程序可以扩展服务器功能. CGI应用程序能与浏览器进行交互, 还可通过数据库API与数据库服务器等外部数据源进行通信, 从数据库服务器中获取数据.几乎所有服务器都支持CGI,可用任何语言编写CGI,包括C/C++, Python, Shell等.<br>本文通过编写一个简单的登录的用例来了解CGI与HTML如何互相传递参数. 要在CGI和HTML之间传递数据, 需要移植CGI库, 由于比较简单这里就不再赘述, 本文默认已经移植好了CGI库以及能在开发板上使用httpd服务搭建Web服务器.</p><hr><h2 id="HTML调用CGI并传递参数"><a href="#HTML调用CGI并传递参数" class="headerlink" title="HTML调用CGI并传递参数"></a>HTML调用CGI并传递参数</h2><p>在HTML中我们使用表单(from), 采集和提交用户输入信息, 然后调用CGI程序处理:<br><a id="more"></a><br></p><figure class="highlight html"><figcaption><span>[src]www/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/getresult_cgi.cgi"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Username"</span> <span class="attr">placeholder</span>=<span class="string">"User"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"Password"</span> <span class="attr">placeholder</span>=<span class="string">"Passwd"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Tips</p><blockquote><ol><li>action为处理表单请求的程序;</li><li>method表示发送表单信息的方式. method有两个值: GET和POST. GET是把参数数据队列加到提交表单的ACTION属性所指的URL中, 值和表单内各个字段一一对应, 在URL中可以看到; POST是通过HTTP POST机制, 将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址, 用户看不到这个过程. GET一般用于取得和显示数据; POST多用于数据的保存更新;</li></ol></blockquote></blockquote><p>我们来看看CGI程序中是如何接受传递的参数. 首先是获取请求方式, 根据请求方式去拿数据:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">    req_method = getenv(<span class="string">"REQUEST_METHOD"</span>);</span><br><span class="line">    input = getcgidata(<span class="built_in">stdin</span>, req_method);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>来看下解析数据关键代码:<br><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getcgidata</span><span class="params">(FILE* fp, <span class="keyword">char</span>* requestmethod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"GET"</span>)) &#123;                                                                            </span><br><span class="line">        input = getenv(<span class="string">"QUERY_STRING"</span>);</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"POST"</span>)) &#123;</span><br><span class="line">        len = atoi(getenv(<span class="string">"CONTENT_LENGTH"</span>));</span><br><span class="line">        input = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(size + <span class="number">1</span>));</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">            input[i] = (<span class="keyword">char</span>)fgetc(fp);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看出GET请求传递的参数保存在环境变量QUERY_STRING中, 而POST请求将传递的参数保存在标准输入(stdin)中; 然后开始解析字符串:<br><figure class="highlight c"><figcaption><span>src:getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">sscanf</span>(input, <span class="string">"%*[^=]=%[^&amp;]%*[^=]=%[^EOF]"</span>, name, pass);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里使用sscanf来提取用户名和密码, 从HTML传递过来的参数格式应为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username=admin&amp;Password=aaaaa</span><br></pre></td></tr></table></figure><br>sscanf中格式化字符串的含义为:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%*[^=]=%[^&amp;]:   读取‘=’和‘&amp;’之间的字符, 放到name中;</span><br><span class="line">%*[^=]=%[^EOF]: 读取‘=’到文件流结尾之前的字符, 放到pass中;</span><br></pre></td></tr></table></figure><br>至此, 已经将HTML传递过来的参数解析完毕;<p></p><hr><h2 id="CGI返回数据给HTML"><a href="#CGI返回数据给HTML" class="headerlink" title="CGI返回数据给HTML"></a>CGI返回数据给HTML</h2><p>本文要做的是根据用户名和密码正不正确来返回不同信息: 正确返回login success信息, 错误返回输入的用户名和密码. 要将CGI数据传给HTML, 可以在CGI程序中直接生成一个页面, 不过这样好像不够灵活, 那么就使用HTML页面跳转时用来传递数据的Cookie来实现CGI与HTML间数据的传递:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name, <span class="string">"root"</span>, <span class="number">4</span>) &amp;&amp; !<span class="built_in">strncmp</span>(pass, <span class="string">"000"</span>, <span class="number">3</span>))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s;  path=/\r\n"</span>,<span class="string">"Result"</span>,<span class="string">"login success"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s&amp;&amp;%s;  path=/\r\n"</span>,<span class="string">"Result"</span>, name, pass);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里要注意的是要先设置Cookie后再输出http请求头, 否则Cookie无效. 接着我们看看HTML是怎么接受Cookie的:<br><figure class="highlight html"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Login Result=</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lignt_now"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"result_text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">cookie_text= document.getElementById('result_text');            </span></span><br><span class="line"><span class="undefined">cookie_text.value =getCookie('Result')</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>这里使用了一个表单, 表单内有一个文本框, 内容由javascript来填充; 我们再来看看getCookie()做了什么:<br><figure class="highlight javascript"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span><br><span class="line"><span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span><br><span class="line">&#123; </span><br><span class="line">c_start=c_start + c_name.length+<span class="number">1</span> </span><br><span class="line">c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span><br><span class="line"><span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure><br>前面我们传递的Cookie为“Result=login success”或“Result=username, password”. 在javascript中根据首尾字符使用document.cookie.indexOf()来获取Cookie有效内容的开始和结束位置, 然后根据字符开始和结束位置使用document.cookie.substring()读取子字符串, 最终得到需要的数据.<p></p><hr><h2 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h2><p>这里把所有代码都贴出来,首先是CGI程序:<br></p><figure class="highlight c"><figcaption><span>[src]getresult_cgi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iconv.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cgi.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"aux.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getcgidata</span><span class="params">(FILE* fp, <span class="keyword">char</span>* requestmethod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* input;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"GET"</span>)) &#123;</span><br><span class="line">input = getenv(<span class="string">"QUERY_STRING"</span>);</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(requestmethod, <span class="string">"POST"</span>)) &#123;</span><br><span class="line">len = atoi(getenv(<span class="string">"CONTENT_LENGTH"</span>));</span><br><span class="line">input = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(size + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">input[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">input[i] = (<span class="keyword">char</span>)fgetc(fp);</span><br><span class="line"><span class="keyword">if</span> (i == size) &#123;</span><br><span class="line">input[i+<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">--len;</span><br><span class="line"><span class="keyword">if</span> (feof(fp) || (!(len))) &#123;</span><br><span class="line">i++;</span><br><span class="line">input[i] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *input;</span><br><span class="line"><span class="keyword">char</span> *req_method;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">char</span> pass[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">req_method = getenv(<span class="string">"REQUEST_METHOD"</span>);</span><br><span class="line">input = getcgidata(<span class="built_in">stdin</span>, req_method);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Format: Username=admin&amp;Password=aaaaa. */</span></span><br><span class="line"><span class="comment">//sscanf(input, "%*[^=]=%*c%[^&amp;]%*[^=]%*c%[^\n]", name, pass);</span></span><br><span class="line"><span class="built_in">sscanf</span>(input, <span class="string">"%*[^=]=%[^&amp;]%*[^=]=%[^EOF]"</span>, name, pass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strncmp</span>(name,<span class="string">"root"</span>,<span class="number">4</span>) &amp;&amp; !<span class="built_in">strncmp</span>(pass, <span class="string">"000"</span>, <span class="number">3</span>))&#123;</span><br><span class="line"><span class="comment">/* Set Cookie. */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s;  path=/\r\n"</span>,<span class="string">"Result"</span>,<span class="string">"login success"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Set-Cookie: %s=%s&amp;&amp;%s;  path=/\r\n"</span>,<span class="string">"Result"</span>, name, pass);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%c%c\n"</span>,<span class="string">"Content-Type:text/html;charset=utf-8"</span>,<span class="number">13</span>,<span class="number">10</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&lt;meta http-equiv=\"refresh\" content=\"0;url=../result.html\"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>主页index.html:<br><figure class="highlight html"><figcaption><span>[src]www/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/getresult_cgi.cgi"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"Username"</span> <span class="attr">placeholder</span>=<span class="string">"User"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"Password"</span> <span class="attr">placeholder</span>=<span class="string">"Passwd"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> Login <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>返回结果result.html:<br><figure class="highlight html"><figcaption><span>[src]www/result.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">c_name</span>)</span></span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="javascript">c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span></span><br><span class="line"><span class="undefined">&#123; </span></span><br><span class="line"><span class="undefined">c_start=c_start + c_name.length+1 </span></span><br><span class="line"><span class="javascript">c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="string">""</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Result<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">Login Result=</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"lignt_now"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"result_text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">bang_text= <span class="built_in">document</span>.getElementById(<span class="string">'result_text'</span>);            </span></span><br><span class="line"><span class="javascript">bang_text.value =getCookie(<span class="string">'Result'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/guiyuan_yelang/article/details/45251947" target="_blank" rel="noopener">嵌入式CGI 与HTML的数据交换</a><br><a href="https://www.cnblogs.com/sjxbg/p/5897558.html" target="_blank" rel="noopener">CGI编程</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> cgi </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ从BUSYBOX开始制作RAMDISK</title>
      <link href="/2391800641/"/>
      <url>/2391800641/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><hr><h2 id="Busybox移植"><a href="#Busybox移植" class="headerlink" title="Busybox移植"></a>Busybox移植</h2><p>BusyBox将许多具有共性的小版本的UNIX工具结合到一个单一的可执行文件. 这样的集合可以替代大部分常用工具, BusyBox提供了一个比较完善的环境，可以适用于任何小的嵌入式系统.<br>这篇文章将从移植Busybox开始, 一步一步制作一个属于自己的根文件系统.</p><hr><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Busybox的官方源码下载路径为: <a href="http://busybox.net/downloads/" target="_blank" rel="noopener">点我</a><br><a id="more"></a><br>本次下载的是busybox-1.29.1.tar.bz2</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>解压下载的文件, 进入到源码根目录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvf busybox-1.29.1.tar.bz2 &amp;&amp; <span class="built_in">cd</span> busybox-1.29.1</span><br></pre></td></tr></table></figure><br>先使用默认配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make deconfig</span><br></pre></td></tr></table></figure><br>然后输入命令进行配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><br>配置以下选项:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Settings  ---&gt;</span><br><span class="line">[ ] Don<span class="string">'t use /usr</span></span><br><span class="line"><span class="string">[ ] Build static binary (no shared libs)</span></span><br><span class="line"><span class="string">(arm-linux-gnueabihf-) Cross compiler prefix</span></span><br></pre></td></tr></table></figure><br>第一个是选择是否编译出/usr相关目录, 这里不勾选则生成/usr目录;<br>第二个是选择静态编译不依赖动态库, 制作根文件系统后面会拷贝一套动态连接库, 先不勾选;<br>第三个是配置交叉编译工具, 根据实际情况填写;<br>其他的需要的命令支持自行选择配置.<p></p><blockquote><p>Tips</p><blockquote><p>静态编译与动态编译的区别<br>动态编译的可执行文件需要附带一个的动态链接库, 在执行时, 需要调用其对应动态链接库中的命令. 所以其优点一方面是缩小了执行文件本身的体积, 另一方面是加快了编译速度, 节省了系统资源. 缺点一是哪怕是很简单的程序, 只用到了链接库中的一两条命令, 也需要附带一个相对庞大的链接库; 二是如果其他计算机上没有安装对应的运行库, 则用动态编译的可执行文件就不能运行.<br>静态编译就是编译器在编译可执行文件的时候, 将可执行文件需要调用的对应动态链接库(.so)中的部分提取出来, 链接到可执行文件中去, 使可执行文件在运行的时候不依赖于动态链接库. 所以其优缺点与动态编译的可执行文件正好互补.</p></blockquote></blockquote><hr><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>生成文件位于_install文件夹内:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls _install/</span><br><span class="line">bin  linuxrc  sbin  usr</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="拷贝lib库"><a href="#拷贝lib库" class="headerlink" title="拷贝lib库"></a>拷贝lib库</h2><h3 id="新建一个root目录-进入该目录下"><a href="#新建一个root目录-进入该目录下" class="headerlink" title="新建一个root目录, 进入该目录下:"></a>新建一个root目录, 进入该目录下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir root &amp;&amp; <span class="built_in">cd</span> root/</span><br></pre></td></tr></table></figure><hr><h3 id="将编译busybox生成的目录下的所有文件拷贝过去"><a href="#将编译busybox生成的目录下的所有文件拷贝过去" class="headerlink" title="将编译busybox生成的目录下的所有文件拷贝过去:"></a>将编译busybox生成的目录下的所有文件拷贝过去:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af ../busybox-1.29.1/_install/* .</span><br></pre></td></tr></table></figure><hr><h3 id="创建其他的目录"><a href="#创建其他的目录" class="headerlink" title="创建其他的目录"></a>创建其他的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir dev etc lib sys proc tmp var home root mnt</span><br></pre></td></tr></table></figure><hr><h3 id="拷贝lib库-1"><a href="#拷贝lib库-1" class="headerlink" title="拷贝lib库"></a>拷贝lib库</h3><p>整个lib库有很多, 全部拷贝的话就有点臃肿了, 下面是我参考官方的ramdisk里面的lib库拷贝的, 应该还可以再精简, 先凑合着用吧:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls lib/</span><br><span class="line">ld-2.25.so               libcidn-2.25.so      libgfortran.so.4      libnss_compat-2.25.so   libnss_nis.so.2     libstdc++.so.6</span><br><span class="line">ld-linux-armhf.so.3      libcidn.so.1         libgfortran.so.4.0.0  libnss_compat.so.2      libpcprofile.so     libstdc++.so.6.0.24</span><br><span class="line">libanl-2.25.so           libcilkrts.so        libgomp.so            libnss_db-2.25.so       libpthread-2.25.so  libstdc++.so.6.0.24-gdb.py</span><br><span class="line">libanl.so.1              libcilkrts.so.5      libgomp.so.1          libnss_db.so.2          libpthread.so.0     libthread_db-1.0.so</span><br><span class="line">libasan.so               libcilkrts.so.5.0.0  libgomp.so.1.0.0      libnss_dns-2.25.so      libresolv-2.25.so   libthread_db.so.1</span><br><span class="line">libasan.so.4             libcrypt-2.25.so     libitm.so             libnss_dns.so.2         libresolv.so.2      libubsan.so</span><br><span class="line">libasan.so.4.0.0         libcrypt.so.1        libitm.so.1           libnss_files-2.25.so    librt-2.25.so       libubsan.so.0</span><br><span class="line">libatomic.so             libc.so.6            libitm.so.1.0.0       libnss_files.so.2       librt.so.1          libubsan.so.0.0.0</span><br><span class="line">libatomic.so.1           libdl-2.25.so        libm-2.25.so          libnss_hesiod-2.25.so   libSegFault.so      libutil-2.25.so</span><br><span class="line">libatomic.so.1.2.0       libdl.so.2           libmemusage.so        libnss_hesiod.so.2      libssp.so           libutil.so.1</span><br><span class="line">libBrokenLocale-2.25.so  libgcc_s.so          libm.so.6             libnss_nis-2.25.so      libssp.so.0</span><br><span class="line">libBrokenLocale.so.1     libgcc_s.so.1        libnsl-2.25.so        libnss_nisplus-2.25.so  libssp.so.0.0.0</span><br><span class="line">libc-2.25.so             libgfortran.so       libnsl.so.1           libnss_nisplus.so.2     libstdc++.so</span><br></pre></td></tr></table></figure><br>接下来拷贝上面的运行库:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af /opt/toolchain/arm-linux-gnueabihf/arm-linux-gnueabihf/libc/lib/*.so* lib/</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Tips</p><blockquote><ol><li>各个交叉编译工具的运行库的所在位置可能不同;</li><li>部分库文件是符号链接, 要保留原文件属性的前提下复制文件请使用 cp -a 命令;</li></ol></blockquote></blockquote><p>然后去掉库文件的符号表和调试信息进行瘦身, 进一步减少空间占用:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arm-linux-gnueabihf-strip lib/*</span><br></pre></td></tr></table></figure><br>现在整个可执行命令以及运行库已移植完成, 接下来是启动添加配置文件.<p></p><hr><h2 id="启动配置文件"><a href="#启动配置文件" class="headerlink" title="启动配置文件"></a>启动配置文件</h2><h3 id="profile文件"><a href="#profile文件" class="headerlink" title="profile文件"></a>profile文件</h3><p>新建etc/profile文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HOSTNAME=skycaster</span><br><span class="line"><span class="built_in">export</span> USER=root</span><br><span class="line"><span class="built_in">export</span> HOME=home</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">"[<span class="variable">$USER</span>@<span class="variable">$HOSTNAME</span> \W]\# "</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin</span><br><span class="line">LD_LIBRARY_PATH=/lib:/usr/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="inittab文件"><a href="#inittab文件" class="headerlink" title="inittab文件"></a>inittab文件</h3><p>新建etc/inittab文件, 并添加以下内容:<br></p><figure class="highlight plain"><figcaption><span>[src]etc/inittab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#this is run first except when booting in single-user mode.                                                                                      </span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line"># /bin/sh invocations on selected ttys</span><br><span class="line"># start an &quot;askfirst&quot; shell on the console (whatever that may be)</span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line"># stuff to do when restarting the init process</span><br><span class="line">::restart:/sbin/init</span><br><span class="line"># stuff to do before rebooting</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="fstab文件"><a href="#fstab文件" class="headerlink" title="fstab文件"></a>fstab文件</h3><p>新建etc/fstab文件, 并添加以下内容:<br></p><figure class="highlight plain"><figcaption><span>[src]etc/fstab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LABEL=/     /           tmpfs   defaults        0 0</span><br><span class="line">none        /dev/pts    devpts  gid=5,mode=620  0 0</span><br><span class="line">none        /proc       proc    defaults        0 0</span><br><span class="line">none        /sys        sysfs   defaults        0 0</span><br><span class="line">none        /tmp        tmpfs   defaults        0 0</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="rcS文件"><a href="#rcS文件" class="headerlink" title="rcS文件"></a>rcS文件</h3><p>新建etc/init.d/rcS文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/init.d/rcS</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting rcS..."</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++ Mounting filesystem"</span></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t tmpfs none /tmp</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"++ Setting up mdev"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br><span class="line"></span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mkdir -p /dev/i2c</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"rcS Complete"</span></span><br></pre></td></tr></table></figure><br>为其添加执行权限和所属用户组:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 755 etc/init.d/rcS</span><br><span class="line">$ sudo chown root:root etc/init.d/rcS</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="passwd文件"><a href="#passwd文件" class="headerlink" title="passwd文件"></a>passwd文件</h3><p>新建etc/passwd文件, 并添加以下内容:<br></p><figure class="highlight bash"><figcaption><span>[src]etc/passwd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:<span class="variable">$1</span><span class="variable">$qC</span>.CEbjC<span class="variable">$SVJyqm</span>.IG.gkElhaeM.FD0:0:0:root:/root:/bin/sh</span><br></pre></td></tr></table></figure><br>现在根文件系统已经制作完成, 接下来就要制作成ramdisk image.<p></p><hr><h2 id="制作ramdisk"><a href="#制作ramdisk" class="headerlink" title="制作ramdisk"></a>制作ramdisk</h2><h3 id="制作新的ramdisk-image"><a href="#制作新的ramdisk-image" class="headerlink" title="制作新的ramdisk.image"></a>制作新的ramdisk.image</h3><p>文件系统格式为ext2, 大小为16M:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=ramdisk.image bs=1024 count=16384</span><br><span class="line">$ mke2fs -F ramdisk.image -L <span class="string">"ramdisk"</span> -b 1024 -m 0</span><br><span class="line">$ tune2fs ramdisk.image -i 0</span><br><span class="line">$ chmod 777 ramdisk.image</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="挂载ramdisk"><a href="#挂载ramdisk" class="headerlink" title="挂载ramdisk"></a>挂载ramdisk</h3><p>新建一个rootfs目录, 并将ramdisk.image挂载到rootfs目录:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir rootfs</span><br><span class="line">$ chmod u+rwx ramdisk.image</span><br><span class="line">$ sudo mount -o loop ramdisk.image rootfs</span><br></pre></td></tr></table></figure><br>将制作好的根文件系统全部拷贝到rootfs目录下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -af root/* rootfs/*</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="打包ramdisk"><a href="#打包ramdisk" class="headerlink" title="打包ramdisk"></a>打包ramdisk</h3><p>卸载rootfs, 并打包ramdisk.image:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo umount rootfs</span><br><span class="line">$ gzip ramdisk.image</span><br><span class="line">$ mkimage -A arm -T ramdisk -C gzip -d ramdisk.image.gz uramdisk.image.gz</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>将ramdisk.image.gz拷贝到/mnt/workspace/linux/output目录下, 执行:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mk_kernel.sh &amp;&amp; mk_sdimage.sh</span><br></pre></td></tr></table></figure><br>将/mnt/workspace/linux/images/sd_image目录下的生成文件拷贝到SD卡, 重新上电, 启动后如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@skycaster ]<span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">[root@skycaster ]<span class="comment"># ls</span></span><br><span class="line">bin         home        mnt         sbin        usr</span><br><span class="line">dev         lib         proc        sys         var</span><br><span class="line">etc         lost+found  root        tmp</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/surpassal/archive/2013/01/12/Zed_lab7.html" target="_blank" rel="noopener">(原创)一步一步学ZedBoard &amp; Zynq(七)：制作ZedBoard上linux根文件系统(ramdisk)</a><br><a href="https://blog.csdn.net/liebao_han/article/details/79450086" target="_blank" rel="noopener">最新busybox-1.28.1制作根文件系统</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> ramdisk </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ 烧录QSPI FLASH及从QSPI启动</title>
      <link href="/622008616/"/>
      <url>/622008616/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><hr><h2 id="ZYNQ-Linux启动方式"><a href="#ZYNQ-Linux启动方式" class="headerlink" title="ZYNQ Linux启动方式"></a>ZYNQ Linux启动方式</h2><p>由于ZYNQ采用的是PS(ARM A9双核)+PL(FPGA)设计, 整个启动过程比较复杂, 因此我们从嵌入式Linux软件层面的角度考虑, 将ZYNQ当作一块纯ARM开发板, 从而简化ZYNQ的启动流程.</p><hr><h3 id="SD卡和QSPI启动流程"><a href="#SD卡和QSPI启动流程" class="headerlink" title="SD卡和QSPI启动流程"></a>SD卡和QSPI启动流程</h3><p>ZYNQ跑Linux系统, 在实际情况中用得比较多的启动方法为SD卡启动和QSPI启动, 先看下这两种方式的启动流程:<br><a id="more"></a><br></p><figure class="highlight plain"><figcaption><span>QSPI启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置板子为QSPI启动 ----&gt;</span><br><span class="line">  上电启动 ---&gt;</span><br><span class="line">    从Flash加载BOOT.bin(fsbl.elf, system.bit, u-boot.elf) ---&gt;</span><br><span class="line">      进入U-BOOT ---&gt;</span><br><span class="line">        解析bootargs(将kernel, devicetree, ramdisk 从Flash加载到内存指定地址) ---&gt;</span><br><span class="line">          使用bootm命令启动Linux</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><figcaption><span>SD卡启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">设置板子为SD卡启动 ----&gt;</span><br><span class="line">  上电启动 ---&gt;</span><br><span class="line">    从SD卡加载BOOT.bin(fsbl.elf, system.bit, u-boot.elf) ---&gt;</span><br><span class="line">      进入U-BOOT ---&gt;</span><br><span class="line">        解析bootargs(将kernel, devicetree, ramdisk 从SD卡加载到内存指定地址) ---&gt;</span><br><span class="line">          使用bootm命令启动Linux</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="SD卡和QSPI启动Linux的bootargs"><a href="#SD卡和QSPI启动Linux的bootargs" class="headerlink" title="SD卡和QSPI启动Linux的bootargs"></a>SD卡和QSPI启动Linux的bootargs</h3><p>U-boot中这两种启动方式的boottargs定义:<br></p><figure class="highlight c"><figcaption><span>[src]bootloader/include/configs/zynq-common.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"kernel_image=uImage\0"</span> \</span><br><span class="line"><span class="string">"kernel_load_address=0x2080000\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_image=uramdisk.image.gz\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_load_address=0x4000000\0"</span>  \</span><br><span class="line"><span class="string">"devicetree_image=devicetree.dtb\0"</span> \</span><br><span class="line"><span class="string">"devicetree_load_address=0x2000000\0"</span>   \</span><br><span class="line"><span class="string">"bitstream_image=system.bit.bin\0"</span>  \</span><br><span class="line"><span class="string">"boot_image=BOOT.bin\0"</span> \</span><br><span class="line">...</span><br><span class="line"><span class="string">"kernel_size=0x500000\0"</span>    \</span><br><span class="line"><span class="string">"devicetree_size=0x20000\0"</span> \</span><br><span class="line"><span class="string">"ramdisk_size=0x800000\0"</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"qspiboot=echo Copying Linux from QSPI flash to RAM... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf probe 0 0 0 &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;kernel_load_address&#125; 0x500000 $&#123;kernel_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;devicetree_load_address&#125; 0xA00000 $&#123;devicetree_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"echo Copying ramdisk... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"sf read $&#123;ramdisk_load_address&#125; 0xA20000 $&#123;ramdisk_size&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"bootm $&#123;kernel_load_address&#125; $&#123;ramdisk_load_address&#125; $&#123;devicetree_load_address&#125;\0"</span> \</span><br><span class="line">...</span><br><span class="line"><span class="string">"sdboot=if mmcinfo; then "</span> \</span><br><span class="line"><span class="string">"run uenvboot; "</span> \</span><br><span class="line"><span class="string">"echo Copying Linux from SD to RAM... &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;kernel_load_address&#125; $&#123;kernel_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;devicetree_load_address&#125; $&#123;devicetree_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"load mmc 0 $&#123;ramdisk_load_address&#125; $&#123;ramdisk_image&#125; &amp;&amp; "</span> \</span><br><span class="line"><span class="string">"bootm $&#123;kernel_load_address&#125; $&#123;ramdisk_load_address&#125; $&#123;devicetree_load_address&#125;; "</span> \</span><br><span class="line"><span class="string">"fi\0"</span> \</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>分别看下u-boot中sf和load命令:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sf: 用于spi/qspi flash的读/写/擦除操作;</span></span><br><span class="line"><span class="comment">// read/write/erase之前必须先调用sf probe;</span></span><br><span class="line"><span class="comment">// 具体用法:</span></span><br><span class="line">sf probe [[bus:]cs] [hz] [mode]- init flash device on given SPI bus <span class="keyword">and</span> chip select</span><br><span class="line">sf read addr offset len- read `len' bytes starting at`offset' to memory at `addr'</span><br><span class="line">sf write addr offset len- write `len' bytes from memor at `addr' to flash at `offset'</span><br><span class="line">sf erase offset [+]len- erase `len' bytes from `offset' `+len' round up `len' to block size</span><br><span class="line">sf update addr offset len- erase <span class="keyword">and</span> write `len' bytes from memory at `addr' to flash at `offset'</span><br></pre></td></tr></table></figure><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load: 用于读取文件系统中的二进制文件;</span></span><br><span class="line"><span class="comment">// 从SD卡启动, mmc 0 为SD卡;</span></span><br><span class="line"><span class="comment">// 具体用法:</span></span><br><span class="line">load &lt;interface&gt; [&lt;dev[:part]&gt; [&lt;addr&gt; [&lt;filename&gt; [bytes [pos]]]]]</span><br><span class="line">- Load binary file 'filename' from partition 'part' on device</span><br><span class="line">type 'interface' instance 'dev' to address 'addr' in memory.</span><br><span class="line">'bytes' gives the size to load in bytes.</span><br><span class="line">If 'bytes' is 0 or omitted, the file is read until the end.</span><br><span class="line">'pos' gives the file byte position to start reading from.</span><br><span class="line">If 'pos' is 0 or omitted, the file is read from the start.</span><br></pre></td></tr></table></figure><br>通过对比我们可以看出SD卡和QSPI启动Linux的区别主要在于:前者从SD卡中将uImage, uramdisk.image.gz, devicetree.dtb文件加载到内存指定位置, 而后者从qspi flash 指定地址(分区)中加载到内存.<p></p><blockquote><p>Tips:</p><blockquote><p>qspiboot中读取Flash时使用的三个地址偏移0x500000, 0xA00000, 0xA20000, 需要根据实际情况进行配置.</p></blockquote></blockquote><hr><h2 id="QSPI-FLASH烧录"><a href="#QSPI-FLASH烧录" class="headerlink" title="QSPI FLASH烧录"></a>QSPI FLASH烧录</h2><h3 id="U-boot下烧录SD卡启动文件到QSPI-Flash"><a href="#U-boot下烧录SD卡启动文件到QSPI-Flash" class="headerlink" title="U-boot下烧录SD卡启动文件到QSPI Flash"></a>U-boot下烧录SD卡启动文件到QSPI Flash</h3><p>设置板子为SD卡启动, 上电后进入U-boot命令行:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Zynq&gt; ls mmc 0# 查看SD卡目录结构;</span><br><span class="line"></span><br><span class="line">Zynq&gt; sf probe 0 0 0# 初始化SPI FLASH  </span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 BOOT.bin# 从SD卡加载BOOT.bin到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x0 0x500000# 擦除Flash 0x0地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x0 0x500000# 将内存地址0x08000000起始处的0x500000的大小内容写进Flash地址0x0处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 uImage# 从SD卡加载uImage到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x500000 0x500000# 擦除Flash 0x500000地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x500000 0x500000# 将内存地址0x08000000起始处的0x500000的大小内容写进Flash地址0x500000处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 devicetree.dtb# 从SD卡加载devicetree.dtb到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0xA00000 0x20000# 擦除Flash 0xA00000地址处大小为0x20000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0xA00000 0x20000# 将内存地址0x08000000起始处的0x20000的大小内容写进Flash地址0xA00000处;</span><br><span class="line"></span><br><span class="line">Zynq&gt; fatload mmc 0 0x08000000 uramdisk.image.gz# 从SD卡加载uramdisk.image.gz到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0xA20000 0x800000# 擦除Flash 0xA20000地址处大小为0x500000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0xA20000 0x800000# 将内存地址0x08000000起始处的0x800000的大小内容写进Flash地址0xA20000处;</span><br></pre></td></tr></table></figure><br>设置板子为QSPI启动, 重新上电, 成功进入系统.<p></p><hr><h3 id="制作QSPI启动镜像"><a href="#制作QSPI启动镜像" class="headerlink" title="制作QSPI启动镜像"></a>制作QSPI启动镜像</h3><p>直接烧写SD卡启动文件似乎有点复杂, 那么我们就制作单独的QSPI启动镜像文件, 简化烧录过程; 首先我们看看制作SD卡启动文件脚本的主要内容:<br></p><figure class="highlight bash"><figcaption><span>scripts/mk_sd_image.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"//arch = zynq; split = false; format = BIN"</span>&gt; <span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the_ROM_image:"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" [bootloader]<span class="variable">$&#123;TARGET&#125;</span>/fsbl.elf"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" <span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">" <span class="variable">$&#123;TARGET&#125;</span>/u-boot.elf"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#125;"</span>&gt;&gt;<span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif</span><br><span class="line">...</span><br><span class="line">bootgen -image <span class="variable">$&#123;TARGET&#125;</span>/sd_image.bif -o <span class="variable">$&#123;IMAGES&#125;</span>/sd_image/BOOT.bin -w on</span><br><span class="line">...</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/uImage<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/devicetree.dtb<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">cp -a <span class="variable">$&#123;TARGET&#125;</span>/uramdisk.image.gz<span class="variable">$&#123;IMAGES&#125;</span>/sd_image/</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>从这一段内容可以看出BOOT.bin是由sd_image.bif打包生成的; 而sd_image.bif是由fsbl.elf, system_wrapper.bit, boot.elf三个文件组成, 基本格式为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">the_ROM_image:</span><br><span class="line">&#123;</span><br><span class="line">[bootloader]fsbl.elf</span><br><span class="line">system_wrapper.bit</span><br><span class="line">boot.elf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>剩下的uImage, devicetree.dtb, uramdisk.image.gz则是直接拷贝过来的; 那么我们将bif文件的格式加入偏移后变成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">the_ROM_image:</span><br><span class="line">&#123;</span><br><span class="line">[bootloader]fsbl.elf</span><br><span class="line">system_wrapper.bit</span><br><span class="line">boot.elf</span><br><span class="line">[offset = 0x500000]uImage.bin</span><br><span class="line">[offset = 0xA00000]devicetree.dtb</span><br><span class="line">[offset = 0xA20000]uramdisk.image.gz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样就将所有需要的启动文件打包成一个文件.<p></p><blockquote><p>Tips:</p><blockquote><p>注意这里的offset要与bootargs中的偏移一致才能正确读取各个部分内容.</p></blockquote></blockquote><p>修改mk_sd_image.sh的内容, 保存为mk_qspi_image.sh<br></p><figure class="highlight bash"><figcaption><span>[src]scripts/mk_qspi_image.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">BIF_FILE=<span class="variable">$&#123;TARGET&#125;</span>/qspi_image.bif</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"//arch = zynq; split = false; format = BIN"</span>&gt; <span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the_ROM_image:"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># The files we need are:</span></span><br><span class="line"><span class="comment"># 1. the first stage boot loader</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[bootloader]<span class="variable">$&#123;TARGET&#125;</span>/fsbl.elf"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 2. FPGA bit stream</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/system_wrapper.bit"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 3. Das U-Boot boot loader</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TARGET&#125;</span>/u-boot.elf"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 4. Linux kernel with modified header for U-Boot</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0x500000]<span class="variable">$&#123;TARGET&#125;</span>/uImage.bin"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 5. Device tree blob</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0xA00000]<span class="variable">$&#123;TARGET&#125;</span>/devicetree.dtb"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># 6. Root filesystem</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[offset = 0xA20000]<span class="variable">$&#123;TARGET&#125;</span>/uramdisk.image.gz"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#125;"</span>&gt;&gt;<span class="variable">$&#123;BIF_FILE&#125;</span></span><br><span class="line"><span class="comment"># end</span></span><br><span class="line">bootgen -image <span class="variable">$&#123;TARGET&#125;</span>/qspi_image.bif -o <span class="variable">$&#123;IMAGES&#125;</span>/qspi_image/qspi_image.bin -w on</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>执行以下脚本生成image/qspi_image/qspi_image.bin, 文件大小接近18MB.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mk_bootloader.sh &amp;&amp; mk_kernel.sh &amp;&amp; mk_qspi_image.sh</span><br></pre></td></tr></table></figure><br>烧录时执行以下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Zynq&gt; fatload mmc 0 0x08000000 qspi_image.bin# 从SD卡加载qspi_image.bin到内存地址0x08000000;</span><br><span class="line">Zynq&gt; sf erase 0x0 0x1200000# 擦除Flash 0x0地址处大小为0x1200000的空间;</span><br><span class="line">Zynq&gt; sf write 0x8000000  0x0 0x1200000# 将内存地址0x08000000起始处的0x1200000的大小内容写进Flash地址0x0处;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="启动Linux后烧录启动文件到QSPI-Flash"><a href="#启动Linux后烧录启动文件到QSPI-Flash" class="headerlink" title="启动Linux后烧录启动文件到QSPI Flash"></a>启动Linux后烧录启动文件到QSPI Flash</h3><p>在Linux下可以将bin文件通过dd 命令直接写进Flash中. 首先要配置QSPI Flash驱动, 生成MTD设备节点. 在Kernel源码路径输入命令:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># make ARCH=arm menuconfig</span><br></pre></td></tr></table></figure><br>选择以下配置选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Device Drivers  ---&gt;</span><br><span class="line">&lt;*&gt; Memory Technology Device (MTD) support  ---&gt;</span><br><span class="line">Self-contained MTD device drivers  ---&gt;</span><br><span class="line">&lt;*&gt; Support most SPI Flash chips (AT26DF, M25P, W25X, ...)</span><br><span class="line">&lt;*&gt;   SPI-NOR device support  ---&gt;</span><br><span class="line">[*] SPI support  ---&gt;</span><br><span class="line">&lt;*&gt;   Xilinx SPI controller common module</span><br><span class="line">&lt;*&gt;   Xilinx Zynq QSPI controller</span><br></pre></td></tr></table></figure><br>修改设备树:<br><figure class="highlight plain"><figcaption><span>[src]kernel/arch/arm/boot/dts/zynq-zed.dts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">aliases &#123;</span><br><span class="line">...</span><br><span class="line">spi0 = &amp;qspi;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&amp;qspi &#123;</span><br><span class="line">status = &quot;okay&quot;;</span><br><span class="line">is-dual = &lt;0&gt;;</span><br><span class="line">num-cs = &lt;1&gt;;</span><br><span class="line">flash@0 &#123;</span><br><span class="line">compatible = &quot;n25q128a11&quot;;</span><br><span class="line">reg = &lt;0x0&gt;;</span><br><span class="line">spi-tx-bus-width = &lt;1&gt;;</span><br><span class="line">spi-rx-bus-width = &lt;4&gt;;</span><br><span class="line">spi-max-frequency = &lt;50000000&gt;;</span><br><span class="line">#address-cells = &lt;1&gt;;</span><br><span class="line">#size-cells = &lt;1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>在flash子节点下可以自己添加分区, 格式为<br><figure class="highlight plain"><figcaption><span>[src]kernel/arch/arm/boot/dts/zynq-zed.dts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">partition@qspi-fsbl-uboot &#123;</span><br><span class="line">label = &quot;qspi-fsbl-uboot&quot;;</span><br><span class="line">reg = &lt;0x0 0x500000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-linux &#123;</span><br><span class="line">label = &quot;qspi-linux&quot;;</span><br><span class="line">reg = &lt;0x500000 0x500000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-device-tree &#123;</span><br><span class="line">label = &quot;qspi-device-tree&quot;;</span><br><span class="line">reg = &lt;0xA00000 0x20000&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">partition@qspi-rootfs &#123;</span><br><span class="line">label = &quot;qspi-rootfs&quot;;</span><br><span class="line">reg = &lt;0xA20000 0x800000&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>执行以下脚本生成qspi_image.bin:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mk_bootloader.sh &amp;&amp; mk_kernel.sh &amp;&amp; mk_qspi_image.sh</span><br></pre></td></tr></table></figure><br>拷贝生成文件到SD卡, 上电启动, 进入系统, 查看设备节点和MTD分区信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ls /dev/mtd*</span><br><span class="line">/dev/mtd0       /dev/mtd0ro     /dev/mtdblock0</span><br><span class="line"># cat /proc/mtd </span><br><span class="line">dev:    size   erasesize  name</span><br><span class="line">mtd0: 02000000 00010000 &quot;spi0.0&quot;</span><br></pre></td></tr></table></figure><br>使用dd命令烧录QSPI Flash:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># dd if=&lt;sdcard_root_dir&gt;/qspi_image.bin of=/dev/mtdblock0 bs=1024</span><br><span class="line">17687+1 records in</span><br><span class="line">17687+1 records out</span><br></pre></td></tr></table></figure><br>重新启动开发板, 进入系统, OK.<p></p><hr><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>@系统: Windows 7 Professional with SP1<br>@Vivado: 2015.04<br>@虚拟机: OSRC_Miz7_ubuntu_14<br>@开发板: 米联MIZ702N</p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.osrc.cn/forum.php?mod=viewthread&amp;tid=1634" target="_blank" rel="noopener">[移植篇] CH04 LINUX从QSPI启动</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> qspi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ZYNQ QSPI驱动分析</title>
      <link href="/1064320173/"/>
      <url>/1064320173/</url>
      <content type="html"><![CDATA[<!-- build time:Wed Aug 22 2018 09:29:52 GMT+0800 (中国标准时间) --><hr><h2 id="ZYNQ-QSPI框架接口"><a href="#ZYNQ-QSPI框架接口" class="headerlink" title="ZYNQ QSPI框架接口"></a>ZYNQ QSPI框架接口</h2><p>首先, 我们要知道: SPI Nor层完成MTD子系统的接口和Norflash操作硬件接口的转化, 而SPI Master层完成操作硬件时数据传输的协议制定.<br>那么一次读写Norflash过程可以简化为:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file system(open, read, write) -&gt;</span><br><span class="line">mtd sub system(mtd_open, mtd_read, mtd_write) -&gt;</span><br><span class="line">nor flash(m25p80_read, m25p80_write) -&gt;</span><br><span class="line">hardware</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>再来看下整个qspi框架的主要接口:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">MTD Sub System  |</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">                | spi_nor_read  spi_nor_write  spi_nor_lock  spi_nor_unlock</span><br><span class="line">SPI Nor         |------------------------------------------------------------</span><br><span class="line">                | m25p80_read m25p80_write m25p80_read_reg m25p80_write_reg</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">                | spi_write spi_sync spi_write_then_read</span><br><span class="line">SPI Master      |------------------------------------------------------------</span><br><span class="line">                | zynq_qspi_setup zynq_qspi_start_transfer</span><br><span class="line">----------------|------------------------------------------------------------</span><br><span class="line">Hardware        |</span><br><span class="line">----------------|------------------------------------------------------------</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="ZYNQ-QSPI驱动注册过程"><a href="#ZYNQ-QSPI驱动注册过程" class="headerlink" title="ZYNQ QSPI驱动注册过程"></a>ZYNQ QSPI驱动注册过程</h2><p>QSPI驱动主要分为2个部分: SPI Master部分完成主控的硬件初始化以及配置SPI总线地址, 位宽, 模式, 速度等; Norflash部分实现了操作Flash硬件的接口和MTD子系统的读/写/擦除Flash接口.</p><hr><h3 id="SPI-Master驱动注册"><a href="#SPI-Master驱动注册" class="headerlink" title="SPI Master驱动注册"></a>SPI Master驱动注册</h3><p>在驱动入口函数zynq_qspi_probe中, 完成对QSPI主控制器的一系列初始化:<br></p><figure class="highlight c"><figcaption><span>[src]driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* QSPI controller initializations */</span></span><br><span class="line">zynq_qspi_init_hw(xqspi);</span><br><span class="line">...</span><br><span class="line">master-&gt;setup = zynq_qspi_setup;</span><br><span class="line">master-&gt;set_cs = zynq_qspi_chipselect;</span><br><span class="line">master-&gt;transfer_one = zynq_qspi_start_transfer;</span><br><span class="line">master-&gt;prepare_transfer_hardware = zynq_prepare_transfer_hardware;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>最后调用spi_register_master()创建设备节点/dev/spiX.X<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi-zynq-qspi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">zynq_qspi_probe</span><span class="params">(struct platform_device *pdev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = spi_register_master(master);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">dev_err(&amp;pdev-&gt;dev, <span class="string">"spi_register_master failed\n"</span>);</span><br><span class="line"><span class="keyword">goto</span> clk_dis_all;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在spi_register_master函数的最后, 调用了of_register_spi_device来遍历子节点<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_register_master</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register devices from the device tree and ACPI */</span></span><br><span class="line">of_register_spi_devices(master);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在该函数中读取设备树上的配置信息, 初始化SPI BUS<br><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Alloc an spi_device */</span></span><br><span class="line">spi = spi_alloc_device(master);</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Select device driver */</span></span><br><span class="line">rc = of_modalias_node(nc, spi-&gt;modalias, </span><br><span class="line"><span class="keyword">sizeof</span>(spi-&gt;modalias));</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Device address */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"reg"</span>, &amp;value);</span><br><span class="line">spi-&gt;chip_select = value;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Mode (clock phase/polarity/etc.) */</span></span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpha"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPHA;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cpol"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CPOL;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-cs-high"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_CS_HIGH;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-3wire"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_3WIRE;</span><br><span class="line"><span class="keyword">if</span> (of_find_property(nc, <span class="string">"spi-lsb-first"</span>, <span class="literal">NULL</span>))</span><br><span class="line">spi-&gt;mode |= SPI_LSB_FIRST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device DUAL/QUAD mode */</span></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-tx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_TX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-tx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!of_property_read_u32(nc, <span class="string">"spi-rx-bus-width"</span>, &amp;value)) &#123;</span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_DUAL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">spi-&gt;mode |= SPI_RX_QUAD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">dev_warn(&amp;master-&gt;dev,</span><br><span class="line"><span class="string">"spi-rx-bus-width %d not supported\n"</span>,</span><br><span class="line">value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Device speed */</span></span><br><span class="line">rc = of_property_read_u32(nc, <span class="string">"spi-max-frequency"</span>, &amp;value);</span><br><span class="line">spi-&gt;max_speed_hz = value;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="Norflash驱动注册"><a href="#Norflash驱动注册" class="headerlink" title="Norflash驱动注册"></a>Norflash驱动注册</h3><p>在of_register_spi_device函数的最后, 调用spi_add_device来加载m25p80设备驱动<br></p><figure class="highlight c"><figcaption><span>[src]driver/spi/spi.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">of_register_spi_devices</span><span class="params">(struct spi_master *master)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/* Register the new device */</span></span><br><span class="line">rc = spi_add_device(spi);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在m25p_probe函数中, 配置spi nor的read/write(读写nor flash), read_reg(配置qspi寄存器), write_reg(配置nor flash寄存器)<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">m25p_probe</span><span class="params">(struct spi_device *spi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">nor-&gt;read = m25p80_read;</span><br><span class="line">nor-&gt;write = m25p80_write;</span><br><span class="line">nor-&gt;write_reg = m25p80_write_reg;</span><br><span class="line">nor-&gt;read_reg = m25p80_read_reg;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用spi_nor_scan函数, 获取id, 得到nor flash信息, 然后配置type, writesize, size等参数, 设置_erase, _read, _write回调函数<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/devices/m25p80.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spi_nor_scan</span><span class="params">(struct spi_nor *nor, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">enum</span> read_mode mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">jinfo = spi_nor_read_id(nor);</span><br><span class="line">...</span><br><span class="line">mtd-&gt;priv = nor;</span><br><span class="line">mtd-&gt;type = MTD_NORFLASH;</span><br><span class="line">mtd-&gt;writesize = <span class="number">1</span>;</span><br><span class="line">mtd-&gt;flags = MTD_CAP_NORFLASH;</span><br><span class="line">mtd-&gt;size = info-&gt;sector_size * info-&gt;n_sectors;</span><br><span class="line">mtd-&gt;_erase = spi_nor_erase;</span><br><span class="line">mtd-&gt;_read = spi_nor_read_ext;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>调用mtd_device_register函数, 解析设备树中的分区表, 添加分区信息<br><figure class="highlight c"><figcaption><span>[src]drivers/mtd/mtdcore.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mtd_device_parse_register</span><span class="params">(struct mtd_info *mtd, <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> *types,</span></span></span><br><span class="line"><span class="function"><span class="params">      struct mtd_part_parser_data *parser_data,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> struct mtd_partition *parts,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">int</span> nr_parts)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">ret = parse_mtd_partitions(mtd, types, &amp;parsed, parser_data);</span><br><span class="line">...</span><br><span class="line">ret = mtd_add_device_partitions(mtd, &amp;parsed);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/sinbingzoo/article/details/80206480" target="_blank" rel="noopener">Linux SPI/QSPI nor flash相关驱动代码</a></p><hr><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> xilinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xilinx </tag>
            
            <tag> qspi </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
